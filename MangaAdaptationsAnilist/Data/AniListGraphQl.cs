// <auto-generated> This file has been auto generated. </auto-generated>
// https://github.com/Husqvik/GraphQlClientGenerator
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
#endif

namespace MangaAdaptationsAnilist.GraphQl
{
    #region base classes
    public struct FieldMetadata
    {
        public string Name { get; set; }
        public string DefaultAlias { get; set; }
        public bool IsComplex { get; set; }
        public Type QueryBuilderType { get; set; }
    }
    
    public enum Formatting
    {
        None,
        Indented
    }
    
    public class GraphQlObjectTypeAttribute : Attribute
    {
        public string TypeName { get; }
    
        public GraphQlObjectTypeAttribute(string typeName) => TypeName = typeName;
    }
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    public class QueryBuilderParameterConverter<T> : JsonConverter
    {
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                default:
                    return (QueryBuilderParameter<T>)(T)serializer.Deserialize(reader, typeof(T));
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value == null)
                writer.WriteNull();
            else
                serializer.Serialize(writer, ((QueryBuilderParameter<T>)value).Value, typeof(T));
        }
    
        public override bool CanConvert(Type objectType) => objectType.IsSubclassOf(typeof(QueryBuilderParameter));
    }
    
    public class GraphQlInterfaceJsonConverter : JsonConverter
    {
        private const string FieldNameType = "__typename";
    
        private static readonly Dictionary<string, Type> InterfaceTypeMapping =
            typeof(GraphQlInterfaceJsonConverter).Assembly.GetTypes()
                .Select(t => new { Type = t, Attribute = t.GetCustomAttribute<GraphQlObjectTypeAttribute>() })
                .Where(x => x.Attribute != null && x.Type.Namespace == typeof(GraphQlInterfaceJsonConverter).Namespace)
                .ToDictionary(x => x.Attribute.TypeName, x => x.Type);
    
        public override bool CanConvert(Type objectType) => objectType.IsInterface || objectType.IsArray;
    
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            while (reader.TokenType == JsonToken.Comment)
                reader.Read();
    
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                case JsonToken.StartObject:
                    var jObject = JObject.Load(reader);
                    if (!jObject.TryGetValue(FieldNameType, out var token) || token.Type != JTokenType.String)
                        throw CreateJsonReaderException(reader, $"\"{GetType().FullName}\" requires JSON object to contain \"{FieldNameType}\" field with type name");
    
                    var typeName = token.Value<string>();
                    if (!InterfaceTypeMapping.TryGetValue(typeName, out var type))
                        throw CreateJsonReaderException(reader, $"type \"{typeName}\" not found");
    
                    using (reader = CloneReader(jObject, reader))
                        return serializer.Deserialize(reader, type);
    
                case JsonToken.StartArray:
                    var elementType = GetElementType(objectType);
                    if (elementType == null)
                        throw CreateJsonReaderException(reader, $"array element type could not be resolved for type \"{objectType.FullName}\"");
    
                    return ReadArray(reader, objectType, elementType, serializer);
    
                default:
                    throw CreateJsonReaderException(reader, $"unrecognized token: {reader.TokenType}");
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) => serializer.Serialize(writer, value);
    
        private static JsonReader CloneReader(JToken jToken, JsonReader reader)
        {
            var jObjectReader = jToken.CreateReader();
            jObjectReader.Culture = reader.Culture;
            jObjectReader.CloseInput = reader.CloseInput;
            jObjectReader.SupportMultipleContent = reader.SupportMultipleContent;
            jObjectReader.DateTimeZoneHandling = reader.DateTimeZoneHandling;
            jObjectReader.FloatParseHandling = reader.FloatParseHandling;
            jObjectReader.DateFormatString = reader.DateFormatString;
            jObjectReader.DateParseHandling = reader.DateParseHandling;
            return jObjectReader;
        }
    
        private static JsonReaderException CreateJsonReaderException(JsonReader reader, string message)
        {
            if (reader is IJsonLineInfo lineInfo && lineInfo.HasLineInfo())
                return new JsonReaderException(message, reader.Path, lineInfo.LineNumber, lineInfo.LinePosition, null);
    
            return new JsonReaderException(message);
        }
    
        private static Type GetElementType(Type arrayOrGenericContainer) =>
            arrayOrGenericContainer.IsArray ? arrayOrGenericContainer.GetElementType() : arrayOrGenericContainer.GenericTypeArguments.FirstOrDefault();
    
        private IList ReadArray(JsonReader reader, Type targetType, Type elementType, JsonSerializer serializer)
        {
            var list = CreateCompatibleList(targetType, elementType);
            while (reader.Read() && reader.TokenType != JsonToken.EndArray)
                list.Add(ReadJson(reader, elementType, null, serializer));
    
            if (!targetType.IsArray)
                return list;
    
            var array = Array.CreateInstance(elementType, list.Count);
            list.CopyTo(array, 0);
            return array;
        }
    
        private static IList CreateCompatibleList(Type targetContainerType, Type elementType) =>
            (IList)Activator.CreateInstance(targetContainerType.IsArray || targetContainerType.IsAbstract ? typeof(List<>).MakeGenericType(elementType) : targetContainerType);
    }
    #endif
    
    internal static class GraphQlQueryHelper
    {
        private static readonly Regex RegexWhiteSpace = new Regex(@"\s", RegexOptions.Compiled);
        private static readonly Regex RegexGraphQlIdentifier = new Regex(@"^[_A-Za-z][_0-9A-Za-z]*$", RegexOptions.Compiled);
    
        public static string GetIndentation(int level, byte indentationSize)
        {
            return new String(' ', level * indentationSize);
        }
    
        public static string BuildArgumentValue(object value, string formatMask, Formatting formatting, int level, byte indentationSize)
        {
            if (value is null)
                return "null";
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
            if (value is JValue jValue)
            {
                switch (jValue.Type)
                {
                    case JTokenType.Null: return "null";
                    case JTokenType.Integer:
                    case JTokenType.Float:
                    case JTokenType.Boolean:
                        return BuildArgumentValue(jValue.Value, null, formatting, level, indentationSize);
                    default:
                        return "\"" + jValue.Value + "\"";
                }
            }
    
            if (value is JProperty jProperty)
            {
                if (RegexWhiteSpace.IsMatch(jProperty.Name))
                    throw new ArgumentException($"JSON object keys used as GraphQL arguments must not contain whitespace; key: {jProperty.Name}");
    
                return $"{jProperty.Name}:{(formatting == Formatting.Indented ? " " : null)}{BuildArgumentValue(jProperty.Value, null, formatting, level, indentationSize)}";
            }
    
            if (value is JObject jObject)
                return BuildEnumerableArgument(jObject, null, formatting, level + 1, indentationSize, '{', '}');
    #endif
    
            var enumerable = value as IEnumerable;
            if (!String.IsNullOrEmpty(formatMask) && enumerable == null)
                return
                    value is IFormattable formattable
                        ? "\"" + formattable.ToString(formatMask, CultureInfo.InvariantCulture) + "\""
                        : throw new ArgumentException($"Value must implement {nameof(IFormattable)} interface to use a format mask. ", nameof(value));
    
            if (value is Enum @enum)
                return ConvertEnumToString(@enum);
    
            if (value is bool @bool)
                return @bool ? "true" : "false";
    
            if (value is DateTime dateTime)
                return "\"" + dateTime.ToString("O") + "\"";
    
            if (value is DateTimeOffset dateTimeOffset)
                return "\"" + dateTimeOffset.ToString("O") + "\"";
    
            if (value is IGraphQlInputObject inputObject)
                return BuildInputObject(inputObject, formatting, level + 2, indentationSize);
    
            if (value is String || value is Guid)
                return "\"" + value + "\"";
    
            if (enumerable != null)
                return BuildEnumerableArgument(enumerable, formatMask, formatting, level, indentationSize, '[', ']');
    
            if (value is short || value is ushort || value is byte || value is int || value is uint || value is long || value is ulong || value is float || value is double || value is decimal)
                return Convert.ToString(value, CultureInfo.InvariantCulture);
    
            var argumentValue = Convert.ToString(value, CultureInfo.InvariantCulture);
            return "\"" + argumentValue + "\"";
        }
    
        private static string BuildEnumerableArgument(IEnumerable enumerable, string formatMask, Formatting formatting, int level, byte indentationSize, char openingSymbol, char closingSymbol)
        {
            var builder = new StringBuilder();
            builder.Append(openingSymbol);
            var delimiter = String.Empty;
            foreach (var item in enumerable)
            {
                builder.Append(delimiter);
    
                if (formatting == Formatting.Indented)
                {
                    builder.AppendLine();
                    builder.Append(GetIndentation(level + 1, indentationSize));
                }
    
                builder.Append(BuildArgumentValue(item, formatMask, formatting, level, indentationSize));
                delimiter = ",";
            }
    
            builder.Append(closingSymbol);
            return builder.ToString();
        }
    
        public static string BuildInputObject(IGraphQlInputObject inputObject, Formatting formatting, int level, byte indentationSize)
        {
            var builder = new StringBuilder();
            builder.Append("{");
    
            var isIndentedFormatting = formatting == Formatting.Indented;
            string valueSeparator;
            if (isIndentedFormatting)
            {
                builder.AppendLine();
                valueSeparator = ": ";
            }
            else
                valueSeparator = ":";
    
            var separator = String.Empty;
            foreach (var propertyValue in inputObject.GetPropertyValues())
            {
                var queryBuilderParameter = propertyValue.Value as QueryBuilderParameter;
                var value =
                    queryBuilderParameter?.Name != null
                        ? "$" + queryBuilderParameter.Name
                        : BuildArgumentValue(queryBuilderParameter == null ? propertyValue.Value : queryBuilderParameter.Value, propertyValue.FormatMask, formatting, level, indentationSize);
    
                builder.Append(isIndentedFormatting ? GetIndentation(level, indentationSize) : separator);
                builder.Append(propertyValue.Name);
                builder.Append(valueSeparator);
                builder.Append(value);
    
                separator = ",";
    
                if (isIndentedFormatting)
                    builder.AppendLine();
            }
    
            if (isIndentedFormatting)
                builder.Append(GetIndentation(level - 1, indentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        public static string BuildDirective(GraphQlDirective directive, Formatting formatting, int level, byte indentationSize)
        {
            if (directive == null)
                return String.Empty;
    
            var isIndentedFormatting = formatting == Formatting.Indented;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
            builder.Append(indentationSpace);
            builder.Append("@");
            builder.Append(directive.Name);
            builder.Append("(");
    
            string separator = null;
            foreach (var kvp in directive.Arguments)
            {
                var argumentName = kvp.Key;
                var argument = kvp.Value;
    
                builder.Append(separator);
                builder.Append(argumentName);
                builder.Append(":");
                builder.Append(indentationSpace);
    
                if (argument.Name == null)
                    builder.Append(BuildArgumentValue(argument.Value, null, formatting, level, indentationSize));
                else
                {
                    builder.Append("$");
                    builder.Append(argument.Name);
                }
    
                separator = isIndentedFormatting ? ", " : ",";
            }
    
            builder.Append(")");
            return builder.ToString();
        }
    
        public static void ValidateGraphQlIdentifier(string name, string identifier)
        {
            if (identifier != null && !RegexGraphQlIdentifier.IsMatch(identifier))
                throw new ArgumentException("value must match [_A-Za-z][_0-9A-Za-z]*", name);
        }
    
        private static string ConvertEnumToString(Enum @enum)
        {
            var enumMember = @enum.GetType().GetField(@enum.ToString());
                if (enumMember == null)
                    throw new InvalidOperationException("enum member resolution failed");
    
            var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));
    
            return enumMemberAttribute == null
                ? @enum.ToString()
                : enumMemberAttribute.Value;
        }
    }
    
    internal struct InputPropertyInfo
    {
        public string Name { get; set; }
        public object Value { get; set; }
        public string FormatMask { get; set; }
    }
    
    internal interface IGraphQlInputObject
    {
        IEnumerable<InputPropertyInfo> GetPropertyValues();
    }
    
    public interface IGraphQlQueryBuilder
    {
        void Clear();
        void IncludeAllFields();
        string Build(Formatting formatting = Formatting.None, byte indentationSize = 2);
    }
    
    public struct QueryBuilderArgumentInfo
    {
        public string ArgumentName { get; set; }
        public QueryBuilderParameter ArgumentValue { get; set; }
        public string FormatMask { get; set; }
    }
    
    public abstract class QueryBuilderParameter
    {
        private string _name;
    
        internal string GraphQlTypeName { get; }
        internal object Value { get; set; }
    
        public string Name
        {
            get => _name;
            set
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(Name), value);
                _name = value;
            }
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, object value)
        {
            Name = name?.Trim();
            GraphQlTypeName = graphQlTypeName?.Replace(" ", null).Replace("\t", null).Replace("\n", null).Replace("\r", null);
            Value = value;
        }
    
        protected QueryBuilderParameter(object value) => Value = value;
    }
    
    public class QueryBuilderParameter<T> : QueryBuilderParameter
    {
        public new T Value
        {
            get => (T)base.Value;
            set => base.Value = value;
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
            if (String.IsNullOrWhiteSpace(graphQlTypeName))
                throw new ArgumentException("value required", nameof(graphQlTypeName));
        }
    
        public QueryBuilderParameter(T value) : base(value)
        {
        }
    
        public static implicit operator QueryBuilderParameter<T>(T value) => new QueryBuilderParameter<T>(value);
    
        public static implicit operator T(QueryBuilderParameter<T> parameter) => parameter.Value;
    }
    
    public class GraphQlQueryParameter<T> : QueryBuilderParameter<T>
    {
        private string _formatMask;
    
        public string FormatMask
        {
            get => _formatMask;
            set => _formatMask =
                typeof(IFormattable).IsAssignableFrom(typeof(T))
                    ? value
                    : throw new InvalidOperationException($"Value must be of {nameof(IFormattable)} type. ");
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
        }
    
        public GraphQlQueryParameter(string name, T value, bool isNullable = true) : base(name, GetGraphQlTypeName(value, isNullable), value)
        {
        }
    
        private static string GetGraphQlTypeName(T value, bool isNullable)
        {
            var graphQlTypeName = GetGraphQlTypeName(typeof(T));
            if (!isNullable)
                graphQlTypeName += "!";
    
            return graphQlTypeName;
        }
    
        private static string GetGraphQlTypeName(Type valueType)
        {
            valueType = Nullable.GetUnderlyingType(valueType) ?? valueType;
    
            if (valueType.IsArray)
            {
                var arrayItemType = GetGraphQlTypeName(valueType.GetElementType());
                return arrayItemType == null ? null : "[" + arrayItemType + "]";
            }
    
            if (typeof(IEnumerable).IsAssignableFrom(valueType))
            {
                var genericArguments = valueType.GetGenericArguments();
                if (genericArguments.Length == 1)
                {
                    var listItemType = GetGraphQlTypeName(valueType.GetGenericArguments()[0]);
                    return listItemType == null ? null : "[" + listItemType + "]";
                }
            }
    
            if (GraphQlTypes.ReverseMapping.TryGetValue(valueType, out var graphQlTypeName))
                return graphQlTypeName;
    
            if (valueType == typeof(bool))
                return "Boolean";
    
            if (valueType == typeof(float) || valueType == typeof(double) || valueType == typeof(decimal))
                return "Float";
    
            if (valueType == typeof(Guid))
                return "ID";
    
            if (valueType == typeof(sbyte) || valueType == typeof(byte) || valueType == typeof(short) || valueType == typeof(ushort) || valueType == typeof(int) || valueType == typeof(uint) ||
                valueType == typeof(long) || valueType == typeof(ulong))
                return "Int";
    
            if (valueType == typeof(string))
                return "String";
    
            return null;
        }
    }
    
    public abstract class GraphQlDirective
    {
        private readonly Dictionary<string, QueryBuilderParameter> _arguments = new Dictionary<string, QueryBuilderParameter>();
    
        internal IEnumerable<KeyValuePair<string, QueryBuilderParameter>> Arguments => _arguments;
    
        public string Name { get; }
    
        protected GraphQlDirective(string name)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(name), name);
            Name = name;
        }
    
        protected void AddArgument(string name, QueryBuilderParameter value)
        {
            if (value != null)
                _arguments[name] = value;
        }
    }
    
    public abstract class GraphQlQueryBuilder : IGraphQlQueryBuilder
    {
        private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();
    
        private readonly string _operationType;
        private readonly string _operationName;
        private Dictionary<string, GraphQlFragmentCriteria> _fragments;
        private List<QueryBuilderArgumentInfo> _queryParameters;
    
        protected abstract string TypeName { get; }
    
        public abstract IReadOnlyList<FieldMetadata> AllFields { get; }
    
        protected GraphQlQueryBuilder(string operationType, string operationName)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(operationName), operationName);
            _operationType = operationType;
            _operationName = operationName;
        }
    
        public virtual void Clear()
        {
            _fieldCriteria.Clear();
            _fragments?.Clear();
            _queryParameters?.Clear();
        }
    
        void IGraphQlQueryBuilder.IncludeAllFields()
        {
            IncludeAllFields();
        }
    
        public string Build(Formatting formatting = Formatting.None, byte indentationSize = 2)
        {
            return Build(formatting, 1, indentationSize);
        }
    
        protected void IncludeAllFields()
        {
            IncludeFields(AllFields);
        }
    
        protected virtual string Build(Formatting formatting, int level, byte indentationSize)
        {
            var isIndentedFormatting = formatting == Formatting.Indented;
            var separator = String.Empty;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
    
            if (!String.IsNullOrEmpty(_operationType))
            {
                builder.Append(_operationType);
    
                if (!String.IsNullOrEmpty(_operationName))
                {
                    builder.Append(" ");
                    builder.Append(_operationName);
                }
    
                if (_queryParameters?.Count > 0)
                {
                    builder.Append(indentationSpace);
                    builder.Append("(");
    
                    foreach (var queryParameterInfo in _queryParameters)
                    {
                        if (isIndentedFormatting)
                        {
                            builder.AppendLine(separator);
                            builder.Append(GraphQlQueryHelper.GetIndentation(level, indentationSize));
                        }
                        else
                            builder.Append(separator);
                        
                        builder.Append("$");
                        builder.Append(queryParameterInfo.ArgumentValue.Name);
                        builder.Append(":");
                        builder.Append(indentationSpace);
    
                        builder.Append(queryParameterInfo.ArgumentValue.GraphQlTypeName);
    
                        if (!queryParameterInfo.ArgumentValue.GraphQlTypeName.EndsWith("!"))
                        {
                            builder.Append(indentationSpace);
                            builder.Append("=");
                            builder.Append(indentationSpace);
                            builder.Append(GraphQlQueryHelper.BuildArgumentValue(queryParameterInfo.ArgumentValue.Value, queryParameterInfo.FormatMask, formatting, 0, indentationSize));
                        }
    
                        separator = ",";
                    }
    
                    builder.Append(")");
                }
            }
    
            builder.Append(indentationSpace);
            builder.Append("{");
    
            if (isIndentedFormatting)
                builder.AppendLine();
    
            separator = String.Empty;
            
            foreach (var criteria in _fieldCriteria.Values.Concat(_fragments?.Values ?? Enumerable.Empty<GraphQlFragmentCriteria>()))
            {
                var fieldCriteria = criteria.Build(formatting, level, indentationSize);
                if (isIndentedFormatting)
                    builder.AppendLine(fieldCriteria);
                else if (!String.IsNullOrEmpty(fieldCriteria))
                {
                    builder.Append(separator);
                    builder.Append(fieldCriteria);
                }
    
                separator = ",";
            }
    
            if (isIndentedFormatting)
                builder.Append(GraphQlQueryHelper.GetIndentation(level - 1, indentationSize));
            
            builder.Append("}");
    
            return builder.ToString();
        }
    
        protected void IncludeScalarField(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlScalarFieldCriteria(fieldName, alias, args, directives);
        }
    
        protected void IncludeObjectField(string fieldName, string alias, GraphQlQueryBuilder objectFieldQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlObjectFieldCriteria(fieldName, alias, objectFieldQueryBuilder, args, directives);
        }
    
        protected void IncludeFragment(GraphQlQueryBuilder objectFieldQueryBuilder, GraphQlDirective[] directives)
        {
            _fragments = _fragments ?? new Dictionary<string, GraphQlFragmentCriteria>();
            _fragments[objectFieldQueryBuilder.TypeName] = new GraphQlFragmentCriteria(objectFieldQueryBuilder, directives);
        }
    
        protected void ExcludeField(string fieldName)
        {
            if (fieldName == null)
                throw new ArgumentNullException(nameof(fieldName));
    
            _fieldCriteria.Remove(fieldName);
        }
    
        protected void IncludeFields(IEnumerable<FieldMetadata> fields)
        {
            IncludeFields(fields, null);
        }
    
        private void IncludeFields(IEnumerable<FieldMetadata> fields, List<Type> parentTypes)
        {
            foreach (var field in fields)
            {
                if (field.QueryBuilderType == null)
                    IncludeScalarField(field.Name, field.DefaultAlias, null, null);
                else
                {
                    var builderType = GetType();
    
                    if (parentTypes != null && parentTypes.Any(t => t.IsAssignableFrom(field.QueryBuilderType)))
                        continue;
    
                    parentTypes?.Add(builderType);
    
                    var queryBuilder = InitializeChildBuilder(builderType, field.QueryBuilderType, parentTypes);
    
                    var includeFragmentMethods = field.QueryBuilderType.GetMethods().Where(IsIncludeFragmentMethod);
    
                    foreach (var includeFragmentMethod in includeFragmentMethods)
                        includeFragmentMethod.Invoke(queryBuilder, new object[] { InitializeChildBuilder(builderType, includeFragmentMethod.GetParameters()[0].ParameterType, parentTypes) });
    
                    IncludeObjectField(field.Name, field.DefaultAlias, queryBuilder, null, null);
                }
            }
        }
    
        private static GraphQlQueryBuilder InitializeChildBuilder(Type parentQueryBuilderType, Type queryBuilderType, List<Type> parentTypes)
        {
            var queryBuilder = (GraphQlQueryBuilder)Activator.CreateInstance(queryBuilderType);
            queryBuilder.IncludeFields(queryBuilder.AllFields, parentTypes ?? new List<Type> { parentQueryBuilderType });
            return queryBuilder;
        }
    
        private static bool IsIncludeFragmentMethod(MethodInfo methodInfo)
        {
            if (!methodInfo.Name.StartsWith("With") || !methodInfo.Name.EndsWith("Fragment"))
                return false;
    
            var parameters = methodInfo.GetParameters();
            return parameters.Length == 1 && parameters[0].ParameterType.IsSubclassOf(typeof(GraphQlQueryBuilder));
        }
    
        protected void AddParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            if (_queryParameters == null)
                _queryParameters = new List<QueryBuilderArgumentInfo>();
            
            _queryParameters.Add(new QueryBuilderArgumentInfo { ArgumentValue = parameter, FormatMask = parameter.FormatMask });
        }
    
        private abstract class GraphQlFieldCriteria
        {
            private readonly IList<QueryBuilderArgumentInfo> _args;
            private readonly GraphQlDirective[] _directives;
    
            protected readonly string FieldName;
            protected readonly string Alias;
    
            protected static string GetIndentation(Formatting formatting, int level, byte indentationSize) =>
                formatting == Formatting.Indented ? GraphQlQueryHelper.GetIndentation(level, indentationSize) : null;
    
            protected GraphQlFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(alias), alias);
                FieldName = fieldName;
                Alias = alias;
                _args = args;
                _directives = directives;
            }
    
            public abstract string Build(Formatting formatting, int level, byte indentationSize);
    
            protected string BuildArgumentClause(Formatting formatting, int level, byte indentationSize)
            {
                var separator = formatting == Formatting.Indented ? " " : null;
                var argumentCount = _args?.Count ?? 0;
                if (argumentCount == 0)
                    return String.Empty;
    
                var arguments =
                    _args.Select(
                        a => $"{a.ArgumentName}:{separator}{(a.ArgumentValue.Name == null ? GraphQlQueryHelper.BuildArgumentValue(a.ArgumentValue.Value, a.FormatMask, formatting, level, indentationSize) : "$" + a.ArgumentValue.Name)}");
    
                return $"({String.Join($",{separator}", arguments)})";
            }
    
            protected string BuildDirectiveClause(Formatting formatting, int level, byte indentationSize) =>
                _directives == null ? null : String.Concat(_directives.Select(d => d == null ? null : GraphQlQueryHelper.BuildDirective(d, formatting, level, indentationSize)));
    
            protected static string BuildAliasPrefix(string alias, Formatting formatting)
            {
                var separator = formatting == Formatting.Indented ? " " : String.Empty;
                return String.IsNullOrWhiteSpace(alias) ? null : alias + ':' + separator;
            }
        }
    
        private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
        {
            public GraphQlScalarFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                GetIndentation(formatting, level, indentationSize) +
                BuildAliasPrefix(Alias, formatting) +
                FieldName +
                BuildArgumentClause(formatting, level, indentationSize) +
                BuildDirectiveClause(formatting, level, indentationSize);
        }
    
        private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlObjectFieldCriteria(string fieldName, string alias, GraphQlQueryBuilder objectQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                _objectQueryBuilder._fieldCriteria.Count > 0 || _objectQueryBuilder._fragments?.Count > 0
                    ? GetIndentation(formatting, level, indentationSize) + BuildAliasPrefix(Alias, formatting) + FieldName +
                      BuildArgumentClause(formatting, level, indentationSize) + BuildDirectiveClause(formatting, level, indentationSize) + _objectQueryBuilder.Build(formatting, level + 1, indentationSize)
                    : null;
        }
    
        private class GraphQlFragmentCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlFragmentCriteria(GraphQlQueryBuilder objectQueryBuilder, GraphQlDirective[] directives) : base(objectQueryBuilder.TypeName, null, null, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                _objectQueryBuilder._fieldCriteria.Count == 0
                    ? null
                    : GetIndentation(formatting, level, indentationSize) + "..." + (formatting == Formatting.Indented ? " " : null) + "on " +
                      FieldName + BuildArgumentClause(formatting, level, indentationSize) + BuildDirectiveClause(formatting, level, indentationSize) + _objectQueryBuilder.Build(formatting, level + 1, indentationSize);
        }
    }
    
    public abstract class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
    {
        protected GraphQlQueryBuilder(string operationType = null, string operationName = null) : base(operationType, operationName)
        {
        }
    
        public TQueryBuilder WithAllFields()
        {
            IncludeAllFields();
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder WithAllScalarFields()
        {
            IncludeFields(AllFields.Where(f => !f.IsComplex));
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder ExceptField(string fieldName)
        {
            ExcludeField(fieldName);
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder WithTypeName(string alias = null, params GraphQlDirective[] directives)
        {
            IncludeScalarField("__typename", alias, null, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithScalarField(string fieldName, string alias, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeScalarField(fieldName, alias, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithObjectField(string fieldName, string alias, GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeObjectField(fieldName, alias, queryBuilder, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithFragment(GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives)
        {
            IncludeFragment(queryBuilder, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithParameterInternal<T>(GraphQlQueryParameter<T> parameter)
        {
            AddParameter(parameter);
            return (TQueryBuilder)this;
        }
    }
    
    public abstract class GraphQlResponse<TDataContract>
    {
        public TDataContract Data { get; set; }
        public ICollection<QueryError> Errors { get; set; }
    }
    
    public class QueryError
    {
        public string Message { get; set; }
        public ICollection<ErrorLocation> Locations { get; set; }
    }
    
    public class ErrorLocation
    {
        public int Line { get; set; }
        public int Column { get; set; }
    }
    #endregion

    #region GraphQL type helpers
    public static class GraphQlTypes
    {
        public const string Boolean = "Boolean";
        public const string CountryCode = "CountryCode";
        public const string Float = "Float";
        public const string FuzzyDateInt = "FuzzyDateInt";
        public const string Id = "ID";
        public const string Int = "Int";
        public const string Json = "Json";
        public const string String = "String";

        public const string ActivitySort = "ActivitySort";
        public const string ActivityType = "ActivityType";
        public const string AiringSort = "AiringSort";
        public const string CharacterRole = "CharacterRole";
        public const string CharacterSort = "CharacterSort";
        public const string LikeableType = "LikeableType";
        public const string MediaFormat = "MediaFormat";
        public const string MediaListSort = "MediaListSort";
        public const string MediaListStatus = "MediaListStatus";
        public const string MediaRankType = "MediaRankType";
        public const string MediaRelation = "MediaRelation";
        public const string MediaSeason = "MediaSeason";
        public const string MediaSort = "MediaSort";
        public const string MediaSource = "MediaSource";
        public const string MediaStatus = "MediaStatus";
        public const string MediaTrendSort = "MediaTrendSort";
        public const string MediaType = "MediaType";
        public const string ModActionType = "ModActionType";
        public const string ModRole = "ModRole";
        public const string NotificationType = "NotificationType";
        public const string RecommendationRating = "RecommendationRating";
        public const string RecommendationSort = "RecommendationSort";
        public const string ReviewRating = "ReviewRating";
        public const string ReviewSort = "ReviewSort";
        public const string RevisionHistoryAction = "RevisionHistoryAction";
        public const string ScoreFormat = "ScoreFormat";
        public const string SiteTrendSort = "SiteTrendSort";
        public const string StaffLanguage = "StaffLanguage";
        public const string StaffSort = "StaffSort";
        public const string StudioSort = "StudioSort";
        public const string SubmissionSort = "SubmissionSort";
        public const string SubmissionStatus = "SubmissionStatus";
        public const string ThreadCommentSort = "ThreadCommentSort";
        public const string ThreadSort = "ThreadSort";
        public const string UserSort = "UserSort";
        public const string UserStaffNameLanguage = "UserStaffNameLanguage";
        public const string UserStatisticsSort = "UserStatisticsSort";
        public const string UserTitleLanguage = "UserTitleLanguage";

        public const string ActivityLikeNotification = "ActivityLikeNotification";
        public const string ActivityMentionNotification = "ActivityMentionNotification";
        public const string ActivityMessageNotification = "ActivityMessageNotification";
        public const string ActivityReply = "ActivityReply";
        public const string ActivityReplyLikeNotification = "ActivityReplyLikeNotification";
        public const string ActivityReplyNotification = "ActivityReplyNotification";
        public const string ActivityReplySubscribedNotification = "ActivityReplySubscribedNotification";
        public const string AiringNotification = "AiringNotification";
        public const string AiringProgression = "AiringProgression";
        public const string AiringSchedule = "AiringSchedule";
        public const string AiringScheduleConnection = "AiringScheduleConnection";
        public const string AiringScheduleEdge = "AiringScheduleEdge";
        public const string AniChartUser = "AniChartUser";
        public const string Character = "Character";
        public const string CharacterConnection = "CharacterConnection";
        public const string CharacterEdge = "CharacterEdge";
        public const string CharacterImage = "CharacterImage";
        public const string CharacterName = "CharacterName";
        public const string CharacterSubmission = "CharacterSubmission";
        public const string CharacterSubmissionConnection = "CharacterSubmissionConnection";
        public const string CharacterSubmissionEdge = "CharacterSubmissionEdge";
        public const string Deleted = "Deleted";
        public const string Favourites = "Favourites";
        public const string FollowingNotification = "FollowingNotification";
        public const string FormatStats = "FormatStats";
        public const string FuzzyDate = "FuzzyDate";
        public const string GenreStats = "GenreStats";
        public const string InternalPage = "InternalPage";
        public const string ListActivity = "ListActivity";
        public const string ListScoreStats = "ListScoreStats";
        public const string Media = "Media";
        public const string MediaCharacter = "MediaCharacter";
        public const string MediaConnection = "MediaConnection";
        public const string MediaCoverImage = "MediaCoverImage";
        public const string MediaEdge = "MediaEdge";
        public const string MediaExternalLink = "MediaExternalLink";
        public const string MediaList = "MediaList";
        public const string MediaListCollection = "MediaListCollection";
        public const string MediaListGroup = "MediaListGroup";
        public const string MediaListOptions = "MediaListOptions";
        public const string MediaListTypeOptions = "MediaListTypeOptions";
        public const string MediaRank = "MediaRank";
        public const string MediaStats = "MediaStats";
        public const string MediaStreamingEpisode = "MediaStreamingEpisode";
        public const string MediaSubmission = "MediaSubmission";
        public const string MediaSubmissionComparison = "MediaSubmissionComparison";
        public const string MediaSubmissionEdge = "MediaSubmissionEdge";
        public const string MediaTag = "MediaTag";
        public const string MediaTitle = "MediaTitle";
        public const string MediaTrailer = "MediaTrailer";
        public const string MediaTrend = "MediaTrend";
        public const string MediaTrendConnection = "MediaTrendConnection";
        public const string MediaTrendEdge = "MediaTrendEdge";
        public const string MessageActivity = "MessageActivity";
        public const string ModAction = "ModAction";
        public const string Mutation = "Mutation";
        public const string NotificationOption = "NotificationOption";
        public const string Page = "Page";
        public const string PageInfo = "PageInfo";
        public const string ParsedMarkdown = "ParsedMarkdown";
        public const string Query = "Query";
        public const string Recommendation = "Recommendation";
        public const string RecommendationConnection = "RecommendationConnection";
        public const string RecommendationEdge = "RecommendationEdge";
        public const string RelatedMediaAdditionNotification = "RelatedMediaAdditionNotification";
        public const string Report = "Report";
        public const string Review = "Review";
        public const string ReviewConnection = "ReviewConnection";
        public const string ReviewEdge = "ReviewEdge";
        public const string RevisionHistory = "RevisionHistory";
        public const string ScoreDistribution = "ScoreDistribution";
        public const string SiteStatistics = "SiteStatistics";
        public const string SiteTrend = "SiteTrend";
        public const string SiteTrendConnection = "SiteTrendConnection";
        public const string SiteTrendEdge = "SiteTrendEdge";
        public const string Staff = "Staff";
        public const string StaffConnection = "StaffConnection";
        public const string StaffEdge = "StaffEdge";
        public const string StaffImage = "StaffImage";
        public const string StaffName = "StaffName";
        public const string StaffRoleType = "StaffRoleType";
        public const string StaffStats = "StaffStats";
        public const string StaffSubmission = "StaffSubmission";
        public const string StatusDistribution = "StatusDistribution";
        public const string Studio = "Studio";
        public const string StudioConnection = "StudioConnection";
        public const string StudioEdge = "StudioEdge";
        public const string StudioStats = "StudioStats";
        public const string TagStats = "TagStats";
        public const string TextActivity = "TextActivity";
        public const string Thread = "Thread";
        public const string ThreadCategory = "ThreadCategory";
        public const string ThreadComment = "ThreadComment";
        public const string ThreadCommentLikeNotification = "ThreadCommentLikeNotification";
        public const string ThreadCommentMentionNotification = "ThreadCommentMentionNotification";
        public const string ThreadCommentReplyNotification = "ThreadCommentReplyNotification";
        public const string ThreadCommentSubscribedNotification = "ThreadCommentSubscribedNotification";
        public const string ThreadLikeNotification = "ThreadLikeNotification";
        public const string User = "User";
        public const string UserActivityHistory = "UserActivityHistory";
        public const string UserAvatar = "UserAvatar";
        public const string UserCountryStatistic = "UserCountryStatistic";
        public const string UserFormatStatistic = "UserFormatStatistic";
        public const string UserGenreStatistic = "UserGenreStatistic";
        public const string UserLengthStatistic = "UserLengthStatistic";
        public const string UserModData = "UserModData";
        public const string UserOptions = "UserOptions";
        public const string UserPreviousName = "UserPreviousName";
        public const string UserReleaseYearStatistic = "UserReleaseYearStatistic";
        public const string UserScoreStatistic = "UserScoreStatistic";
        public const string UserStaffStatistic = "UserStaffStatistic";
        public const string UserStartYearStatistic = "UserStartYearStatistic";
        public const string UserStatistics = "UserStatistics";
        public const string UserStatisticTypes = "UserStatisticTypes";
        public const string UserStats = "UserStats";
        public const string UserStatusStatistic = "UserStatusStatistic";
        public const string UserStudioStatistic = "UserStudioStatistic";
        public const string UserTagStatistic = "UserTagStatistic";
        public const string UserVoiceActorStatistic = "UserVoiceActorStatistic";
        public const string YearStats = "YearStats";

        public const string AiringScheduleInput = "AiringScheduleInput";
        public const string AniChartHighlightInput = "AniChartHighlightInput";
        public const string CharacterNameInput = "CharacterNameInput";
        public const string FuzzyDateInput = "FuzzyDateInput";
        public const string MediaExternalLinkInput = "MediaExternalLinkInput";
        public const string MediaListOptionsInput = "MediaListOptionsInput";
        public const string MediaTitleInput = "MediaTitleInput";
        public const string NotificationOptionInput = "NotificationOptionInput";
        public const string StaffNameInput = "StaffNameInput";

        public const string ActivityUnion = "ActivityUnion";
        public const string LikeableUnion = "LikeableUnion";
        public const string NotificationUnion = "NotificationUnion";

        public static readonly IReadOnlyDictionary<Type, string> ReverseMapping =
            new Dictionary<Type, string>
            {
                { typeof(int), "Int" },
                { typeof(string), "String" },
                { typeof(bool), "Boolean" },
                { typeof(decimal), "Float" },
                { typeof(AiringScheduleInput), "AiringScheduleInput" },
                { typeof(AniChartHighlightInput), "AniChartHighlightInput" },
                { typeof(CharacterNameInput), "CharacterNameInput" },
                { typeof(FuzzyDateInput), "FuzzyDateInput" },
                { typeof(MediaExternalLinkInput), "MediaExternalLinkInput" },
                { typeof(MediaListOptionsInput), "MediaListOptionsInput" },
                { typeof(MediaTitleInput), "MediaTitleInput" },
                { typeof(NotificationOptionInput), "NotificationOptionInput" },
                { typeof(StaffNameInput), "StaffNameInput" }
            };
}
    #endregion

    #region enums
    public enum UserSort
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "ID_DESC")] IdDesc,
        [EnumMember(Value = "USERNAME")] Username,
        [EnumMember(Value = "USERNAME_DESC")] UsernameDesc,
        [EnumMember(Value = "WATCHED_TIME")] WatchedTime,
        [EnumMember(Value = "WATCHED_TIME_DESC")] WatchedTimeDesc,
        [EnumMember(Value = "CHAPTERS_READ")] ChaptersRead,
        [EnumMember(Value = "CHAPTERS_READ_DESC")] ChaptersReadDesc,
        [EnumMember(Value = "SEARCH_MATCH")] SearchMatch
    }

    public enum UserTitleLanguage
    {
        [EnumMember(Value = "ROMAJI")] Romaji,
        [EnumMember(Value = "ENGLISH")] English,
        [EnumMember(Value = "NATIVE")] Native,
        [EnumMember(Value = "ROMAJI_STYLISED")] RomajiStylised,
        [EnumMember(Value = "ENGLISH_STYLISED")] EnglishStylised,
        [EnumMember(Value = "NATIVE_STYLISED")] NativeStylised
    }

    public enum NotificationType
    {
        [EnumMember(Value = "ACTIVITY_MESSAGE")] ActivityMessage,
        [EnumMember(Value = "ACTIVITY_REPLY")] ActivityReply,
        [EnumMember(Value = "FOLLOWING")] Following,
        [EnumMember(Value = "ACTIVITY_MENTION")] ActivityMention,
        [EnumMember(Value = "THREAD_COMMENT_MENTION")] ThreadCommentMention,
        [EnumMember(Value = "THREAD_SUBSCRIBED")] ThreadSubscribed,
        [EnumMember(Value = "THREAD_COMMENT_REPLY")] ThreadCommentReply,
        [EnumMember(Value = "AIRING")] Airing,
        [EnumMember(Value = "ACTIVITY_LIKE")] ActivityLike,
        [EnumMember(Value = "ACTIVITY_REPLY_LIKE")] ActivityReplyLike,
        [EnumMember(Value = "THREAD_LIKE")] ThreadLike,
        [EnumMember(Value = "THREAD_COMMENT_LIKE")] ThreadCommentLike,
        [EnumMember(Value = "ACTIVITY_REPLY_SUBSCRIBED")] ActivityReplySubscribed,
        [EnumMember(Value = "RELATED_MEDIA_ADDITION")] RelatedMediaAddition
    }

    public enum UserStaffNameLanguage
    {
        [EnumMember(Value = "ROMAJI_WESTERN")] RomajiWestern,
        [EnumMember(Value = "ROMAJI")] Romaji,
        [EnumMember(Value = "NATIVE")] Native
    }

    public enum ScoreFormat
    {
        [EnumMember(Value = "POINT_100")] Point100,
        [EnumMember(Value = "POINT_10_DECIMAL")] Point10Decimal,
        [EnumMember(Value = "POINT_10")] Point10,
        [EnumMember(Value = "POINT_5")] Point5,
        [EnumMember(Value = "POINT_3")] Point3
    }

    public enum MediaType
    {
        [EnumMember(Value = "ANIME")] Anime,
        [EnumMember(Value = "MANGA")] Manga
    }

    public enum MediaFormat
    {
        [EnumMember(Value = "TV")] Tv,
        [EnumMember(Value = "TV_SHORT")] TvShort,
        [EnumMember(Value = "MOVIE")] Movie,
        [EnumMember(Value = "SPECIAL")] Special,
        [EnumMember(Value = "OVA")] Ova,
        [EnumMember(Value = "ONA")] Ona,
        [EnumMember(Value = "MUSIC")] Music,
        [EnumMember(Value = "MANGA")] Manga,
        [EnumMember(Value = "NOVEL")] Novel,
        [EnumMember(Value = "ONE_SHOT")] OneShot
    }

    public enum MediaStatus
    {
        [EnumMember(Value = "FINISHED")] Finished,
        [EnumMember(Value = "RELEASING")] Releasing,
        [EnumMember(Value = "NOT_YET_RELEASED")] NotYetReleased,
        [EnumMember(Value = "CANCELLED")] Cancelled,
        [EnumMember(Value = "HIATUS")] Hiatus
    }

    public enum MediaSeason
    {
        [EnumMember(Value = "WINTER")] Winter,
        [EnumMember(Value = "SPRING")] Spring,
        [EnumMember(Value = "SUMMER")] Summer,
        [EnumMember(Value = "FALL")] Fall
    }

    public enum MediaSource
    {
        [EnumMember(Value = "ORIGINAL")] Original,
        [EnumMember(Value = "MANGA")] Manga,
        [EnumMember(Value = "LIGHT_NOVEL")] LightNovel,
        [EnumMember(Value = "VISUAL_NOVEL")] VisualNovel,
        [EnumMember(Value = "VIDEO_GAME")] VideoGame,
        [EnumMember(Value = "OTHER")] Other,
        [EnumMember(Value = "NOVEL")] Novel,
        [EnumMember(Value = "DOUJINSHI")] Doujinshi,
        [EnumMember(Value = "ANIME")] Anime
    }

    public enum CharacterSort
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "ID_DESC")] IdDesc,
        [EnumMember(Value = "ROLE")] Role,
        [EnumMember(Value = "ROLE_DESC")] RoleDesc,
        [EnumMember(Value = "SEARCH_MATCH")] SearchMatch,
        [EnumMember(Value = "FAVOURITES")] Favourites,
        [EnumMember(Value = "FAVOURITES_DESC")] FavouritesDesc,
        [EnumMember(Value = "RELEVANCE")] Relevance
    }

    public enum CharacterRole
    {
        [EnumMember(Value = "MAIN")] Main,
        [EnumMember(Value = "SUPPORTING")] Supporting,
        [EnumMember(Value = "BACKGROUND")] Background
    }

    public enum MediaSort
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "ID_DESC")] IdDesc,
        [EnumMember(Value = "TITLE_ROMAJI")] TitleRomaji,
        [EnumMember(Value = "TITLE_ROMAJI_DESC")] TitleRomajiDesc,
        [EnumMember(Value = "TITLE_ENGLISH")] TitleEnglish,
        [EnumMember(Value = "TITLE_ENGLISH_DESC")] TitleEnglishDesc,
        [EnumMember(Value = "TITLE_NATIVE")] TitleNative,
        [EnumMember(Value = "TITLE_NATIVE_DESC")] TitleNativeDesc,
        [EnumMember(Value = "TYPE")] Type,
        [EnumMember(Value = "TYPE_DESC")] TypeDesc,
        [EnumMember(Value = "FORMAT")] Format,
        [EnumMember(Value = "FORMAT_DESC")] FormatDesc,
        [EnumMember(Value = "START_DATE")] StartDate,
        [EnumMember(Value = "START_DATE_DESC")] StartDateDesc,
        [EnumMember(Value = "END_DATE")] EndDate,
        [EnumMember(Value = "END_DATE_DESC")] EndDateDesc,
        [EnumMember(Value = "SCORE")] Score,
        [EnumMember(Value = "SCORE_DESC")] ScoreDesc,
        [EnumMember(Value = "POPULARITY")] Popularity,
        [EnumMember(Value = "POPULARITY_DESC")] PopularityDesc,
        [EnumMember(Value = "TRENDING")] Trending,
        [EnumMember(Value = "TRENDING_DESC")] TrendingDesc,
        [EnumMember(Value = "EPISODES")] Episodes,
        [EnumMember(Value = "EPISODES_DESC")] EpisodesDesc,
        [EnumMember(Value = "DURATION")] Duration,
        [EnumMember(Value = "DURATION_DESC")] DurationDesc,
        [EnumMember(Value = "STATUS")] Status,
        [EnumMember(Value = "STATUS_DESC")] StatusDesc,
        [EnumMember(Value = "CHAPTERS")] Chapters,
        [EnumMember(Value = "CHAPTERS_DESC")] ChaptersDesc,
        [EnumMember(Value = "VOLUMES")] Volumes,
        [EnumMember(Value = "VOLUMES_DESC")] VolumesDesc,
        [EnumMember(Value = "UPDATED_AT")] UpdatedAt,
        [EnumMember(Value = "UPDATED_AT_DESC")] UpdatedAtDesc,
        [EnumMember(Value = "SEARCH_MATCH")] SearchMatch,
        [EnumMember(Value = "FAVOURITES")] Favourites,
        [EnumMember(Value = "FAVOURITES_DESC")] FavouritesDesc
    }

    public enum StaffLanguage
    {
        [EnumMember(Value = "JAPANESE")] Japanese,
        [EnumMember(Value = "ENGLISH")] English,
        [EnumMember(Value = "KOREAN")] Korean,
        [EnumMember(Value = "ITALIAN")] Italian,
        [EnumMember(Value = "SPANISH")] Spanish,
        [EnumMember(Value = "PORTUGUESE")] Portuguese,
        [EnumMember(Value = "FRENCH")] French,
        [EnumMember(Value = "GERMAN")] German,
        [EnumMember(Value = "HEBREW")] Hebrew,
        [EnumMember(Value = "HUNGARIAN")] Hungarian
    }

    public enum StaffSort
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "ID_DESC")] IdDesc,
        [EnumMember(Value = "ROLE")] Role,
        [EnumMember(Value = "ROLE_DESC")] RoleDesc,
        [EnumMember(Value = "LANGUAGE")] Language,
        [EnumMember(Value = "LANGUAGE_DESC")] LanguageDesc,
        [EnumMember(Value = "SEARCH_MATCH")] SearchMatch,
        [EnumMember(Value = "FAVOURITES")] Favourites,
        [EnumMember(Value = "FAVOURITES_DESC")] FavouritesDesc,
        [EnumMember(Value = "RELEVANCE")] Relevance
    }

    public enum StudioSort
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "ID_DESC")] IdDesc,
        [EnumMember(Value = "NAME")] Name,
        [EnumMember(Value = "NAME_DESC")] NameDesc,
        [EnumMember(Value = "SEARCH_MATCH")] SearchMatch,
        [EnumMember(Value = "FAVOURITES")] Favourites,
        [EnumMember(Value = "FAVOURITES_DESC")] FavouritesDesc
    }

    public enum MediaTrendSort
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "ID_DESC")] IdDesc,
        [EnumMember(Value = "MEDIA_ID")] MediaId,
        [EnumMember(Value = "MEDIA_ID_DESC")] MediaIdDesc,
        [EnumMember(Value = "DATE")] Date,
        [EnumMember(Value = "DATE_DESC")] DateDesc,
        [EnumMember(Value = "SCORE")] Score,
        [EnumMember(Value = "SCORE_DESC")] ScoreDesc,
        [EnumMember(Value = "POPULARITY")] Popularity,
        [EnumMember(Value = "POPULARITY_DESC")] PopularityDesc,
        [EnumMember(Value = "TRENDING")] Trending,
        [EnumMember(Value = "TRENDING_DESC")] TrendingDesc,
        [EnumMember(Value = "EPISODE")] Episode,
        [EnumMember(Value = "EPISODE_DESC")] EpisodeDesc
    }

    public enum MediaRankType
    {
        [EnumMember(Value = "RATED")] Rated,
        [EnumMember(Value = "POPULAR")] Popular
    }

    public enum MediaListStatus
    {
        [EnumMember(Value = "CURRENT")] Current,
        [EnumMember(Value = "PLANNING")] Planning,
        [EnumMember(Value = "COMPLETED")] Completed,
        [EnumMember(Value = "DROPPED")] Dropped,
        [EnumMember(Value = "PAUSED")] Paused,
        [EnumMember(Value = "REPEATING")] Repeating
    }

    public enum ReviewSort
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "ID_DESC")] IdDesc,
        [EnumMember(Value = "SCORE")] Score,
        [EnumMember(Value = "SCORE_DESC")] ScoreDesc,
        [EnumMember(Value = "RATING")] Rating,
        [EnumMember(Value = "RATING_DESC")] RatingDesc,
        [EnumMember(Value = "CREATED_AT")] CreatedAt,
        [EnumMember(Value = "CREATED_AT_DESC")] CreatedAtDesc,
        [EnumMember(Value = "UPDATED_AT")] UpdatedAt,
        [EnumMember(Value = "UPDATED_AT_DESC")] UpdatedAtDesc
    }

    public enum ReviewRating
    {
        [EnumMember(Value = "NO_VOTE")] NoVote,
        [EnumMember(Value = "UP_VOTE")] UpVote,
        [EnumMember(Value = "DOWN_VOTE")] DownVote
    }

    public enum RecommendationSort
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "ID_DESC")] IdDesc,
        [EnumMember(Value = "RATING")] Rating,
        [EnumMember(Value = "RATING_DESC")] RatingDesc
    }

    public enum RecommendationRating
    {
        [EnumMember(Value = "NO_RATING")] NoRating,
        [EnumMember(Value = "RATE_UP")] RateUp,
        [EnumMember(Value = "RATE_DOWN")] RateDown
    }

    public enum MediaRelation
    {
        [EnumMember(Value = "ADAPTATION")] Adaptation,
        [EnumMember(Value = "PREQUEL")] Prequel,
        [EnumMember(Value = "SEQUEL")] Sequel,
        [EnumMember(Value = "PARENT")] Parent,
        [EnumMember(Value = "SIDE_STORY")] SideStory,
        [EnumMember(Value = "CHARACTER")] Character,
        [EnumMember(Value = "SUMMARY")] Summary,
        [EnumMember(Value = "ALTERNATIVE")] Alternative,
        [EnumMember(Value = "SPIN_OFF")] SpinOff,
        [EnumMember(Value = "OTHER")] Other,
        [EnumMember(Value = "SOURCE")] Source,
        [EnumMember(Value = "COMPILATION")] Compilation,
        [EnumMember(Value = "CONTAINS")] Contains
    }

    public enum UserStatisticsSort
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "ID_DESC")] IdDesc,
        [EnumMember(Value = "COUNT")] Count,
        [EnumMember(Value = "COUNT_DESC")] CountDesc,
        [EnumMember(Value = "PROGRESS")] Progress,
        [EnumMember(Value = "PROGRESS_DESC")] ProgressDesc,
        [EnumMember(Value = "MEAN_SCORE")] MeanScore,
        [EnumMember(Value = "MEAN_SCORE_DESC")] MeanScoreDesc
    }

    public enum ModRole
    {
        [EnumMember(Value = "ADMIN")] Admin,
        [EnumMember(Value = "LEAD_DEVELOPER")] LeadDeveloper,
        [EnumMember(Value = "DEVELOPER")] Developer,
        [EnumMember(Value = "LEAD_COMMUNITY")] LeadCommunity,
        [EnumMember(Value = "COMMUNITY")] Community,
        [EnumMember(Value = "DISCORD_COMMUNITY")] DiscordCommunity,
        [EnumMember(Value = "LEAD_ANIME_DATA")] LeadAnimeData,
        [EnumMember(Value = "ANIME_DATA")] AnimeData,
        [EnumMember(Value = "LEAD_MANGA_DATA")] LeadMangaData,
        [EnumMember(Value = "MANGA_DATA")] MangaData,
        [EnumMember(Value = "LEAD_SOCIAL_MEDIA")] LeadSocialMedia,
        [EnumMember(Value = "SOCIAL_MEDIA")] SocialMedia,
        [EnumMember(Value = "RETIRED")] Retired
    }

    public enum MediaListSort
    {
        [EnumMember(Value = "MEDIA_ID")] MediaId,
        [EnumMember(Value = "MEDIA_ID_DESC")] MediaIdDesc,
        [EnumMember(Value = "SCORE")] Score,
        [EnumMember(Value = "SCORE_DESC")] ScoreDesc,
        [EnumMember(Value = "STATUS")] Status,
        [EnumMember(Value = "STATUS_DESC")] StatusDesc,
        [EnumMember(Value = "PROGRESS")] Progress,
        [EnumMember(Value = "PROGRESS_DESC")] ProgressDesc,
        [EnumMember(Value = "PROGRESS_VOLUMES")] ProgressVolumes,
        [EnumMember(Value = "PROGRESS_VOLUMES_DESC")] ProgressVolumesDesc,
        [EnumMember(Value = "REPEAT")] Repeat,
        [EnumMember(Value = "REPEAT_DESC")] RepeatDesc,
        [EnumMember(Value = "PRIORITY")] Priority,
        [EnumMember(Value = "PRIORITY_DESC")] PriorityDesc,
        [EnumMember(Value = "STARTED_ON")] StartedOn,
        [EnumMember(Value = "STARTED_ON_DESC")] StartedOnDesc,
        [EnumMember(Value = "FINISHED_ON")] FinishedOn,
        [EnumMember(Value = "FINISHED_ON_DESC")] FinishedOnDesc,
        [EnumMember(Value = "ADDED_TIME")] AddedTime,
        [EnumMember(Value = "ADDED_TIME_DESC")] AddedTimeDesc,
        [EnumMember(Value = "UPDATED_TIME")] UpdatedTime,
        [EnumMember(Value = "UPDATED_TIME_DESC")] UpdatedTimeDesc,
        [EnumMember(Value = "MEDIA_TITLE_ROMAJI")] MediaTitleRomaji,
        [EnumMember(Value = "MEDIA_TITLE_ROMAJI_DESC")] MediaTitleRomajiDesc,
        [EnumMember(Value = "MEDIA_TITLE_ENGLISH")] MediaTitleEnglish,
        [EnumMember(Value = "MEDIA_TITLE_ENGLISH_DESC")] MediaTitleEnglishDesc,
        [EnumMember(Value = "MEDIA_TITLE_NATIVE")] MediaTitleNative,
        [EnumMember(Value = "MEDIA_TITLE_NATIVE_DESC")] MediaTitleNativeDesc,
        [EnumMember(Value = "MEDIA_POPULARITY")] MediaPopularity,
        [EnumMember(Value = "MEDIA_POPULARITY_DESC")] MediaPopularityDesc
    }

    public enum AiringSort
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "ID_DESC")] IdDesc,
        [EnumMember(Value = "MEDIA_ID")] MediaId,
        [EnumMember(Value = "MEDIA_ID_DESC")] MediaIdDesc,
        [EnumMember(Value = "TIME")] Time,
        [EnumMember(Value = "TIME_DESC")] TimeDesc,
        [EnumMember(Value = "EPISODE")] Episode,
        [EnumMember(Value = "EPISODE_DESC")] EpisodeDesc
    }

    public enum ActivityType
    {
        [EnumMember(Value = "TEXT")] Text,
        [EnumMember(Value = "ANIME_LIST")] AnimeList,
        [EnumMember(Value = "MANGA_LIST")] MangaList,
        [EnumMember(Value = "MESSAGE")] Message,
        [EnumMember(Value = "MEDIA_LIST")] MediaList
    }

    public enum ActivitySort
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "ID_DESC")] IdDesc
    }

    public enum ThreadSort
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "ID_DESC")] IdDesc,
        [EnumMember(Value = "TITLE")] Title,
        [EnumMember(Value = "TITLE_DESC")] TitleDesc,
        [EnumMember(Value = "CREATED_AT")] CreatedAt,
        [EnumMember(Value = "CREATED_AT_DESC")] CreatedAtDesc,
        [EnumMember(Value = "UPDATED_AT")] UpdatedAt,
        [EnumMember(Value = "UPDATED_AT_DESC")] UpdatedAtDesc,
        [EnumMember(Value = "REPLIED_AT")] RepliedAt,
        [EnumMember(Value = "REPLIED_AT_DESC")] RepliedAtDesc,
        [EnumMember(Value = "REPLY_COUNT")] ReplyCount,
        [EnumMember(Value = "REPLY_COUNT_DESC")] ReplyCountDesc,
        [EnumMember(Value = "VIEW_COUNT")] ViewCount,
        [EnumMember(Value = "VIEW_COUNT_DESC")] ViewCountDesc,
        [EnumMember(Value = "IS_STICKY")] IsSticky,
        [EnumMember(Value = "SEARCH_MATCH")] SearchMatch
    }

    public enum ThreadCommentSort
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "ID_DESC")] IdDesc
    }

    public enum LikeableType
    {
        [EnumMember(Value = "THREAD")] Thread,
        [EnumMember(Value = "THREAD_COMMENT")] ThreadComment,
        [EnumMember(Value = "ACTIVITY")] Activity,
        [EnumMember(Value = "ACTIVITY_REPLY")] ActivityReply
    }

    public enum SiteTrendSort
    {
        [EnumMember(Value = "DATE")] Date,
        [EnumMember(Value = "DATE_DESC")] DateDesc,
        [EnumMember(Value = "COUNT")] Count,
        [EnumMember(Value = "COUNT_DESC")] CountDesc,
        [EnumMember(Value = "CHANGE")] Change,
        [EnumMember(Value = "CHANGE_DESC")] ChangeDesc
    }

    public enum SubmissionStatus
    {
        [EnumMember(Value = "PENDING")] Pending,
        [EnumMember(Value = "REJECTED")] Rejected,
        [EnumMember(Value = "PARTIALLY_ACCEPTED")] PartiallyAccepted,
        [EnumMember(Value = "ACCEPTED")] Accepted
    }

    public enum SubmissionSort
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "ID_DESC")] IdDesc
    }

    public enum RevisionHistoryAction
    {
        [EnumMember(Value = "CREATE")] Create,
        [EnumMember(Value = "EDIT")] Edit
    }

    public enum ModActionType
    {
        [EnumMember(Value = "NOTE")] Note,
        [EnumMember(Value = "BAN")] Ban,
        [EnumMember(Value = "DELETE")] Delete,
        [EnumMember(Value = "EDIT")] Edit,
        [EnumMember(Value = "EXPIRE")] Expire,
        [EnumMember(Value = "REPORT")] Report,
        [EnumMember(Value = "RESET")] Reset,
        [EnumMember(Value = "ANON")] Anon
    }
    #endregion

    #region directives
    public class IncludeDirective : GraphQlDirective
    {
        public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
        {
            AddArgument("if", @if);
        }
    }

    public class SkipDirective : GraphQlDirective
    {
        public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
        {
            AddArgument("if", @if);
        }
    }
    #endregion

    #region builder classes
    public class QueryQueryBuilder : GraphQlQueryBuilder<QueryQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "Page", IsComplex = true, QueryBuilderType = typeof(PageQueryBuilder) },
                new FieldMetadata { Name = "Media", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) },
                new FieldMetadata { Name = "MediaTrend", IsComplex = true, QueryBuilderType = typeof(MediaTrendQueryBuilder) },
                new FieldMetadata { Name = "AiringSchedule", IsComplex = true, QueryBuilderType = typeof(AiringScheduleQueryBuilder) },
                new FieldMetadata { Name = "Character", IsComplex = true, QueryBuilderType = typeof(CharacterQueryBuilder) },
                new FieldMetadata { Name = "Staff", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) },
                new FieldMetadata { Name = "MediaList", IsComplex = true, QueryBuilderType = typeof(MediaListQueryBuilder) },
                new FieldMetadata { Name = "MediaListCollection", IsComplex = true, QueryBuilderType = typeof(MediaListCollectionQueryBuilder) },
                new FieldMetadata { Name = "GenreCollection", IsComplex = true },
                new FieldMetadata { Name = "MediaTagCollection", IsComplex = true, QueryBuilderType = typeof(MediaTagQueryBuilder) },
                new FieldMetadata { Name = "User", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "Viewer", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "Notification", IsComplex = true, QueryBuilderType = typeof(NotificationUnionQueryBuilder) },
                new FieldMetadata { Name = "Studio", IsComplex = true, QueryBuilderType = typeof(StudioQueryBuilder) },
                new FieldMetadata { Name = "Review", IsComplex = true, QueryBuilderType = typeof(ReviewQueryBuilder) },
                new FieldMetadata { Name = "Activity", IsComplex = true, QueryBuilderType = typeof(ActivityUnionQueryBuilder) },
                new FieldMetadata { Name = "ActivityReply", IsComplex = true, QueryBuilderType = typeof(ActivityReplyQueryBuilder) },
                new FieldMetadata { Name = "Following", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "Follower", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "Thread", IsComplex = true, QueryBuilderType = typeof(ThreadQueryBuilder) },
                new FieldMetadata { Name = "ThreadComment", IsComplex = true, QueryBuilderType = typeof(ThreadCommentQueryBuilder) },
                new FieldMetadata { Name = "Recommendation", IsComplex = true, QueryBuilderType = typeof(RecommendationQueryBuilder) },
                new FieldMetadata { Name = "Like", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "Markdown", IsComplex = true, QueryBuilderType = typeof(ParsedMarkdownQueryBuilder) },
                new FieldMetadata { Name = "AniChartUser", IsComplex = true, QueryBuilderType = typeof(AniChartUserQueryBuilder) },
                new FieldMetadata { Name = "SiteStatistics", IsComplex = true, QueryBuilderType = typeof(SiteStatisticsQueryBuilder) },
                new FieldMetadata { Name = "MediaTagUser", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "Query"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public QueryQueryBuilder(string operationName = null) : base("query", operationName)
        {
        }

        public QueryQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public QueryQueryBuilder WithPage(PageQueryBuilder pageQueryBuilder, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("Page", alias, pageQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptPage()
        {
            return ExceptField("Page");
        }

        public QueryQueryBuilder WithMedia(MediaQueryBuilder mediaQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> idMal = null, QueryBuilderParameter<object> startDate = null, QueryBuilderParameter<object> endDate = null, QueryBuilderParameter<MediaSeason?> season = null, QueryBuilderParameter<int?> seasonYear = null, QueryBuilderParameter<MediaType?> type = null, QueryBuilderParameter<MediaFormat?> format = null, QueryBuilderParameter<MediaStatus?> status = null, QueryBuilderParameter<int?> episodes = null, QueryBuilderParameter<int?> duration = null, QueryBuilderParameter<int?> chapters = null, QueryBuilderParameter<int?> volumes = null, QueryBuilderParameter<bool?> isAdult = null, QueryBuilderParameter<string> genre = null, QueryBuilderParameter<string> tag = null, QueryBuilderParameter<int?> minimumTagRank = null, QueryBuilderParameter<string> tagCategory = null, QueryBuilderParameter<bool?> onList = null, QueryBuilderParameter<string> licensedBy = null, QueryBuilderParameter<int?> averageScore = null, QueryBuilderParameter<int?> popularity = null, QueryBuilderParameter<MediaSource?> source = null, QueryBuilderParameter<object> countryOfOrigin = null, QueryBuilderParameter<string> search = null, QueryBuilderParameter<int?> idNot = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<int?>> idNotIn = null, QueryBuilderParameter<int?> idMalNot = null, QueryBuilderParameter<IEnumerable<int?>> idMalIn = null, QueryBuilderParameter<IEnumerable<int?>> idMalNotIn = null, QueryBuilderParameter<object> startDateGreater = null, QueryBuilderParameter<object> startDateLesser = null, QueryBuilderParameter<string> startDateLike = null, QueryBuilderParameter<object> endDateGreater = null, QueryBuilderParameter<object> endDateLesser = null, QueryBuilderParameter<string> endDateLike = null, QueryBuilderParameter<IEnumerable<MediaFormat?>> formatIn = null, QueryBuilderParameter<MediaFormat?> formatNot = null, QueryBuilderParameter<IEnumerable<MediaFormat?>> formatNotIn = null, QueryBuilderParameter<IEnumerable<MediaStatus?>> statusIn = null, QueryBuilderParameter<MediaStatus?> statusNot = null, QueryBuilderParameter<IEnumerable<MediaStatus?>> statusNotIn = null, QueryBuilderParameter<int?> episodesGreater = null, QueryBuilderParameter<int?> episodesLesser = null, QueryBuilderParameter<int?> durationGreater = null, QueryBuilderParameter<int?> durationLesser = null, QueryBuilderParameter<int?> chaptersGreater = null, QueryBuilderParameter<int?> chaptersLesser = null, QueryBuilderParameter<int?> volumesGreater = null, QueryBuilderParameter<int?> volumesLesser = null, QueryBuilderParameter<IEnumerable<string>> genreIn = null, QueryBuilderParameter<IEnumerable<string>> genreNotIn = null, QueryBuilderParameter<IEnumerable<string>> tagIn = null, QueryBuilderParameter<IEnumerable<string>> tagNotIn = null, QueryBuilderParameter<IEnumerable<string>> tagCategoryIn = null, QueryBuilderParameter<IEnumerable<string>> tagCategoryNotIn = null, QueryBuilderParameter<IEnumerable<string>> licensedByIn = null, QueryBuilderParameter<int?> averageScoreNot = null, QueryBuilderParameter<int?> averageScoreGreater = null, QueryBuilderParameter<int?> averageScoreLesser = null, QueryBuilderParameter<int?> popularityNot = null, QueryBuilderParameter<int?> popularityGreater = null, QueryBuilderParameter<int?> popularityLesser = null, QueryBuilderParameter<IEnumerable<MediaSource?>> sourceIn = null, QueryBuilderParameter<IEnumerable<MediaSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (idMal != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "idMal", ArgumentValue = idMal} );

            if (startDate != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startDate", ArgumentValue = startDate} );

            if (endDate != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "endDate", ArgumentValue = endDate} );

            if (season != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "season", ArgumentValue = season} );

            if (seasonYear != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "seasonYear", ArgumentValue = seasonYear} );

            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            if (format != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "format", ArgumentValue = format} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            if (episodes != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episodes", ArgumentValue = episodes} );

            if (duration != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "duration", ArgumentValue = duration} );

            if (chapters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "chapters", ArgumentValue = chapters} );

            if (volumes != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "volumes", ArgumentValue = volumes} );

            if (isAdult != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isAdult", ArgumentValue = isAdult} );

            if (genre != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "genre", ArgumentValue = genre} );

            if (tag != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tag", ArgumentValue = tag} );

            if (minimumTagRank != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "minimumTagRank", ArgumentValue = minimumTagRank} );

            if (tagCategory != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tagCategory", ArgumentValue = tagCategory} );

            if (onList != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "onList", ArgumentValue = onList} );

            if (licensedBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "licensedBy", ArgumentValue = licensedBy} );

            if (averageScore != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore", ArgumentValue = averageScore} );

            if (popularity != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity", ArgumentValue = popularity} );

            if (source != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "source", ArgumentValue = source} );

            if (countryOfOrigin != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "countryOfOrigin", ArgumentValue = countryOfOrigin} );

            if (search != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "search", ArgumentValue = search} );

            if (idNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not", ArgumentValue = idNot} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (idNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not_in", ArgumentValue = idNotIn} );

            if (idMalNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "idMal_not", ArgumentValue = idMalNot} );

            if (idMalIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "idMal_in", ArgumentValue = idMalIn} );

            if (idMalNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "idMal_not_in", ArgumentValue = idMalNotIn} );

            if (startDateGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startDate_greater", ArgumentValue = startDateGreater} );

            if (startDateLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startDate_lesser", ArgumentValue = startDateLesser} );

            if (startDateLike != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startDate_like", ArgumentValue = startDateLike} );

            if (endDateGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "endDate_greater", ArgumentValue = endDateGreater} );

            if (endDateLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "endDate_lesser", ArgumentValue = endDateLesser} );

            if (endDateLike != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "endDate_like", ArgumentValue = endDateLike} );

            if (formatIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "format_in", ArgumentValue = formatIn} );

            if (formatNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "format_not", ArgumentValue = formatNot} );

            if (formatNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "format_not_in", ArgumentValue = formatNotIn} );

            if (statusIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_in", ArgumentValue = statusIn} );

            if (statusNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_not", ArgumentValue = statusNot} );

            if (statusNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_not_in", ArgumentValue = statusNotIn} );

            if (episodesGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episodes_greater", ArgumentValue = episodesGreater} );

            if (episodesLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episodes_lesser", ArgumentValue = episodesLesser} );

            if (durationGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "duration_greater", ArgumentValue = durationGreater} );

            if (durationLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "duration_lesser", ArgumentValue = durationLesser} );

            if (chaptersGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "chapters_greater", ArgumentValue = chaptersGreater} );

            if (chaptersLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "chapters_lesser", ArgumentValue = chaptersLesser} );

            if (volumesGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "volumes_greater", ArgumentValue = volumesGreater} );

            if (volumesLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "volumes_lesser", ArgumentValue = volumesLesser} );

            if (genreIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "genre_in", ArgumentValue = genreIn} );

            if (genreNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "genre_not_in", ArgumentValue = genreNotIn} );

            if (tagIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tag_in", ArgumentValue = tagIn} );

            if (tagNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tag_not_in", ArgumentValue = tagNotIn} );

            if (tagCategoryIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tagCategory_in", ArgumentValue = tagCategoryIn} );

            if (tagCategoryNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tagCategory_not_in", ArgumentValue = tagCategoryNotIn} );

            if (licensedByIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "licensedBy_in", ArgumentValue = licensedByIn} );

            if (averageScoreNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore_not", ArgumentValue = averageScoreNot} );

            if (averageScoreGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore_greater", ArgumentValue = averageScoreGreater} );

            if (averageScoreLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore_lesser", ArgumentValue = averageScoreLesser} );

            if (popularityNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity_not", ArgumentValue = popularityNot} );

            if (popularityGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity_greater", ArgumentValue = popularityGreater} );

            if (popularityLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity_lesser", ArgumentValue = popularityLesser} );

            if (sourceIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "source_in", ArgumentValue = sourceIn} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Media", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptMedia()
        {
            return ExceptField("Media");
        }

        public QueryQueryBuilder WithMediaTrend(MediaTrendQueryBuilder mediaTrendQueryBuilder, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<int?> date = null, QueryBuilderParameter<int?> trending = null, QueryBuilderParameter<int?> averageScore = null, QueryBuilderParameter<int?> popularity = null, QueryBuilderParameter<int?> episode = null, QueryBuilderParameter<bool?> releasing = null, QueryBuilderParameter<int?> mediaIdNot = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdIn = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdNotIn = null, QueryBuilderParameter<int?> dateGreater = null, QueryBuilderParameter<int?> dateLesser = null, QueryBuilderParameter<int?> trendingGreater = null, QueryBuilderParameter<int?> trendingLesser = null, QueryBuilderParameter<int?> trendingNot = null, QueryBuilderParameter<int?> averageScoreGreater = null, QueryBuilderParameter<int?> averageScoreLesser = null, QueryBuilderParameter<int?> averageScoreNot = null, QueryBuilderParameter<int?> popularityGreater = null, QueryBuilderParameter<int?> popularityLesser = null, QueryBuilderParameter<int?> popularityNot = null, QueryBuilderParameter<int?> episodeGreater = null, QueryBuilderParameter<int?> episodeLesser = null, QueryBuilderParameter<int?> episodeNot = null, QueryBuilderParameter<IEnumerable<MediaTrendSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (date != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "date", ArgumentValue = date} );

            if (trending != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "trending", ArgumentValue = trending} );

            if (averageScore != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore", ArgumentValue = averageScore} );

            if (popularity != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity", ArgumentValue = popularity} );

            if (episode != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode", ArgumentValue = episode} );

            if (releasing != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "releasing", ArgumentValue = releasing} );

            if (mediaIdNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not", ArgumentValue = mediaIdNot} );

            if (mediaIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_in", ArgumentValue = mediaIdIn} );

            if (mediaIdNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not_in", ArgumentValue = mediaIdNotIn} );

            if (dateGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "date_greater", ArgumentValue = dateGreater} );

            if (dateLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "date_lesser", ArgumentValue = dateLesser} );

            if (trendingGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "trending_greater", ArgumentValue = trendingGreater} );

            if (trendingLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "trending_lesser", ArgumentValue = trendingLesser} );

            if (trendingNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "trending_not", ArgumentValue = trendingNot} );

            if (averageScoreGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore_greater", ArgumentValue = averageScoreGreater} );

            if (averageScoreLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore_lesser", ArgumentValue = averageScoreLesser} );

            if (averageScoreNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore_not", ArgumentValue = averageScoreNot} );

            if (popularityGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity_greater", ArgumentValue = popularityGreater} );

            if (popularityLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity_lesser", ArgumentValue = popularityLesser} );

            if (popularityNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity_not", ArgumentValue = popularityNot} );

            if (episodeGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_greater", ArgumentValue = episodeGreater} );

            if (episodeLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_lesser", ArgumentValue = episodeLesser} );

            if (episodeNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_not", ArgumentValue = episodeNot} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("MediaTrend", alias, mediaTrendQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptMediaTrend()
        {
            return ExceptField("MediaTrend");
        }

        public QueryQueryBuilder WithAiringSchedule(AiringScheduleQueryBuilder airingScheduleQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<int?> episode = null, QueryBuilderParameter<int?> airingAt = null, QueryBuilderParameter<bool?> notYetAired = null, QueryBuilderParameter<int?> idNot = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<int?>> idNotIn = null, QueryBuilderParameter<int?> mediaIdNot = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdIn = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdNotIn = null, QueryBuilderParameter<int?> episodeNot = null, QueryBuilderParameter<IEnumerable<int?>> episodeIn = null, QueryBuilderParameter<IEnumerable<int?>> episodeNotIn = null, QueryBuilderParameter<int?> episodeGreater = null, QueryBuilderParameter<int?> episodeLesser = null, QueryBuilderParameter<int?> airingAtGreater = null, QueryBuilderParameter<int?> airingAtLesser = null, QueryBuilderParameter<IEnumerable<AiringSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (episode != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode", ArgumentValue = episode} );

            if (airingAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "airingAt", ArgumentValue = airingAt} );

            if (notYetAired != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "notYetAired", ArgumentValue = notYetAired} );

            if (idNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not", ArgumentValue = idNot} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (idNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not_in", ArgumentValue = idNotIn} );

            if (mediaIdNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not", ArgumentValue = mediaIdNot} );

            if (mediaIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_in", ArgumentValue = mediaIdIn} );

            if (mediaIdNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not_in", ArgumentValue = mediaIdNotIn} );

            if (episodeNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_not", ArgumentValue = episodeNot} );

            if (episodeIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_in", ArgumentValue = episodeIn} );

            if (episodeNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_not_in", ArgumentValue = episodeNotIn} );

            if (episodeGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_greater", ArgumentValue = episodeGreater} );

            if (episodeLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_lesser", ArgumentValue = episodeLesser} );

            if (airingAtGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "airingAt_greater", ArgumentValue = airingAtGreater} );

            if (airingAtLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "airingAt_lesser", ArgumentValue = airingAtLesser} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("AiringSchedule", alias, airingScheduleQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAiringSchedule()
        {
            return ExceptField("AiringSchedule");
        }

        public QueryQueryBuilder WithCharacter(CharacterQueryBuilder characterQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<bool?> isBirthday = null, QueryBuilderParameter<string> search = null, QueryBuilderParameter<int?> idNot = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<int?>> idNotIn = null, QueryBuilderParameter<IEnumerable<CharacterSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (isBirthday != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isBirthday", ArgumentValue = isBirthday} );

            if (search != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "search", ArgumentValue = search} );

            if (idNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not", ArgumentValue = idNot} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (idNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not_in", ArgumentValue = idNotIn} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Character", alias, characterQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptCharacter()
        {
            return ExceptField("Character");
        }

        public QueryQueryBuilder WithStaff(StaffQueryBuilder staffQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<bool?> isBirthday = null, QueryBuilderParameter<string> search = null, QueryBuilderParameter<int?> idNot = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<int?>> idNotIn = null, QueryBuilderParameter<IEnumerable<StaffSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (isBirthday != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isBirthday", ArgumentValue = isBirthday} );

            if (search != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "search", ArgumentValue = search} );

            if (idNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not", ArgumentValue = idNot} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (idNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not_in", ArgumentValue = idNotIn} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Staff", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptStaff()
        {
            return ExceptField("Staff");
        }

        public QueryQueryBuilder WithMediaList(MediaListQueryBuilder mediaListQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<string> userName = null, QueryBuilderParameter<MediaType?> type = null, QueryBuilderParameter<MediaListStatus?> status = null, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<bool?> isFollowing = null, QueryBuilderParameter<string> notes = null, QueryBuilderParameter<object> startedAt = null, QueryBuilderParameter<object> completedAt = null, QueryBuilderParameter<bool?> compareWithAuthList = null, QueryBuilderParameter<IEnumerable<int?>> userIdIn = null, QueryBuilderParameter<IEnumerable<MediaListStatus?>> statusIn = null, QueryBuilderParameter<IEnumerable<MediaListStatus?>> statusNotIn = null, QueryBuilderParameter<MediaListStatus?> statusNot = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdIn = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdNotIn = null, QueryBuilderParameter<string> notesLike = null, QueryBuilderParameter<object> startedAtGreater = null, QueryBuilderParameter<object> startedAtLesser = null, QueryBuilderParameter<string> startedAtLike = null, QueryBuilderParameter<object> completedAtGreater = null, QueryBuilderParameter<object> completedAtLesser = null, QueryBuilderParameter<string> completedAtLike = null, QueryBuilderParameter<IEnumerable<MediaListSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (userName != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userName", ArgumentValue = userName} );

            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (isFollowing != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isFollowing", ArgumentValue = isFollowing} );

            if (notes != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "notes", ArgumentValue = notes} );

            if (startedAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startedAt", ArgumentValue = startedAt} );

            if (completedAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "completedAt", ArgumentValue = completedAt} );

            if (compareWithAuthList != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "compareWithAuthList", ArgumentValue = compareWithAuthList} );

            if (userIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId_in", ArgumentValue = userIdIn} );

            if (statusIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_in", ArgumentValue = statusIn} );

            if (statusNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_not_in", ArgumentValue = statusNotIn} );

            if (statusNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_not", ArgumentValue = statusNot} );

            if (mediaIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_in", ArgumentValue = mediaIdIn} );

            if (mediaIdNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not_in", ArgumentValue = mediaIdNotIn} );

            if (notesLike != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "notes_like", ArgumentValue = notesLike} );

            if (startedAtGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startedAt_greater", ArgumentValue = startedAtGreater} );

            if (startedAtLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startedAt_lesser", ArgumentValue = startedAtLesser} );

            if (startedAtLike != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startedAt_like", ArgumentValue = startedAtLike} );

            if (completedAtGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "completedAt_greater", ArgumentValue = completedAtGreater} );

            if (completedAtLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "completedAt_lesser", ArgumentValue = completedAtLesser} );

            if (completedAtLike != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "completedAt_like", ArgumentValue = completedAtLike} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("MediaList", alias, mediaListQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptMediaList()
        {
            return ExceptField("MediaList");
        }

        public QueryQueryBuilder WithMediaListCollection(MediaListCollectionQueryBuilder mediaListCollectionQueryBuilder, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<string> userName = null, QueryBuilderParameter<MediaType?> type = null, QueryBuilderParameter<MediaListStatus?> status = null, QueryBuilderParameter<string> notes = null, QueryBuilderParameter<object> startedAt = null, QueryBuilderParameter<object> completedAt = null, QueryBuilderParameter<bool?> forceSingleCompletedList = null, QueryBuilderParameter<int?> chunk = null, QueryBuilderParameter<int?> perChunk = null, QueryBuilderParameter<IEnumerable<MediaListStatus?>> statusIn = null, QueryBuilderParameter<IEnumerable<MediaListStatus?>> statusNotIn = null, QueryBuilderParameter<MediaListStatus?> statusNot = null, QueryBuilderParameter<string> notesLike = null, QueryBuilderParameter<object> startedAtGreater = null, QueryBuilderParameter<object> startedAtLesser = null, QueryBuilderParameter<string> startedAtLike = null, QueryBuilderParameter<object> completedAtGreater = null, QueryBuilderParameter<object> completedAtLesser = null, QueryBuilderParameter<string> completedAtLike = null, QueryBuilderParameter<IEnumerable<MediaListSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (userName != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userName", ArgumentValue = userName} );

            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            if (notes != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "notes", ArgumentValue = notes} );

            if (startedAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startedAt", ArgumentValue = startedAt} );

            if (completedAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "completedAt", ArgumentValue = completedAt} );

            if (forceSingleCompletedList != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "forceSingleCompletedList", ArgumentValue = forceSingleCompletedList} );

            if (chunk != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "chunk", ArgumentValue = chunk} );

            if (perChunk != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perChunk", ArgumentValue = perChunk} );

            if (statusIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_in", ArgumentValue = statusIn} );

            if (statusNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_not_in", ArgumentValue = statusNotIn} );

            if (statusNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_not", ArgumentValue = statusNot} );

            if (notesLike != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "notes_like", ArgumentValue = notesLike} );

            if (startedAtGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startedAt_greater", ArgumentValue = startedAtGreater} );

            if (startedAtLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startedAt_lesser", ArgumentValue = startedAtLesser} );

            if (startedAtLike != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startedAt_like", ArgumentValue = startedAtLike} );

            if (completedAtGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "completedAt_greater", ArgumentValue = completedAtGreater} );

            if (completedAtLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "completedAt_lesser", ArgumentValue = completedAtLesser} );

            if (completedAtLike != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "completedAt_like", ArgumentValue = completedAtLike} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("MediaListCollection", alias, mediaListCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptMediaListCollection()
        {
            return ExceptField("MediaListCollection");
        }

        public QueryQueryBuilder WithGenreCollection(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("GenreCollection", alias, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptGenreCollection()
        {
            return ExceptField("GenreCollection");
        }

        public QueryQueryBuilder WithMediaTagCollection(MediaTagQueryBuilder mediaTagQueryBuilder, QueryBuilderParameter<int?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("MediaTagCollection", alias, mediaTagQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptMediaTagCollection()
        {
            return ExceptField("MediaTagCollection");
        }

        public QueryQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<string> name = null, QueryBuilderParameter<bool?> isModerator = null, QueryBuilderParameter<string> search = null, QueryBuilderParameter<IEnumerable<UserSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (name != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );

            if (isModerator != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isModerator", ArgumentValue = isModerator} );

            if (search != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "search", ArgumentValue = search} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("User", alias, userQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptUser()
        {
            return ExceptField("User");
        }

        public QueryQueryBuilder WithViewer(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("Viewer", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptViewer()
        {
            return ExceptField("Viewer");
        }

        public QueryQueryBuilder WithNotification(NotificationUnionQueryBuilder notificationUnionQueryBuilder, QueryBuilderParameter<NotificationType?> type = null, QueryBuilderParameter<bool?> resetNotificationCount = null, QueryBuilderParameter<IEnumerable<NotificationType?>> typeIn = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            if (resetNotificationCount != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "resetNotificationCount", ArgumentValue = resetNotificationCount} );

            if (typeIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type_in", ArgumentValue = typeIn} );

            return WithObjectField("Notification", alias, notificationUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptNotification()
        {
            return ExceptField("Notification");
        }

        public QueryQueryBuilder WithStudio(StudioQueryBuilder studioQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<string> search = null, QueryBuilderParameter<int?> idNot = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<int?>> idNotIn = null, QueryBuilderParameter<IEnumerable<StudioSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (search != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "search", ArgumentValue = search} );

            if (idNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not", ArgumentValue = idNot} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (idNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not_in", ArgumentValue = idNotIn} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Studio", alias, studioQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptStudio()
        {
            return ExceptField("Studio");
        }

        public QueryQueryBuilder WithReview(ReviewQueryBuilder reviewQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<MediaType?> mediaType = null, QueryBuilderParameter<IEnumerable<ReviewSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (mediaType != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaType", ArgumentValue = mediaType} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Review", alias, reviewQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptReview()
        {
            return ExceptField("Review");
        }

        public QueryQueryBuilder WithActivity(ActivityUnionQueryBuilder activityUnionQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<int?> messengerId = null, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<ActivityType?> type = null, QueryBuilderParameter<bool?> isFollowing = null, QueryBuilderParameter<bool?> hasReplies = null, QueryBuilderParameter<bool?> hasRepliesOrTypeText = null, QueryBuilderParameter<int?> createdAt = null, QueryBuilderParameter<int?> idNot = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<int?>> idNotIn = null, QueryBuilderParameter<int?> userIdNot = null, QueryBuilderParameter<IEnumerable<int?>> userIdIn = null, QueryBuilderParameter<IEnumerable<int?>> userIdNotIn = null, QueryBuilderParameter<int?> messengerIdNot = null, QueryBuilderParameter<IEnumerable<int?>> messengerIdIn = null, QueryBuilderParameter<IEnumerable<int?>> messengerIdNotIn = null, QueryBuilderParameter<int?> mediaIdNot = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdIn = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdNotIn = null, QueryBuilderParameter<ActivityType?> typeNot = null, QueryBuilderParameter<IEnumerable<ActivityType?>> typeIn = null, QueryBuilderParameter<IEnumerable<ActivityType?>> typeNotIn = null, QueryBuilderParameter<int?> createdAtGreater = null, QueryBuilderParameter<int?> createdAtLesser = null, QueryBuilderParameter<IEnumerable<ActivitySort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (messengerId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "messengerId", ArgumentValue = messengerId} );

            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            if (isFollowing != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isFollowing", ArgumentValue = isFollowing} );

            if (hasReplies != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "hasReplies", ArgumentValue = hasReplies} );

            if (hasRepliesOrTypeText != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "hasRepliesOrTypeText", ArgumentValue = hasRepliesOrTypeText} );

            if (createdAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "createdAt", ArgumentValue = createdAt} );

            if (idNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not", ArgumentValue = idNot} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (idNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not_in", ArgumentValue = idNotIn} );

            if (userIdNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId_not", ArgumentValue = userIdNot} );

            if (userIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId_in", ArgumentValue = userIdIn} );

            if (userIdNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId_not_in", ArgumentValue = userIdNotIn} );

            if (messengerIdNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "messengerId_not", ArgumentValue = messengerIdNot} );

            if (messengerIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "messengerId_in", ArgumentValue = messengerIdIn} );

            if (messengerIdNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "messengerId_not_in", ArgumentValue = messengerIdNotIn} );

            if (mediaIdNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not", ArgumentValue = mediaIdNot} );

            if (mediaIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_in", ArgumentValue = mediaIdIn} );

            if (mediaIdNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not_in", ArgumentValue = mediaIdNotIn} );

            if (typeNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type_not", ArgumentValue = typeNot} );

            if (typeIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type_in", ArgumentValue = typeIn} );

            if (typeNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type_not_in", ArgumentValue = typeNotIn} );

            if (createdAtGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "createdAt_greater", ArgumentValue = createdAtGreater} );

            if (createdAtLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "createdAt_lesser", ArgumentValue = createdAtLesser} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Activity", alias, activityUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptActivity()
        {
            return ExceptField("Activity");
        }

        public QueryQueryBuilder WithActivityReply(ActivityReplyQueryBuilder activityReplyQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> activityId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (activityId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "activityId", ArgumentValue = activityId} );

            return WithObjectField("ActivityReply", alias, activityReplyQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptActivityReply()
        {
            return ExceptField("ActivityReply");
        }

        public QueryQueryBuilder WithFollowing(UserQueryBuilder userQueryBuilder, QueryBuilderParameter<int> userId, QueryBuilderParameter<IEnumerable<UserSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Following", alias, userQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptFollowing()
        {
            return ExceptField("Following");
        }

        public QueryQueryBuilder WithFollower(UserQueryBuilder userQueryBuilder, QueryBuilderParameter<int> userId, QueryBuilderParameter<IEnumerable<UserSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Follower", alias, userQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptFollower()
        {
            return ExceptField("Follower");
        }

        public QueryQueryBuilder WithThread(ThreadQueryBuilder threadQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<int?> replyUserId = null, QueryBuilderParameter<bool?> subscribed = null, QueryBuilderParameter<int?> categoryId = null, QueryBuilderParameter<int?> mediaCategoryId = null, QueryBuilderParameter<string> search = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<ThreadSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (replyUserId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "replyUserId", ArgumentValue = replyUserId} );

            if (subscribed != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subscribed", ArgumentValue = subscribed} );

            if (categoryId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "categoryId", ArgumentValue = categoryId} );

            if (mediaCategoryId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaCategoryId", ArgumentValue = mediaCategoryId} );

            if (search != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "search", ArgumentValue = search} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Thread", alias, threadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptThread()
        {
            return ExceptField("Thread");
        }

        public QueryQueryBuilder WithThreadComment(ThreadCommentQueryBuilder threadCommentQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> threadId = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<IEnumerable<ThreadCommentSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (threadId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "threadId", ArgumentValue = threadId} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("ThreadComment", alias, threadCommentQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptThreadComment()
        {
            return ExceptField("ThreadComment");
        }

        public QueryQueryBuilder WithRecommendation(RecommendationQueryBuilder recommendationQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<int?> mediaRecommendationId = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<int?> rating = null, QueryBuilderParameter<bool?> onList = null, QueryBuilderParameter<int?> ratingGreater = null, QueryBuilderParameter<int?> ratingLesser = null, QueryBuilderParameter<IEnumerable<RecommendationSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (mediaRecommendationId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaRecommendationId", ArgumentValue = mediaRecommendationId} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (rating != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "rating", ArgumentValue = rating} );

            if (onList != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "onList", ArgumentValue = onList} );

            if (ratingGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "rating_greater", ArgumentValue = ratingGreater} );

            if (ratingLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "rating_lesser", ArgumentValue = ratingLesser} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Recommendation", alias, recommendationQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptRecommendation()
        {
            return ExceptField("Recommendation");
        }

        public QueryQueryBuilder WithLike(UserQueryBuilder userQueryBuilder, QueryBuilderParameter<int?> likeableId = null, QueryBuilderParameter<LikeableType?> type = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (likeableId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "likeableId", ArgumentValue = likeableId} );

            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            return WithObjectField("Like", alias, userQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptLike()
        {
            return ExceptField("Like");
        }

        public QueryQueryBuilder WithMarkdown(ParsedMarkdownQueryBuilder parsedMarkdownQueryBuilder, QueryBuilderParameter<string> markdown, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "markdown", ArgumentValue = markdown} );
            return WithObjectField("Markdown", alias, parsedMarkdownQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptMarkdown()
        {
            return ExceptField("Markdown");
        }

        public QueryQueryBuilder WithAniChartUser(AniChartUserQueryBuilder aniChartUserQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("AniChartUser", alias, aniChartUserQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptAniChartUser()
        {
            return ExceptField("AniChartUser");
        }

        public QueryQueryBuilder WithSiteStatistics(SiteStatisticsQueryBuilder siteStatisticsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("SiteStatistics", alias, siteStatisticsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptSiteStatistics()
        {
            return ExceptField("SiteStatistics");
        }

        public QueryQueryBuilder WithMediaTagUser(UserQueryBuilder userQueryBuilder, QueryBuilderParameter<int?> tagId = null, QueryBuilderParameter<int?> mediaId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (tagId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tagId", ArgumentValue = tagId} );

            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            return WithObjectField("MediaTagUser", alias, userQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptMediaTagUser()
        {
            return ExceptField("MediaTagUser");
        }
    }

    public class PageQueryBuilder : GraphQlQueryBuilder<PageQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) },
                new FieldMetadata { Name = "users", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "media", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) },
                new FieldMetadata { Name = "characters", IsComplex = true, QueryBuilderType = typeof(CharacterQueryBuilder) },
                new FieldMetadata { Name = "staff", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) },
                new FieldMetadata { Name = "studios", IsComplex = true, QueryBuilderType = typeof(StudioQueryBuilder) },
                new FieldMetadata { Name = "mediaList", IsComplex = true, QueryBuilderType = typeof(MediaListQueryBuilder) },
                new FieldMetadata { Name = "airingSchedules", IsComplex = true, QueryBuilderType = typeof(AiringScheduleQueryBuilder) },
                new FieldMetadata { Name = "mediaTrends", IsComplex = true, QueryBuilderType = typeof(MediaTrendQueryBuilder) },
                new FieldMetadata { Name = "notifications", IsComplex = true, QueryBuilderType = typeof(NotificationUnionQueryBuilder) },
                new FieldMetadata { Name = "followers", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "following", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "activities", IsComplex = true, QueryBuilderType = typeof(ActivityUnionQueryBuilder) },
                new FieldMetadata { Name = "activityReplies", IsComplex = true, QueryBuilderType = typeof(ActivityReplyQueryBuilder) },
                new FieldMetadata { Name = "threads", IsComplex = true, QueryBuilderType = typeof(ThreadQueryBuilder) },
                new FieldMetadata { Name = "threadComments", IsComplex = true, QueryBuilderType = typeof(ThreadCommentQueryBuilder) },
                new FieldMetadata { Name = "reviews", IsComplex = true, QueryBuilderType = typeof(ReviewQueryBuilder) },
                new FieldMetadata { Name = "recommendations", IsComplex = true, QueryBuilderType = typeof(RecommendationQueryBuilder) },
                new FieldMetadata { Name = "likes", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "Page"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PageQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }

        public PageQueryBuilder WithUsers(UserQueryBuilder userQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<string> name = null, QueryBuilderParameter<bool?> isModerator = null, QueryBuilderParameter<string> search = null, QueryBuilderParameter<IEnumerable<UserSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (name != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );

            if (isModerator != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isModerator", ArgumentValue = isModerator} );

            if (search != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "search", ArgumentValue = search} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("users", alias, userQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryBuilder ExceptUsers()
        {
            return ExceptField("users");
        }

        public PageQueryBuilder WithMedia(MediaQueryBuilder mediaQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> idMal = null, QueryBuilderParameter<object> startDate = null, QueryBuilderParameter<object> endDate = null, QueryBuilderParameter<MediaSeason?> season = null, QueryBuilderParameter<int?> seasonYear = null, QueryBuilderParameter<MediaType?> type = null, QueryBuilderParameter<MediaFormat?> format = null, QueryBuilderParameter<MediaStatus?> status = null, QueryBuilderParameter<int?> episodes = null, QueryBuilderParameter<int?> duration = null, QueryBuilderParameter<int?> chapters = null, QueryBuilderParameter<int?> volumes = null, QueryBuilderParameter<bool?> isAdult = null, QueryBuilderParameter<string> genre = null, QueryBuilderParameter<string> tag = null, QueryBuilderParameter<int?> minimumTagRank = null, QueryBuilderParameter<string> tagCategory = null, QueryBuilderParameter<bool?> onList = null, QueryBuilderParameter<string> licensedBy = null, QueryBuilderParameter<int?> averageScore = null, QueryBuilderParameter<int?> popularity = null, QueryBuilderParameter<MediaSource?> source = null, QueryBuilderParameter<object> countryOfOrigin = null, QueryBuilderParameter<string> search = null, QueryBuilderParameter<int?> idNot = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<int?>> idNotIn = null, QueryBuilderParameter<int?> idMalNot = null, QueryBuilderParameter<IEnumerable<int?>> idMalIn = null, QueryBuilderParameter<IEnumerable<int?>> idMalNotIn = null, QueryBuilderParameter<object> startDateGreater = null, QueryBuilderParameter<object> startDateLesser = null, QueryBuilderParameter<string> startDateLike = null, QueryBuilderParameter<object> endDateGreater = null, QueryBuilderParameter<object> endDateLesser = null, QueryBuilderParameter<string> endDateLike = null, QueryBuilderParameter<IEnumerable<MediaFormat?>> formatIn = null, QueryBuilderParameter<MediaFormat?> formatNot = null, QueryBuilderParameter<IEnumerable<MediaFormat?>> formatNotIn = null, QueryBuilderParameter<IEnumerable<MediaStatus?>> statusIn = null, QueryBuilderParameter<MediaStatus?> statusNot = null, QueryBuilderParameter<IEnumerable<MediaStatus?>> statusNotIn = null, QueryBuilderParameter<int?> episodesGreater = null, QueryBuilderParameter<int?> episodesLesser = null, QueryBuilderParameter<int?> durationGreater = null, QueryBuilderParameter<int?> durationLesser = null, QueryBuilderParameter<int?> chaptersGreater = null, QueryBuilderParameter<int?> chaptersLesser = null, QueryBuilderParameter<int?> volumesGreater = null, QueryBuilderParameter<int?> volumesLesser = null, QueryBuilderParameter<IEnumerable<string>> genreIn = null, QueryBuilderParameter<IEnumerable<string>> genreNotIn = null, QueryBuilderParameter<IEnumerable<string>> tagIn = null, QueryBuilderParameter<IEnumerable<string>> tagNotIn = null, QueryBuilderParameter<IEnumerable<string>> tagCategoryIn = null, QueryBuilderParameter<IEnumerable<string>> tagCategoryNotIn = null, QueryBuilderParameter<IEnumerable<string>> licensedByIn = null, QueryBuilderParameter<int?> averageScoreNot = null, QueryBuilderParameter<int?> averageScoreGreater = null, QueryBuilderParameter<int?> averageScoreLesser = null, QueryBuilderParameter<int?> popularityNot = null, QueryBuilderParameter<int?> popularityGreater = null, QueryBuilderParameter<int?> popularityLesser = null, QueryBuilderParameter<IEnumerable<MediaSource?>> sourceIn = null, QueryBuilderParameter<IEnumerable<MediaSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (idMal != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "idMal", ArgumentValue = idMal} );

            if (startDate != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startDate", ArgumentValue = startDate} );

            if (endDate != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "endDate", ArgumentValue = endDate} );

            if (season != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "season", ArgumentValue = season} );

            if (seasonYear != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "seasonYear", ArgumentValue = seasonYear} );

            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            if (format != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "format", ArgumentValue = format} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            if (episodes != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episodes", ArgumentValue = episodes} );

            if (duration != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "duration", ArgumentValue = duration} );

            if (chapters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "chapters", ArgumentValue = chapters} );

            if (volumes != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "volumes", ArgumentValue = volumes} );

            if (isAdult != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isAdult", ArgumentValue = isAdult} );

            if (genre != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "genre", ArgumentValue = genre} );

            if (tag != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tag", ArgumentValue = tag} );

            if (minimumTagRank != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "minimumTagRank", ArgumentValue = minimumTagRank} );

            if (tagCategory != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tagCategory", ArgumentValue = tagCategory} );

            if (onList != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "onList", ArgumentValue = onList} );

            if (licensedBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "licensedBy", ArgumentValue = licensedBy} );

            if (averageScore != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore", ArgumentValue = averageScore} );

            if (popularity != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity", ArgumentValue = popularity} );

            if (source != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "source", ArgumentValue = source} );

            if (countryOfOrigin != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "countryOfOrigin", ArgumentValue = countryOfOrigin} );

            if (search != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "search", ArgumentValue = search} );

            if (idNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not", ArgumentValue = idNot} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (idNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not_in", ArgumentValue = idNotIn} );

            if (idMalNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "idMal_not", ArgumentValue = idMalNot} );

            if (idMalIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "idMal_in", ArgumentValue = idMalIn} );

            if (idMalNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "idMal_not_in", ArgumentValue = idMalNotIn} );

            if (startDateGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startDate_greater", ArgumentValue = startDateGreater} );

            if (startDateLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startDate_lesser", ArgumentValue = startDateLesser} );

            if (startDateLike != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startDate_like", ArgumentValue = startDateLike} );

            if (endDateGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "endDate_greater", ArgumentValue = endDateGreater} );

            if (endDateLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "endDate_lesser", ArgumentValue = endDateLesser} );

            if (endDateLike != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "endDate_like", ArgumentValue = endDateLike} );

            if (formatIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "format_in", ArgumentValue = formatIn} );

            if (formatNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "format_not", ArgumentValue = formatNot} );

            if (formatNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "format_not_in", ArgumentValue = formatNotIn} );

            if (statusIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_in", ArgumentValue = statusIn} );

            if (statusNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_not", ArgumentValue = statusNot} );

            if (statusNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_not_in", ArgumentValue = statusNotIn} );

            if (episodesGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episodes_greater", ArgumentValue = episodesGreater} );

            if (episodesLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episodes_lesser", ArgumentValue = episodesLesser} );

            if (durationGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "duration_greater", ArgumentValue = durationGreater} );

            if (durationLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "duration_lesser", ArgumentValue = durationLesser} );

            if (chaptersGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "chapters_greater", ArgumentValue = chaptersGreater} );

            if (chaptersLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "chapters_lesser", ArgumentValue = chaptersLesser} );

            if (volumesGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "volumes_greater", ArgumentValue = volumesGreater} );

            if (volumesLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "volumes_lesser", ArgumentValue = volumesLesser} );

            if (genreIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "genre_in", ArgumentValue = genreIn} );

            if (genreNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "genre_not_in", ArgumentValue = genreNotIn} );

            if (tagIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tag_in", ArgumentValue = tagIn} );

            if (tagNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tag_not_in", ArgumentValue = tagNotIn} );

            if (tagCategoryIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tagCategory_in", ArgumentValue = tagCategoryIn} );

            if (tagCategoryNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tagCategory_not_in", ArgumentValue = tagCategoryNotIn} );

            if (licensedByIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "licensedBy_in", ArgumentValue = licensedByIn} );

            if (averageScoreNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore_not", ArgumentValue = averageScoreNot} );

            if (averageScoreGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore_greater", ArgumentValue = averageScoreGreater} );

            if (averageScoreLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore_lesser", ArgumentValue = averageScoreLesser} );

            if (popularityNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity_not", ArgumentValue = popularityNot} );

            if (popularityGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity_greater", ArgumentValue = popularityGreater} );

            if (popularityLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity_lesser", ArgumentValue = popularityLesser} );

            if (sourceIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "source_in", ArgumentValue = sourceIn} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("media", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryBuilder ExceptMedia()
        {
            return ExceptField("media");
        }

        public PageQueryBuilder WithCharacters(CharacterQueryBuilder characterQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<bool?> isBirthday = null, QueryBuilderParameter<string> search = null, QueryBuilderParameter<int?> idNot = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<int?>> idNotIn = null, QueryBuilderParameter<IEnumerable<CharacterSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (isBirthday != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isBirthday", ArgumentValue = isBirthday} );

            if (search != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "search", ArgumentValue = search} );

            if (idNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not", ArgumentValue = idNot} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (idNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not_in", ArgumentValue = idNotIn} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("characters", alias, characterQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryBuilder ExceptCharacters()
        {
            return ExceptField("characters");
        }

        public PageQueryBuilder WithStaff(StaffQueryBuilder staffQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<bool?> isBirthday = null, QueryBuilderParameter<string> search = null, QueryBuilderParameter<int?> idNot = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<int?>> idNotIn = null, QueryBuilderParameter<IEnumerable<StaffSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (isBirthday != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isBirthday", ArgumentValue = isBirthday} );

            if (search != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "search", ArgumentValue = search} );

            if (idNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not", ArgumentValue = idNot} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (idNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not_in", ArgumentValue = idNotIn} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("staff", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryBuilder ExceptStaff()
        {
            return ExceptField("staff");
        }

        public PageQueryBuilder WithStudios(StudioQueryBuilder studioQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<string> search = null, QueryBuilderParameter<int?> idNot = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<int?>> idNotIn = null, QueryBuilderParameter<IEnumerable<StudioSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (search != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "search", ArgumentValue = search} );

            if (idNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not", ArgumentValue = idNot} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (idNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not_in", ArgumentValue = idNotIn} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("studios", alias, studioQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryBuilder ExceptStudios()
        {
            return ExceptField("studios");
        }

        public PageQueryBuilder WithMediaList(MediaListQueryBuilder mediaListQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<string> userName = null, QueryBuilderParameter<MediaType?> type = null, QueryBuilderParameter<MediaListStatus?> status = null, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<bool?> isFollowing = null, QueryBuilderParameter<string> notes = null, QueryBuilderParameter<object> startedAt = null, QueryBuilderParameter<object> completedAt = null, QueryBuilderParameter<bool?> compareWithAuthList = null, QueryBuilderParameter<IEnumerable<int?>> userIdIn = null, QueryBuilderParameter<IEnumerable<MediaListStatus?>> statusIn = null, QueryBuilderParameter<IEnumerable<MediaListStatus?>> statusNotIn = null, QueryBuilderParameter<MediaListStatus?> statusNot = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdIn = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdNotIn = null, QueryBuilderParameter<string> notesLike = null, QueryBuilderParameter<object> startedAtGreater = null, QueryBuilderParameter<object> startedAtLesser = null, QueryBuilderParameter<string> startedAtLike = null, QueryBuilderParameter<object> completedAtGreater = null, QueryBuilderParameter<object> completedAtLesser = null, QueryBuilderParameter<string> completedAtLike = null, QueryBuilderParameter<IEnumerable<MediaListSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (userName != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userName", ArgumentValue = userName} );

            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (isFollowing != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isFollowing", ArgumentValue = isFollowing} );

            if (notes != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "notes", ArgumentValue = notes} );

            if (startedAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startedAt", ArgumentValue = startedAt} );

            if (completedAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "completedAt", ArgumentValue = completedAt} );

            if (compareWithAuthList != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "compareWithAuthList", ArgumentValue = compareWithAuthList} );

            if (userIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId_in", ArgumentValue = userIdIn} );

            if (statusIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_in", ArgumentValue = statusIn} );

            if (statusNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_not_in", ArgumentValue = statusNotIn} );

            if (statusNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_not", ArgumentValue = statusNot} );

            if (mediaIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_in", ArgumentValue = mediaIdIn} );

            if (mediaIdNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not_in", ArgumentValue = mediaIdNotIn} );

            if (notesLike != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "notes_like", ArgumentValue = notesLike} );

            if (startedAtGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startedAt_greater", ArgumentValue = startedAtGreater} );

            if (startedAtLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startedAt_lesser", ArgumentValue = startedAtLesser} );

            if (startedAtLike != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startedAt_like", ArgumentValue = startedAtLike} );

            if (completedAtGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "completedAt_greater", ArgumentValue = completedAtGreater} );

            if (completedAtLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "completedAt_lesser", ArgumentValue = completedAtLesser} );

            if (completedAtLike != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "completedAt_like", ArgumentValue = completedAtLike} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("mediaList", alias, mediaListQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryBuilder ExceptMediaList()
        {
            return ExceptField("mediaList");
        }

        public PageQueryBuilder WithAiringSchedules(AiringScheduleQueryBuilder airingScheduleQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<int?> episode = null, QueryBuilderParameter<int?> airingAt = null, QueryBuilderParameter<bool?> notYetAired = null, QueryBuilderParameter<int?> idNot = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<int?>> idNotIn = null, QueryBuilderParameter<int?> mediaIdNot = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdIn = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdNotIn = null, QueryBuilderParameter<int?> episodeNot = null, QueryBuilderParameter<IEnumerable<int?>> episodeIn = null, QueryBuilderParameter<IEnumerable<int?>> episodeNotIn = null, QueryBuilderParameter<int?> episodeGreater = null, QueryBuilderParameter<int?> episodeLesser = null, QueryBuilderParameter<int?> airingAtGreater = null, QueryBuilderParameter<int?> airingAtLesser = null, QueryBuilderParameter<IEnumerable<AiringSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (episode != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode", ArgumentValue = episode} );

            if (airingAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "airingAt", ArgumentValue = airingAt} );

            if (notYetAired != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "notYetAired", ArgumentValue = notYetAired} );

            if (idNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not", ArgumentValue = idNot} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (idNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not_in", ArgumentValue = idNotIn} );

            if (mediaIdNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not", ArgumentValue = mediaIdNot} );

            if (mediaIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_in", ArgumentValue = mediaIdIn} );

            if (mediaIdNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not_in", ArgumentValue = mediaIdNotIn} );

            if (episodeNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_not", ArgumentValue = episodeNot} );

            if (episodeIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_in", ArgumentValue = episodeIn} );

            if (episodeNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_not_in", ArgumentValue = episodeNotIn} );

            if (episodeGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_greater", ArgumentValue = episodeGreater} );

            if (episodeLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_lesser", ArgumentValue = episodeLesser} );

            if (airingAtGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "airingAt_greater", ArgumentValue = airingAtGreater} );

            if (airingAtLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "airingAt_lesser", ArgumentValue = airingAtLesser} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("airingSchedules", alias, airingScheduleQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryBuilder ExceptAiringSchedules()
        {
            return ExceptField("airingSchedules");
        }

        public PageQueryBuilder WithMediaTrends(MediaTrendQueryBuilder mediaTrendQueryBuilder, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<int?> date = null, QueryBuilderParameter<int?> trending = null, QueryBuilderParameter<int?> averageScore = null, QueryBuilderParameter<int?> popularity = null, QueryBuilderParameter<int?> episode = null, QueryBuilderParameter<bool?> releasing = null, QueryBuilderParameter<int?> mediaIdNot = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdIn = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdNotIn = null, QueryBuilderParameter<int?> dateGreater = null, QueryBuilderParameter<int?> dateLesser = null, QueryBuilderParameter<int?> trendingGreater = null, QueryBuilderParameter<int?> trendingLesser = null, QueryBuilderParameter<int?> trendingNot = null, QueryBuilderParameter<int?> averageScoreGreater = null, QueryBuilderParameter<int?> averageScoreLesser = null, QueryBuilderParameter<int?> averageScoreNot = null, QueryBuilderParameter<int?> popularityGreater = null, QueryBuilderParameter<int?> popularityLesser = null, QueryBuilderParameter<int?> popularityNot = null, QueryBuilderParameter<int?> episodeGreater = null, QueryBuilderParameter<int?> episodeLesser = null, QueryBuilderParameter<int?> episodeNot = null, QueryBuilderParameter<IEnumerable<MediaTrendSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (date != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "date", ArgumentValue = date} );

            if (trending != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "trending", ArgumentValue = trending} );

            if (averageScore != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore", ArgumentValue = averageScore} );

            if (popularity != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity", ArgumentValue = popularity} );

            if (episode != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode", ArgumentValue = episode} );

            if (releasing != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "releasing", ArgumentValue = releasing} );

            if (mediaIdNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not", ArgumentValue = mediaIdNot} );

            if (mediaIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_in", ArgumentValue = mediaIdIn} );

            if (mediaIdNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not_in", ArgumentValue = mediaIdNotIn} );

            if (dateGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "date_greater", ArgumentValue = dateGreater} );

            if (dateLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "date_lesser", ArgumentValue = dateLesser} );

            if (trendingGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "trending_greater", ArgumentValue = trendingGreater} );

            if (trendingLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "trending_lesser", ArgumentValue = trendingLesser} );

            if (trendingNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "trending_not", ArgumentValue = trendingNot} );

            if (averageScoreGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore_greater", ArgumentValue = averageScoreGreater} );

            if (averageScoreLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore_lesser", ArgumentValue = averageScoreLesser} );

            if (averageScoreNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore_not", ArgumentValue = averageScoreNot} );

            if (popularityGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity_greater", ArgumentValue = popularityGreater} );

            if (popularityLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity_lesser", ArgumentValue = popularityLesser} );

            if (popularityNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity_not", ArgumentValue = popularityNot} );

            if (episodeGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_greater", ArgumentValue = episodeGreater} );

            if (episodeLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_lesser", ArgumentValue = episodeLesser} );

            if (episodeNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_not", ArgumentValue = episodeNot} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("mediaTrends", alias, mediaTrendQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryBuilder ExceptMediaTrends()
        {
            return ExceptField("mediaTrends");
        }

        public PageQueryBuilder WithNotifications(NotificationUnionQueryBuilder notificationUnionQueryBuilder, QueryBuilderParameter<NotificationType?> type = null, QueryBuilderParameter<bool?> resetNotificationCount = null, QueryBuilderParameter<IEnumerable<NotificationType?>> typeIn = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            if (resetNotificationCount != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "resetNotificationCount", ArgumentValue = resetNotificationCount} );

            if (typeIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type_in", ArgumentValue = typeIn} );

            return WithObjectField("notifications", alias, notificationUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryBuilder ExceptNotifications()
        {
            return ExceptField("notifications");
        }

        public PageQueryBuilder WithFollowers(UserQueryBuilder userQueryBuilder, QueryBuilderParameter<int> userId, QueryBuilderParameter<IEnumerable<UserSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("followers", alias, userQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryBuilder ExceptFollowers()
        {
            return ExceptField("followers");
        }

        public PageQueryBuilder WithFollowing(UserQueryBuilder userQueryBuilder, QueryBuilderParameter<int> userId, QueryBuilderParameter<IEnumerable<UserSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("following", alias, userQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryBuilder ExceptFollowing()
        {
            return ExceptField("following");
        }

        public PageQueryBuilder WithActivities(ActivityUnionQueryBuilder activityUnionQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<int?> messengerId = null, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<ActivityType?> type = null, QueryBuilderParameter<bool?> isFollowing = null, QueryBuilderParameter<bool?> hasReplies = null, QueryBuilderParameter<bool?> hasRepliesOrTypeText = null, QueryBuilderParameter<int?> createdAt = null, QueryBuilderParameter<int?> idNot = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<int?>> idNotIn = null, QueryBuilderParameter<int?> userIdNot = null, QueryBuilderParameter<IEnumerable<int?>> userIdIn = null, QueryBuilderParameter<IEnumerable<int?>> userIdNotIn = null, QueryBuilderParameter<int?> messengerIdNot = null, QueryBuilderParameter<IEnumerable<int?>> messengerIdIn = null, QueryBuilderParameter<IEnumerable<int?>> messengerIdNotIn = null, QueryBuilderParameter<int?> mediaIdNot = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdIn = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdNotIn = null, QueryBuilderParameter<ActivityType?> typeNot = null, QueryBuilderParameter<IEnumerable<ActivityType?>> typeIn = null, QueryBuilderParameter<IEnumerable<ActivityType?>> typeNotIn = null, QueryBuilderParameter<int?> createdAtGreater = null, QueryBuilderParameter<int?> createdAtLesser = null, QueryBuilderParameter<IEnumerable<ActivitySort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (messengerId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "messengerId", ArgumentValue = messengerId} );

            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            if (isFollowing != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isFollowing", ArgumentValue = isFollowing} );

            if (hasReplies != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "hasReplies", ArgumentValue = hasReplies} );

            if (hasRepliesOrTypeText != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "hasRepliesOrTypeText", ArgumentValue = hasRepliesOrTypeText} );

            if (createdAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "createdAt", ArgumentValue = createdAt} );

            if (idNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not", ArgumentValue = idNot} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (idNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not_in", ArgumentValue = idNotIn} );

            if (userIdNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId_not", ArgumentValue = userIdNot} );

            if (userIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId_in", ArgumentValue = userIdIn} );

            if (userIdNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId_not_in", ArgumentValue = userIdNotIn} );

            if (messengerIdNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "messengerId_not", ArgumentValue = messengerIdNot} );

            if (messengerIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "messengerId_in", ArgumentValue = messengerIdIn} );

            if (messengerIdNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "messengerId_not_in", ArgumentValue = messengerIdNotIn} );

            if (mediaIdNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not", ArgumentValue = mediaIdNot} );

            if (mediaIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_in", ArgumentValue = mediaIdIn} );

            if (mediaIdNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not_in", ArgumentValue = mediaIdNotIn} );

            if (typeNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type_not", ArgumentValue = typeNot} );

            if (typeIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type_in", ArgumentValue = typeIn} );

            if (typeNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type_not_in", ArgumentValue = typeNotIn} );

            if (createdAtGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "createdAt_greater", ArgumentValue = createdAtGreater} );

            if (createdAtLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "createdAt_lesser", ArgumentValue = createdAtLesser} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("activities", alias, activityUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryBuilder ExceptActivities()
        {
            return ExceptField("activities");
        }

        public PageQueryBuilder WithActivityReplies(ActivityReplyQueryBuilder activityReplyQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> activityId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (activityId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "activityId", ArgumentValue = activityId} );

            return WithObjectField("activityReplies", alias, activityReplyQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryBuilder ExceptActivityReplies()
        {
            return ExceptField("activityReplies");
        }

        public PageQueryBuilder WithThreads(ThreadQueryBuilder threadQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<int?> replyUserId = null, QueryBuilderParameter<bool?> subscribed = null, QueryBuilderParameter<int?> categoryId = null, QueryBuilderParameter<int?> mediaCategoryId = null, QueryBuilderParameter<string> search = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<ThreadSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (replyUserId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "replyUserId", ArgumentValue = replyUserId} );

            if (subscribed != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subscribed", ArgumentValue = subscribed} );

            if (categoryId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "categoryId", ArgumentValue = categoryId} );

            if (mediaCategoryId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaCategoryId", ArgumentValue = mediaCategoryId} );

            if (search != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "search", ArgumentValue = search} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("threads", alias, threadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryBuilder ExceptThreads()
        {
            return ExceptField("threads");
        }

        public PageQueryBuilder WithThreadComments(ThreadCommentQueryBuilder threadCommentQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> threadId = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<IEnumerable<ThreadCommentSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (threadId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "threadId", ArgumentValue = threadId} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("threadComments", alias, threadCommentQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryBuilder ExceptThreadComments()
        {
            return ExceptField("threadComments");
        }

        public PageQueryBuilder WithReviews(ReviewQueryBuilder reviewQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<MediaType?> mediaType = null, QueryBuilderParameter<IEnumerable<ReviewSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (mediaType != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaType", ArgumentValue = mediaType} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("reviews", alias, reviewQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryBuilder ExceptReviews()
        {
            return ExceptField("reviews");
        }

        public PageQueryBuilder WithRecommendations(RecommendationQueryBuilder recommendationQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<int?> mediaRecommendationId = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<int?> rating = null, QueryBuilderParameter<bool?> onList = null, QueryBuilderParameter<int?> ratingGreater = null, QueryBuilderParameter<int?> ratingLesser = null, QueryBuilderParameter<IEnumerable<RecommendationSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (mediaRecommendationId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaRecommendationId", ArgumentValue = mediaRecommendationId} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (rating != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "rating", ArgumentValue = rating} );

            if (onList != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "onList", ArgumentValue = onList} );

            if (ratingGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "rating_greater", ArgumentValue = ratingGreater} );

            if (ratingLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "rating_lesser", ArgumentValue = ratingLesser} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("recommendations", alias, recommendationQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryBuilder ExceptRecommendations()
        {
            return ExceptField("recommendations");
        }

        public PageQueryBuilder WithLikes(UserQueryBuilder userQueryBuilder, QueryBuilderParameter<int?> likeableId = null, QueryBuilderParameter<LikeableType?> type = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (likeableId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "likeableId", ArgumentValue = likeableId} );

            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            return WithObjectField("likes", alias, userQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryBuilder ExceptLikes()
        {
            return ExceptField("likes");
        }
    }

    public class PageInfoQueryBuilder : GraphQlQueryBuilder<PageInfoQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "total" },
                new FieldMetadata { Name = "perPage" },
                new FieldMetadata { Name = "currentPage" },
                new FieldMetadata { Name = "lastPage" },
                new FieldMetadata { Name = "hasNextPage" }
            };

        protected override string TypeName { get { return "PageInfo"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PageInfoQueryBuilder WithTotal(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("total", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptTotal()
        {
            return ExceptField("total");
        }

        public PageInfoQueryBuilder WithPerPage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("perPage", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptPerPage()
        {
            return ExceptField("perPage");
        }

        public PageInfoQueryBuilder WithCurrentPage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("currentPage", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptCurrentPage()
        {
            return ExceptField("currentPage");
        }

        public PageInfoQueryBuilder WithLastPage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastPage", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptLastPage()
        {
            return ExceptField("lastPage");
        }

        public PageInfoQueryBuilder WithHasNextPage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasNextPage", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptHasNextPage()
        {
            return ExceptField("hasNextPage");
        }
    }

    public class UserQueryBuilder : GraphQlQueryBuilder<UserQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "about" },
                new FieldMetadata { Name = "avatar", IsComplex = true, QueryBuilderType = typeof(UserAvatarQueryBuilder) },
                new FieldMetadata { Name = "bannerImage" },
                new FieldMetadata { Name = "isFollowing" },
                new FieldMetadata { Name = "isFollower" },
                new FieldMetadata { Name = "isBlocked" },
                new FieldMetadata { Name = "bans", IsComplex = true },
                new FieldMetadata { Name = "options", IsComplex = true, QueryBuilderType = typeof(UserOptionsQueryBuilder) },
                new FieldMetadata { Name = "mediaListOptions", IsComplex = true, QueryBuilderType = typeof(MediaListOptionsQueryBuilder) },
                new FieldMetadata { Name = "favourites", IsComplex = true, QueryBuilderType = typeof(FavouritesQueryBuilder) },
                new FieldMetadata { Name = "statistics", IsComplex = true, QueryBuilderType = typeof(UserStatisticTypesQueryBuilder) },
                new FieldMetadata { Name = "unreadNotificationCount" },
                new FieldMetadata { Name = "siteUrl" },
                new FieldMetadata { Name = "donatorTier" },
                new FieldMetadata { Name = "donatorBadge" },
                new FieldMetadata { Name = "moderatorRoles", IsComplex = true },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "updatedAt" },
                new FieldMetadata { Name = "previousNames", IsComplex = true, QueryBuilderType = typeof(UserPreviousNameQueryBuilder) }
            };

        protected override string TypeName { get { return "User"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public UserQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public UserQueryBuilder WithAbout(QueryBuilderParameter<bool?> asHtml = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (asHtml != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "asHtml", ArgumentValue = asHtml} );

            return WithScalarField("about", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public UserQueryBuilder ExceptAbout()
        {
            return ExceptField("about");
        }

        public UserQueryBuilder WithAvatar(UserAvatarQueryBuilder userAvatarQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("avatar", alias, userAvatarQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptAvatar()
        {
            return ExceptField("avatar");
        }

        public UserQueryBuilder WithBannerImage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bannerImage", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptBannerImage()
        {
            return ExceptField("bannerImage");
        }

        public UserQueryBuilder WithIsFollowing(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isFollowing", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptIsFollowing()
        {
            return ExceptField("isFollowing");
        }

        public UserQueryBuilder WithIsFollower(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isFollower", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptIsFollower()
        {
            return ExceptField("isFollower");
        }

        public UserQueryBuilder WithIsBlocked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isBlocked", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptIsBlocked()
        {
            return ExceptField("isBlocked");
        }

        public UserQueryBuilder WithBans(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bans", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptBans()
        {
            return ExceptField("bans");
        }

        public UserQueryBuilder WithOptions(UserOptionsQueryBuilder userOptionsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("options", alias, userOptionsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptOptions()
        {
            return ExceptField("options");
        }

        public UserQueryBuilder WithMediaListOptions(MediaListOptionsQueryBuilder mediaListOptionsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mediaListOptions", alias, mediaListOptionsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptMediaListOptions()
        {
            return ExceptField("mediaListOptions");
        }

        public UserQueryBuilder WithFavourites(FavouritesQueryBuilder favouritesQueryBuilder, QueryBuilderParameter<int?> page = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            return WithObjectField("favourites", alias, favouritesQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserQueryBuilder ExceptFavourites()
        {
            return ExceptField("favourites");
        }

        public UserQueryBuilder WithStatistics(UserStatisticTypesQueryBuilder userStatisticTypesQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("statistics", alias, userStatisticTypesQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptStatistics()
        {
            return ExceptField("statistics");
        }

        public UserQueryBuilder WithUnreadNotificationCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unreadNotificationCount", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptUnreadNotificationCount()
        {
            return ExceptField("unreadNotificationCount");
        }

        public UserQueryBuilder WithSiteUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("siteUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptSiteUrl()
        {
            return ExceptField("siteUrl");
        }

        public UserQueryBuilder WithDonatorTier(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("donatorTier", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptDonatorTier()
        {
            return ExceptField("donatorTier");
        }

        public UserQueryBuilder WithDonatorBadge(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("donatorBadge", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptDonatorBadge()
        {
            return ExceptField("donatorBadge");
        }

        public UserQueryBuilder WithModeratorRoles(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("moderatorRoles", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptModeratorRoles()
        {
            return ExceptField("moderatorRoles");
        }

        public UserQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public UserQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public UserQueryBuilder WithPreviousNames(UserPreviousNameQueryBuilder userPreviousNameQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("previousNames", alias, userPreviousNameQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptPreviousNames()
        {
            return ExceptField("previousNames");
        }
    }

    public class UserAvatarQueryBuilder : GraphQlQueryBuilder<UserAvatarQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "large" },
                new FieldMetadata { Name = "medium" }
            };

        protected override string TypeName { get { return "UserAvatar"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserAvatarQueryBuilder WithLarge(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("large", alias, new GraphQlDirective[] { include, skip });
        }

        public UserAvatarQueryBuilder ExceptLarge()
        {
            return ExceptField("large");
        }

        public UserAvatarQueryBuilder WithMedium(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("medium", alias, new GraphQlDirective[] { include, skip });
        }

        public UserAvatarQueryBuilder ExceptMedium()
        {
            return ExceptField("medium");
        }
    }

    public class UserOptionsQueryBuilder : GraphQlQueryBuilder<UserOptionsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "titleLanguage" },
                new FieldMetadata { Name = "displayAdultContent" },
                new FieldMetadata { Name = "airingNotifications" },
                new FieldMetadata { Name = "profileColor" },
                new FieldMetadata { Name = "notificationOptions", IsComplex = true, QueryBuilderType = typeof(NotificationOptionQueryBuilder) },
                new FieldMetadata { Name = "timezone" },
                new FieldMetadata { Name = "activityMergeTime" },
                new FieldMetadata { Name = "staffNameLanguage" }
            };

        protected override string TypeName { get { return "UserOptions"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserOptionsQueryBuilder WithTitleLanguage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("titleLanguage", alias, new GraphQlDirective[] { include, skip });
        }

        public UserOptionsQueryBuilder ExceptTitleLanguage()
        {
            return ExceptField("titleLanguage");
        }

        public UserOptionsQueryBuilder WithDisplayAdultContent(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("displayAdultContent", alias, new GraphQlDirective[] { include, skip });
        }

        public UserOptionsQueryBuilder ExceptDisplayAdultContent()
        {
            return ExceptField("displayAdultContent");
        }

        public UserOptionsQueryBuilder WithAiringNotifications(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("airingNotifications", alias, new GraphQlDirective[] { include, skip });
        }

        public UserOptionsQueryBuilder ExceptAiringNotifications()
        {
            return ExceptField("airingNotifications");
        }

        public UserOptionsQueryBuilder WithProfileColor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("profileColor", alias, new GraphQlDirective[] { include, skip });
        }

        public UserOptionsQueryBuilder ExceptProfileColor()
        {
            return ExceptField("profileColor");
        }

        public UserOptionsQueryBuilder WithNotificationOptions(NotificationOptionQueryBuilder notificationOptionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("notificationOptions", alias, notificationOptionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserOptionsQueryBuilder ExceptNotificationOptions()
        {
            return ExceptField("notificationOptions");
        }

        public UserOptionsQueryBuilder WithTimezone(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timezone", alias, new GraphQlDirective[] { include, skip });
        }

        public UserOptionsQueryBuilder ExceptTimezone()
        {
            return ExceptField("timezone");
        }

        public UserOptionsQueryBuilder WithActivityMergeTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("activityMergeTime", alias, new GraphQlDirective[] { include, skip });
        }

        public UserOptionsQueryBuilder ExceptActivityMergeTime()
        {
            return ExceptField("activityMergeTime");
        }

        public UserOptionsQueryBuilder WithStaffNameLanguage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("staffNameLanguage", alias, new GraphQlDirective[] { include, skip });
        }

        public UserOptionsQueryBuilder ExceptStaffNameLanguage()
        {
            return ExceptField("staffNameLanguage");
        }
    }

    public class NotificationOptionQueryBuilder : GraphQlQueryBuilder<NotificationOptionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "enabled" }
            };

        protected override string TypeName { get { return "NotificationOption"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public NotificationOptionQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public NotificationOptionQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public NotificationOptionQueryBuilder WithEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("enabled", alias, new GraphQlDirective[] { include, skip });
        }

        public NotificationOptionQueryBuilder ExceptEnabled()
        {
            return ExceptField("enabled");
        }
    }

    public class MediaListOptionsQueryBuilder : GraphQlQueryBuilder<MediaListOptionsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "scoreFormat" },
                new FieldMetadata { Name = "rowOrder" },
                new FieldMetadata { Name = "animeList", IsComplex = true, QueryBuilderType = typeof(MediaListTypeOptionsQueryBuilder) },
                new FieldMetadata { Name = "mangaList", IsComplex = true, QueryBuilderType = typeof(MediaListTypeOptionsQueryBuilder) }
            };

        protected override string TypeName { get { return "MediaListOptions"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaListOptionsQueryBuilder WithScoreFormat(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scoreFormat", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListOptionsQueryBuilder ExceptScoreFormat()
        {
            return ExceptField("scoreFormat");
        }

        public MediaListOptionsQueryBuilder WithRowOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rowOrder", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListOptionsQueryBuilder ExceptRowOrder()
        {
            return ExceptField("rowOrder");
        }

        public MediaListOptionsQueryBuilder WithAnimeList(MediaListTypeOptionsQueryBuilder mediaListTypeOptionsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("animeList", alias, mediaListTypeOptionsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaListOptionsQueryBuilder ExceptAnimeList()
        {
            return ExceptField("animeList");
        }

        public MediaListOptionsQueryBuilder WithMangaList(MediaListTypeOptionsQueryBuilder mediaListTypeOptionsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mangaList", alias, mediaListTypeOptionsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaListOptionsQueryBuilder ExceptMangaList()
        {
            return ExceptField("mangaList");
        }
    }

    public class MediaListTypeOptionsQueryBuilder : GraphQlQueryBuilder<MediaListTypeOptionsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "sectionOrder", IsComplex = true },
                new FieldMetadata { Name = "splitCompletedSectionByFormat" },
                new FieldMetadata { Name = "customLists", IsComplex = true },
                new FieldMetadata { Name = "advancedScoring", IsComplex = true },
                new FieldMetadata { Name = "advancedScoringEnabled" }
            };

        protected override string TypeName { get { return "MediaListTypeOptions"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaListTypeOptionsQueryBuilder WithSectionOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sectionOrder", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListTypeOptionsQueryBuilder ExceptSectionOrder()
        {
            return ExceptField("sectionOrder");
        }

        public MediaListTypeOptionsQueryBuilder WithSplitCompletedSectionByFormat(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("splitCompletedSectionByFormat", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListTypeOptionsQueryBuilder ExceptSplitCompletedSectionByFormat()
        {
            return ExceptField("splitCompletedSectionByFormat");
        }

        public MediaListTypeOptionsQueryBuilder WithCustomLists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("customLists", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListTypeOptionsQueryBuilder ExceptCustomLists()
        {
            return ExceptField("customLists");
        }

        public MediaListTypeOptionsQueryBuilder WithAdvancedScoring(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("advancedScoring", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListTypeOptionsQueryBuilder ExceptAdvancedScoring()
        {
            return ExceptField("advancedScoring");
        }

        public MediaListTypeOptionsQueryBuilder WithAdvancedScoringEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("advancedScoringEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListTypeOptionsQueryBuilder ExceptAdvancedScoringEnabled()
        {
            return ExceptField("advancedScoringEnabled");
        }
    }

    public class FavouritesQueryBuilder : GraphQlQueryBuilder<FavouritesQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "anime", IsComplex = true, QueryBuilderType = typeof(MediaConnectionQueryBuilder) },
                new FieldMetadata { Name = "manga", IsComplex = true, QueryBuilderType = typeof(MediaConnectionQueryBuilder) },
                new FieldMetadata { Name = "characters", IsComplex = true, QueryBuilderType = typeof(CharacterConnectionQueryBuilder) },
                new FieldMetadata { Name = "staff", IsComplex = true, QueryBuilderType = typeof(StaffConnectionQueryBuilder) },
                new FieldMetadata { Name = "studios", IsComplex = true, QueryBuilderType = typeof(StudioConnectionQueryBuilder) }
            };

        protected override string TypeName { get { return "Favourites"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FavouritesQueryBuilder WithAnime(MediaConnectionQueryBuilder mediaConnectionQueryBuilder, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("anime", alias, mediaConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FavouritesQueryBuilder ExceptAnime()
        {
            return ExceptField("anime");
        }

        public FavouritesQueryBuilder WithManga(MediaConnectionQueryBuilder mediaConnectionQueryBuilder, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("manga", alias, mediaConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FavouritesQueryBuilder ExceptManga()
        {
            return ExceptField("manga");
        }

        public FavouritesQueryBuilder WithCharacters(CharacterConnectionQueryBuilder characterConnectionQueryBuilder, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("characters", alias, characterConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FavouritesQueryBuilder ExceptCharacters()
        {
            return ExceptField("characters");
        }

        public FavouritesQueryBuilder WithStaff(StaffConnectionQueryBuilder staffConnectionQueryBuilder, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("staff", alias, staffConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FavouritesQueryBuilder ExceptStaff()
        {
            return ExceptField("staff");
        }

        public FavouritesQueryBuilder WithStudios(StudioConnectionQueryBuilder studioConnectionQueryBuilder, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("studios", alias, studioConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FavouritesQueryBuilder ExceptStudios()
        {
            return ExceptField("studios");
        }
    }

    public class MediaConnectionQueryBuilder : GraphQlQueryBuilder<MediaConnectionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(MediaEdgeQueryBuilder) },
                new FieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) },
                new FieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "MediaConnection"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaConnectionQueryBuilder WithEdges(MediaEdgeQueryBuilder mediaEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, mediaEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public MediaConnectionQueryBuilder WithNodes(MediaQueryBuilder mediaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public MediaConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class MediaEdgeQueryBuilder : GraphQlQueryBuilder<MediaEdgeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "relationType" },
                new FieldMetadata { Name = "isMainStudio" },
                new FieldMetadata { Name = "characters", IsComplex = true, QueryBuilderType = typeof(CharacterQueryBuilder) },
                new FieldMetadata { Name = "characterRole" },
                new FieldMetadata { Name = "characterName" },
                new FieldMetadata { Name = "roleNotes" },
                new FieldMetadata { Name = "dubGroup" },
                new FieldMetadata { Name = "staffRole" },
                new FieldMetadata { Name = "voiceActors", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) },
                new FieldMetadata { Name = "voiceActorRoles", IsComplex = true, QueryBuilderType = typeof(StaffRoleTypeQueryBuilder) },
                new FieldMetadata { Name = "favouriteOrder" }
            };

        protected override string TypeName { get { return "MediaEdge"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaEdgeQueryBuilder WithNode(MediaQueryBuilder mediaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }

        public MediaEdgeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaEdgeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MediaEdgeQueryBuilder WithRelationType(QueryBuilderParameter<int?> version = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (version != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "version", ArgumentValue = version} );

            return WithScalarField("relationType", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public MediaEdgeQueryBuilder ExceptRelationType()
        {
            return ExceptField("relationType");
        }

        public MediaEdgeQueryBuilder WithIsMainStudio(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isMainStudio", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaEdgeQueryBuilder ExceptIsMainStudio()
        {
            return ExceptField("isMainStudio");
        }

        public MediaEdgeQueryBuilder WithCharacters(CharacterQueryBuilder characterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("characters", alias, characterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaEdgeQueryBuilder ExceptCharacters()
        {
            return ExceptField("characters");
        }

        public MediaEdgeQueryBuilder WithCharacterRole(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("characterRole", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaEdgeQueryBuilder ExceptCharacterRole()
        {
            return ExceptField("characterRole");
        }

        public MediaEdgeQueryBuilder WithCharacterName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("characterName", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaEdgeQueryBuilder ExceptCharacterName()
        {
            return ExceptField("characterName");
        }

        public MediaEdgeQueryBuilder WithRoleNotes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roleNotes", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaEdgeQueryBuilder ExceptRoleNotes()
        {
            return ExceptField("roleNotes");
        }

        public MediaEdgeQueryBuilder WithDubGroup(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dubGroup", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaEdgeQueryBuilder ExceptDubGroup()
        {
            return ExceptField("dubGroup");
        }

        public MediaEdgeQueryBuilder WithStaffRole(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("staffRole", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaEdgeQueryBuilder ExceptStaffRole()
        {
            return ExceptField("staffRole");
        }

        public MediaEdgeQueryBuilder WithVoiceActors(StaffQueryBuilder staffQueryBuilder, QueryBuilderParameter<StaffLanguage?> language = null, QueryBuilderParameter<IEnumerable<StaffSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (language != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "language", ArgumentValue = language} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("voiceActors", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MediaEdgeQueryBuilder ExceptVoiceActors()
        {
            return ExceptField("voiceActors");
        }

        public MediaEdgeQueryBuilder WithVoiceActorRoles(StaffRoleTypeQueryBuilder staffRoleTypeQueryBuilder, QueryBuilderParameter<StaffLanguage?> language = null, QueryBuilderParameter<IEnumerable<StaffSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (language != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "language", ArgumentValue = language} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("voiceActorRoles", alias, staffRoleTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MediaEdgeQueryBuilder ExceptVoiceActorRoles()
        {
            return ExceptField("voiceActorRoles");
        }

        public MediaEdgeQueryBuilder WithFavouriteOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("favouriteOrder", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaEdgeQueryBuilder ExceptFavouriteOrder()
        {
            return ExceptField("favouriteOrder");
        }
    }

    public class MediaQueryBuilder : GraphQlQueryBuilder<MediaQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "idMal" },
                new FieldMetadata { Name = "title", IsComplex = true, QueryBuilderType = typeof(MediaTitleQueryBuilder) },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "format" },
                new FieldMetadata { Name = "status" },
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "startDate", IsComplex = true, QueryBuilderType = typeof(FuzzyDateQueryBuilder) },
                new FieldMetadata { Name = "endDate", IsComplex = true, QueryBuilderType = typeof(FuzzyDateQueryBuilder) },
                new FieldMetadata { Name = "season" },
                new FieldMetadata { Name = "seasonYear" },
                new FieldMetadata { Name = "seasonInt" },
                new FieldMetadata { Name = "episodes" },
                new FieldMetadata { Name = "duration" },
                new FieldMetadata { Name = "chapters" },
                new FieldMetadata { Name = "volumes" },
                new FieldMetadata { Name = "countryOfOrigin", IsComplex = true },
                new FieldMetadata { Name = "isLicensed" },
                new FieldMetadata { Name = "source" },
                new FieldMetadata { Name = "hashtag" },
                new FieldMetadata { Name = "trailer", IsComplex = true, QueryBuilderType = typeof(MediaTrailerQueryBuilder) },
                new FieldMetadata { Name = "updatedAt" },
                new FieldMetadata { Name = "coverImage", IsComplex = true, QueryBuilderType = typeof(MediaCoverImageQueryBuilder) },
                new FieldMetadata { Name = "bannerImage" },
                new FieldMetadata { Name = "genres", IsComplex = true },
                new FieldMetadata { Name = "synonyms", IsComplex = true },
                new FieldMetadata { Name = "averageScore" },
                new FieldMetadata { Name = "meanScore" },
                new FieldMetadata { Name = "popularity" },
                new FieldMetadata { Name = "isLocked" },
                new FieldMetadata { Name = "trending" },
                new FieldMetadata { Name = "favourites" },
                new FieldMetadata { Name = "tags", IsComplex = true, QueryBuilderType = typeof(MediaTagQueryBuilder) },
                new FieldMetadata { Name = "relations", IsComplex = true, QueryBuilderType = typeof(MediaConnectionQueryBuilder) },
                new FieldMetadata { Name = "characters", IsComplex = true, QueryBuilderType = typeof(CharacterConnectionQueryBuilder) },
                new FieldMetadata { Name = "staff", IsComplex = true, QueryBuilderType = typeof(StaffConnectionQueryBuilder) },
                new FieldMetadata { Name = "studios", IsComplex = true, QueryBuilderType = typeof(StudioConnectionQueryBuilder) },
                new FieldMetadata { Name = "isFavourite" },
                new FieldMetadata { Name = "isAdult" },
                new FieldMetadata { Name = "nextAiringEpisode", IsComplex = true, QueryBuilderType = typeof(AiringScheduleQueryBuilder) },
                new FieldMetadata { Name = "airingSchedule", IsComplex = true, QueryBuilderType = typeof(AiringScheduleConnectionQueryBuilder) },
                new FieldMetadata { Name = "trends", IsComplex = true, QueryBuilderType = typeof(MediaTrendConnectionQueryBuilder) },
                new FieldMetadata { Name = "externalLinks", IsComplex = true, QueryBuilderType = typeof(MediaExternalLinkQueryBuilder) },
                new FieldMetadata { Name = "streamingEpisodes", IsComplex = true, QueryBuilderType = typeof(MediaStreamingEpisodeQueryBuilder) },
                new FieldMetadata { Name = "rankings", IsComplex = true, QueryBuilderType = typeof(MediaRankQueryBuilder) },
                new FieldMetadata { Name = "mediaListEntry", IsComplex = true, QueryBuilderType = typeof(MediaListQueryBuilder) },
                new FieldMetadata { Name = "reviews", IsComplex = true, QueryBuilderType = typeof(ReviewConnectionQueryBuilder) },
                new FieldMetadata { Name = "recommendations", IsComplex = true, QueryBuilderType = typeof(RecommendationConnectionQueryBuilder) },
                new FieldMetadata { Name = "stats", IsComplex = true, QueryBuilderType = typeof(MediaStatsQueryBuilder) },
                new FieldMetadata { Name = "siteUrl" },
                new FieldMetadata { Name = "autoCreateForumThread" },
                new FieldMetadata { Name = "isRecommendationBlocked" },
                new FieldMetadata { Name = "modNotes" }
            };

        protected override string TypeName { get { return "Media"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MediaQueryBuilder WithIdMal(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("idMal", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptIdMal()
        {
            return ExceptField("idMal");
        }

        public MediaQueryBuilder WithTitle(MediaTitleQueryBuilder mediaTitleQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("title", alias, mediaTitleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public MediaQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public MediaQueryBuilder WithFormat(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("format", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptFormat()
        {
            return ExceptField("format");
        }

        public MediaQueryBuilder WithStatus(QueryBuilderParameter<int?> version = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (version != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "version", ArgumentValue = version} );

            return WithScalarField("status", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public MediaQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }

        public MediaQueryBuilder WithDescription(QueryBuilderParameter<bool?> asHtml = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (asHtml != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "asHtml", ArgumentValue = asHtml} );

            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public MediaQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public MediaQueryBuilder WithStartDate(FuzzyDateQueryBuilder fuzzyDateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("startDate", alias, fuzzyDateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptStartDate()
        {
            return ExceptField("startDate");
        }

        public MediaQueryBuilder WithEndDate(FuzzyDateQueryBuilder fuzzyDateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("endDate", alias, fuzzyDateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptEndDate()
        {
            return ExceptField("endDate");
        }

        public MediaQueryBuilder WithSeason(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("season", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptSeason()
        {
            return ExceptField("season");
        }

        public MediaQueryBuilder WithSeasonYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seasonYear", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptSeasonYear()
        {
            return ExceptField("seasonYear");
        }

        public MediaQueryBuilder WithSeasonInt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seasonInt", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptSeasonInt()
        {
            return ExceptField("seasonInt");
        }

        public MediaQueryBuilder WithEpisodes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("episodes", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptEpisodes()
        {
            return ExceptField("episodes");
        }

        public MediaQueryBuilder WithDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("duration", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptDuration()
        {
            return ExceptField("duration");
        }

        public MediaQueryBuilder WithChapters(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chapters", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptChapters()
        {
            return ExceptField("chapters");
        }

        public MediaQueryBuilder WithVolumes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("volumes", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptVolumes()
        {
            return ExceptField("volumes");
        }

        public MediaQueryBuilder WithCountryOfOrigin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countryOfOrigin", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptCountryOfOrigin()
        {
            return ExceptField("countryOfOrigin");
        }

        public MediaQueryBuilder WithIsLicensed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLicensed", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptIsLicensed()
        {
            return ExceptField("isLicensed");
        }

        public MediaQueryBuilder WithSource(QueryBuilderParameter<int?> version = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (version != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "version", ArgumentValue = version} );

            return WithScalarField("source", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public MediaQueryBuilder ExceptSource()
        {
            return ExceptField("source");
        }

        public MediaQueryBuilder WithHashtag(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hashtag", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptHashtag()
        {
            return ExceptField("hashtag");
        }

        public MediaQueryBuilder WithTrailer(MediaTrailerQueryBuilder mediaTrailerQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("trailer", alias, mediaTrailerQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptTrailer()
        {
            return ExceptField("trailer");
        }

        public MediaQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public MediaQueryBuilder WithCoverImage(MediaCoverImageQueryBuilder mediaCoverImageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("coverImage", alias, mediaCoverImageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptCoverImage()
        {
            return ExceptField("coverImage");
        }

        public MediaQueryBuilder WithBannerImage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bannerImage", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptBannerImage()
        {
            return ExceptField("bannerImage");
        }

        public MediaQueryBuilder WithGenres(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("genres", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptGenres()
        {
            return ExceptField("genres");
        }

        public MediaQueryBuilder WithSynonyms(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("synonyms", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptSynonyms()
        {
            return ExceptField("synonyms");
        }

        public MediaQueryBuilder WithAverageScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("averageScore", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptAverageScore()
        {
            return ExceptField("averageScore");
        }

        public MediaQueryBuilder WithMeanScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meanScore", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptMeanScore()
        {
            return ExceptField("meanScore");
        }

        public MediaQueryBuilder WithPopularity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("popularity", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptPopularity()
        {
            return ExceptField("popularity");
        }

        public MediaQueryBuilder WithIsLocked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLocked", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptIsLocked()
        {
            return ExceptField("isLocked");
        }

        public MediaQueryBuilder WithTrending(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("trending", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptTrending()
        {
            return ExceptField("trending");
        }

        public MediaQueryBuilder WithFavourites(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("favourites", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptFavourites()
        {
            return ExceptField("favourites");
        }

        public MediaQueryBuilder WithTags(MediaTagQueryBuilder mediaTagQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("tags", alias, mediaTagQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptTags()
        {
            return ExceptField("tags");
        }

        public MediaQueryBuilder WithRelations(MediaConnectionQueryBuilder mediaConnectionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("relations", alias, mediaConnectionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptRelations()
        {
            return ExceptField("relations");
        }

        public MediaQueryBuilder WithCharacters(CharacterConnectionQueryBuilder characterConnectionQueryBuilder, QueryBuilderParameter<IEnumerable<CharacterSort?>> sort = null, QueryBuilderParameter<CharacterRole?> role = null, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (role != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "role", ArgumentValue = role} );

            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("characters", alias, characterConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MediaQueryBuilder ExceptCharacters()
        {
            return ExceptField("characters");
        }

        public MediaQueryBuilder WithStaff(StaffConnectionQueryBuilder staffConnectionQueryBuilder, QueryBuilderParameter<IEnumerable<StaffSort?>> sort = null, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("staff", alias, staffConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MediaQueryBuilder ExceptStaff()
        {
            return ExceptField("staff");
        }

        public MediaQueryBuilder WithStudios(StudioConnectionQueryBuilder studioConnectionQueryBuilder, QueryBuilderParameter<IEnumerable<StudioSort?>> sort = null, QueryBuilderParameter<bool?> isMain = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (isMain != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isMain", ArgumentValue = isMain} );

            return WithObjectField("studios", alias, studioConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MediaQueryBuilder ExceptStudios()
        {
            return ExceptField("studios");
        }

        public MediaQueryBuilder WithIsFavourite(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isFavourite", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptIsFavourite()
        {
            return ExceptField("isFavourite");
        }

        public MediaQueryBuilder WithIsAdult(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAdult", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptIsAdult()
        {
            return ExceptField("isAdult");
        }

        public MediaQueryBuilder WithNextAiringEpisode(AiringScheduleQueryBuilder airingScheduleQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nextAiringEpisode", alias, airingScheduleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptNextAiringEpisode()
        {
            return ExceptField("nextAiringEpisode");
        }

        public MediaQueryBuilder WithAiringSchedule(AiringScheduleConnectionQueryBuilder airingScheduleConnectionQueryBuilder, QueryBuilderParameter<bool?> notYetAired = null, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (notYetAired != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "notYetAired", ArgumentValue = notYetAired} );

            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("airingSchedule", alias, airingScheduleConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MediaQueryBuilder ExceptAiringSchedule()
        {
            return ExceptField("airingSchedule");
        }

        public MediaQueryBuilder WithTrends(MediaTrendConnectionQueryBuilder mediaTrendConnectionQueryBuilder, QueryBuilderParameter<IEnumerable<MediaTrendSort?>> sort = null, QueryBuilderParameter<bool?> releasing = null, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (releasing != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "releasing", ArgumentValue = releasing} );

            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("trends", alias, mediaTrendConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MediaQueryBuilder ExceptTrends()
        {
            return ExceptField("trends");
        }

        public MediaQueryBuilder WithExternalLinks(MediaExternalLinkQueryBuilder mediaExternalLinkQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("externalLinks", alias, mediaExternalLinkQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptExternalLinks()
        {
            return ExceptField("externalLinks");
        }

        public MediaQueryBuilder WithStreamingEpisodes(MediaStreamingEpisodeQueryBuilder mediaStreamingEpisodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("streamingEpisodes", alias, mediaStreamingEpisodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptStreamingEpisodes()
        {
            return ExceptField("streamingEpisodes");
        }

        public MediaQueryBuilder WithRankings(MediaRankQueryBuilder mediaRankQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("rankings", alias, mediaRankQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptRankings()
        {
            return ExceptField("rankings");
        }

        public MediaQueryBuilder WithMediaListEntry(MediaListQueryBuilder mediaListQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mediaListEntry", alias, mediaListQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptMediaListEntry()
        {
            return ExceptField("mediaListEntry");
        }

        public MediaQueryBuilder WithReviews(ReviewConnectionQueryBuilder reviewConnectionQueryBuilder, QueryBuilderParameter<int?> limit = null, QueryBuilderParameter<IEnumerable<ReviewSort?>> sort = null, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (limit != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "limit", ArgumentValue = limit} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("reviews", alias, reviewConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MediaQueryBuilder ExceptReviews()
        {
            return ExceptField("reviews");
        }

        public MediaQueryBuilder WithRecommendations(RecommendationConnectionQueryBuilder recommendationConnectionQueryBuilder, QueryBuilderParameter<IEnumerable<RecommendationSort?>> sort = null, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("recommendations", alias, recommendationConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MediaQueryBuilder ExceptRecommendations()
        {
            return ExceptField("recommendations");
        }

        public MediaQueryBuilder WithStats(MediaStatsQueryBuilder mediaStatsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("stats", alias, mediaStatsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptStats()
        {
            return ExceptField("stats");
        }

        public MediaQueryBuilder WithSiteUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("siteUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptSiteUrl()
        {
            return ExceptField("siteUrl");
        }

        public MediaQueryBuilder WithAutoCreateForumThread(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("autoCreateForumThread", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptAutoCreateForumThread()
        {
            return ExceptField("autoCreateForumThread");
        }

        public MediaQueryBuilder WithIsRecommendationBlocked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRecommendationBlocked", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptIsRecommendationBlocked()
        {
            return ExceptField("isRecommendationBlocked");
        }

        public MediaQueryBuilder WithModNotes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("modNotes", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaQueryBuilder ExceptModNotes()
        {
            return ExceptField("modNotes");
        }
    }

    public class MediaTitleQueryBuilder : GraphQlQueryBuilder<MediaTitleQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "romaji" },
                new FieldMetadata { Name = "english" },
                new FieldMetadata { Name = "native" },
                new FieldMetadata { Name = "userPreferred" }
            };

        protected override string TypeName { get { return "MediaTitle"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaTitleQueryBuilder WithRomaji(QueryBuilderParameter<bool?> stylised = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (stylised != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "stylised", ArgumentValue = stylised} );

            return WithScalarField("romaji", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public MediaTitleQueryBuilder ExceptRomaji()
        {
            return ExceptField("romaji");
        }

        public MediaTitleQueryBuilder WithEnglish(QueryBuilderParameter<bool?> stylised = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (stylised != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "stylised", ArgumentValue = stylised} );

            return WithScalarField("english", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public MediaTitleQueryBuilder ExceptEnglish()
        {
            return ExceptField("english");
        }

        public MediaTitleQueryBuilder WithNative(QueryBuilderParameter<bool?> stylised = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (stylised != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "stylised", ArgumentValue = stylised} );

            return WithScalarField("native", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public MediaTitleQueryBuilder ExceptNative()
        {
            return ExceptField("native");
        }

        public MediaTitleQueryBuilder WithUserPreferred(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userPreferred", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaTitleQueryBuilder ExceptUserPreferred()
        {
            return ExceptField("userPreferred");
        }
    }

    public class FuzzyDateQueryBuilder : GraphQlQueryBuilder<FuzzyDateQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "year" },
                new FieldMetadata { Name = "month" },
                new FieldMetadata { Name = "day" }
            };

        protected override string TypeName { get { return "FuzzyDate"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FuzzyDateQueryBuilder WithYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("year", alias, new GraphQlDirective[] { include, skip });
        }

        public FuzzyDateQueryBuilder ExceptYear()
        {
            return ExceptField("year");
        }

        public FuzzyDateQueryBuilder WithMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("month", alias, new GraphQlDirective[] { include, skip });
        }

        public FuzzyDateQueryBuilder ExceptMonth()
        {
            return ExceptField("month");
        }

        public FuzzyDateQueryBuilder WithDay(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("day", alias, new GraphQlDirective[] { include, skip });
        }

        public FuzzyDateQueryBuilder ExceptDay()
        {
            return ExceptField("day");
        }
    }

    public class MediaTrailerQueryBuilder : GraphQlQueryBuilder<MediaTrailerQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "site" },
                new FieldMetadata { Name = "thumbnail" }
            };

        protected override string TypeName { get { return "MediaTrailer"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaTrailerQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaTrailerQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MediaTrailerQueryBuilder WithSite(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("site", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaTrailerQueryBuilder ExceptSite()
        {
            return ExceptField("site");
        }

        public MediaTrailerQueryBuilder WithThumbnail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("thumbnail", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaTrailerQueryBuilder ExceptThumbnail()
        {
            return ExceptField("thumbnail");
        }
    }

    public class MediaCoverImageQueryBuilder : GraphQlQueryBuilder<MediaCoverImageQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "extraLarge" },
                new FieldMetadata { Name = "large" },
                new FieldMetadata { Name = "medium" },
                new FieldMetadata { Name = "color" }
            };

        protected override string TypeName { get { return "MediaCoverImage"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaCoverImageQueryBuilder WithExtraLarge(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("extraLarge", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaCoverImageQueryBuilder ExceptExtraLarge()
        {
            return ExceptField("extraLarge");
        }

        public MediaCoverImageQueryBuilder WithLarge(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("large", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaCoverImageQueryBuilder ExceptLarge()
        {
            return ExceptField("large");
        }

        public MediaCoverImageQueryBuilder WithMedium(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("medium", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaCoverImageQueryBuilder ExceptMedium()
        {
            return ExceptField("medium");
        }

        public MediaCoverImageQueryBuilder WithColor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("color", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaCoverImageQueryBuilder ExceptColor()
        {
            return ExceptField("color");
        }
    }

    public class MediaTagQueryBuilder : GraphQlQueryBuilder<MediaTagQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "category" },
                new FieldMetadata { Name = "rank" },
                new FieldMetadata { Name = "isGeneralSpoiler" },
                new FieldMetadata { Name = "isMediaSpoiler" },
                new FieldMetadata { Name = "isAdult" }
            };

        protected override string TypeName { get { return "MediaTag"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaTagQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaTagQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MediaTagQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaTagQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public MediaTagQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaTagQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public MediaTagQueryBuilder WithCategory(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("category", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaTagQueryBuilder ExceptCategory()
        {
            return ExceptField("category");
        }

        public MediaTagQueryBuilder WithRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rank", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaTagQueryBuilder ExceptRank()
        {
            return ExceptField("rank");
        }

        public MediaTagQueryBuilder WithIsGeneralSpoiler(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isGeneralSpoiler", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaTagQueryBuilder ExceptIsGeneralSpoiler()
        {
            return ExceptField("isGeneralSpoiler");
        }

        public MediaTagQueryBuilder WithIsMediaSpoiler(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isMediaSpoiler", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaTagQueryBuilder ExceptIsMediaSpoiler()
        {
            return ExceptField("isMediaSpoiler");
        }

        public MediaTagQueryBuilder WithIsAdult(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAdult", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaTagQueryBuilder ExceptIsAdult()
        {
            return ExceptField("isAdult");
        }
    }

    public class CharacterConnectionQueryBuilder : GraphQlQueryBuilder<CharacterConnectionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(CharacterEdgeQueryBuilder) },
                new FieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(CharacterQueryBuilder) },
                new FieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "CharacterConnection"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CharacterConnectionQueryBuilder WithEdges(CharacterEdgeQueryBuilder characterEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, characterEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CharacterConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public CharacterConnectionQueryBuilder WithNodes(CharacterQueryBuilder characterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, characterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CharacterConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public CharacterConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CharacterConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class CharacterEdgeQueryBuilder : GraphQlQueryBuilder<CharacterEdgeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(CharacterQueryBuilder) },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "role" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "voiceActors", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) },
                new FieldMetadata { Name = "voiceActorRoles", IsComplex = true, QueryBuilderType = typeof(StaffRoleTypeQueryBuilder) },
                new FieldMetadata { Name = "media", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) },
                new FieldMetadata { Name = "favouriteOrder" }
            };

        protected override string TypeName { get { return "CharacterEdge"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CharacterEdgeQueryBuilder WithNode(CharacterQueryBuilder characterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, characterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CharacterEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }

        public CharacterEdgeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterEdgeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public CharacterEdgeQueryBuilder WithRole(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("role", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterEdgeQueryBuilder ExceptRole()
        {
            return ExceptField("role");
        }

        public CharacterEdgeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterEdgeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public CharacterEdgeQueryBuilder WithVoiceActors(StaffQueryBuilder staffQueryBuilder, QueryBuilderParameter<StaffLanguage?> language = null, QueryBuilderParameter<IEnumerable<StaffSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (language != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "language", ArgumentValue = language} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("voiceActors", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CharacterEdgeQueryBuilder ExceptVoiceActors()
        {
            return ExceptField("voiceActors");
        }

        public CharacterEdgeQueryBuilder WithVoiceActorRoles(StaffRoleTypeQueryBuilder staffRoleTypeQueryBuilder, QueryBuilderParameter<StaffLanguage?> language = null, QueryBuilderParameter<IEnumerable<StaffSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (language != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "language", ArgumentValue = language} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("voiceActorRoles", alias, staffRoleTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CharacterEdgeQueryBuilder ExceptVoiceActorRoles()
        {
            return ExceptField("voiceActorRoles");
        }

        public CharacterEdgeQueryBuilder WithMedia(MediaQueryBuilder mediaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("media", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CharacterEdgeQueryBuilder ExceptMedia()
        {
            return ExceptField("media");
        }

        public CharacterEdgeQueryBuilder WithFavouriteOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("favouriteOrder", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterEdgeQueryBuilder ExceptFavouriteOrder()
        {
            return ExceptField("favouriteOrder");
        }
    }

    public class CharacterQueryBuilder : GraphQlQueryBuilder<CharacterQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "name", IsComplex = true, QueryBuilderType = typeof(CharacterNameQueryBuilder) },
                new FieldMetadata { Name = "image", IsComplex = true, QueryBuilderType = typeof(CharacterImageQueryBuilder) },
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "gender" },
                new FieldMetadata { Name = "dateOfBirth", IsComplex = true, QueryBuilderType = typeof(FuzzyDateQueryBuilder) },
                new FieldMetadata { Name = "age" },
                new FieldMetadata { Name = "bloodType" },
                new FieldMetadata { Name = "isFavourite" },
                new FieldMetadata { Name = "isFavouriteBlocked" },
                new FieldMetadata { Name = "siteUrl" },
                new FieldMetadata { Name = "media", IsComplex = true, QueryBuilderType = typeof(MediaConnectionQueryBuilder) },
                new FieldMetadata { Name = "favourites" },
                new FieldMetadata { Name = "modNotes" }
            };

        protected override string TypeName { get { return "Character"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CharacterQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public CharacterQueryBuilder WithName(CharacterNameQueryBuilder characterNameQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("name", alias, characterNameQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CharacterQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public CharacterQueryBuilder WithImage(CharacterImageQueryBuilder characterImageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("image", alias, characterImageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CharacterQueryBuilder ExceptImage()
        {
            return ExceptField("image");
        }

        public CharacterQueryBuilder WithDescription(QueryBuilderParameter<bool?> asHtml = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (asHtml != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "asHtml", ArgumentValue = asHtml} );

            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public CharacterQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public CharacterQueryBuilder WithGender(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gender", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterQueryBuilder ExceptGender()
        {
            return ExceptField("gender");
        }

        public CharacterQueryBuilder WithDateOfBirth(FuzzyDateQueryBuilder fuzzyDateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("dateOfBirth", alias, fuzzyDateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CharacterQueryBuilder ExceptDateOfBirth()
        {
            return ExceptField("dateOfBirth");
        }

        public CharacterQueryBuilder WithAge(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("age", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterQueryBuilder ExceptAge()
        {
            return ExceptField("age");
        }

        public CharacterQueryBuilder WithBloodType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bloodType", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterQueryBuilder ExceptBloodType()
        {
            return ExceptField("bloodType");
        }

        public CharacterQueryBuilder WithIsFavourite(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isFavourite", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterQueryBuilder ExceptIsFavourite()
        {
            return ExceptField("isFavourite");
        }

        public CharacterQueryBuilder WithIsFavouriteBlocked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isFavouriteBlocked", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterQueryBuilder ExceptIsFavouriteBlocked()
        {
            return ExceptField("isFavouriteBlocked");
        }

        public CharacterQueryBuilder WithSiteUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("siteUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterQueryBuilder ExceptSiteUrl()
        {
            return ExceptField("siteUrl");
        }

        public CharacterQueryBuilder WithMedia(MediaConnectionQueryBuilder mediaConnectionQueryBuilder, QueryBuilderParameter<IEnumerable<MediaSort?>> sort = null, QueryBuilderParameter<MediaType?> type = null, QueryBuilderParameter<bool?> onList = null, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            if (onList != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "onList", ArgumentValue = onList} );

            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("media", alias, mediaConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CharacterQueryBuilder ExceptMedia()
        {
            return ExceptField("media");
        }

        public CharacterQueryBuilder WithFavourites(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("favourites", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterQueryBuilder ExceptFavourites()
        {
            return ExceptField("favourites");
        }

        public CharacterQueryBuilder WithModNotes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("modNotes", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterQueryBuilder ExceptModNotes()
        {
            return ExceptField("modNotes");
        }
    }

    public class CharacterNameQueryBuilder : GraphQlQueryBuilder<CharacterNameQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "first" },
                new FieldMetadata { Name = "middle" },
                new FieldMetadata { Name = "last" },
                new FieldMetadata { Name = "full" },
                new FieldMetadata { Name = "native" },
                new FieldMetadata { Name = "alternative", IsComplex = true },
                new FieldMetadata { Name = "alternativeSpoiler", IsComplex = true },
                new FieldMetadata { Name = "userPreferred" }
            };

        protected override string TypeName { get { return "CharacterName"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CharacterNameQueryBuilder WithFirst(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("first", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterNameQueryBuilder ExceptFirst()
        {
            return ExceptField("first");
        }

        public CharacterNameQueryBuilder WithMiddle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("middle", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterNameQueryBuilder ExceptMiddle()
        {
            return ExceptField("middle");
        }

        public CharacterNameQueryBuilder WithLast(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("last", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterNameQueryBuilder ExceptLast()
        {
            return ExceptField("last");
        }

        public CharacterNameQueryBuilder WithFull(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("full", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterNameQueryBuilder ExceptFull()
        {
            return ExceptField("full");
        }

        public CharacterNameQueryBuilder WithNative(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("native", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterNameQueryBuilder ExceptNative()
        {
            return ExceptField("native");
        }

        public CharacterNameQueryBuilder WithAlternative(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("alternative", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterNameQueryBuilder ExceptAlternative()
        {
            return ExceptField("alternative");
        }

        public CharacterNameQueryBuilder WithAlternativeSpoiler(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("alternativeSpoiler", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterNameQueryBuilder ExceptAlternativeSpoiler()
        {
            return ExceptField("alternativeSpoiler");
        }

        public CharacterNameQueryBuilder WithUserPreferred(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userPreferred", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterNameQueryBuilder ExceptUserPreferred()
        {
            return ExceptField("userPreferred");
        }
    }

    public class CharacterImageQueryBuilder : GraphQlQueryBuilder<CharacterImageQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "large" },
                new FieldMetadata { Name = "medium" }
            };

        protected override string TypeName { get { return "CharacterImage"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CharacterImageQueryBuilder WithLarge(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("large", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterImageQueryBuilder ExceptLarge()
        {
            return ExceptField("large");
        }

        public CharacterImageQueryBuilder WithMedium(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("medium", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterImageQueryBuilder ExceptMedium()
        {
            return ExceptField("medium");
        }
    }

    public class StaffQueryBuilder : GraphQlQueryBuilder<StaffQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "name", IsComplex = true, QueryBuilderType = typeof(StaffNameQueryBuilder) },
                new FieldMetadata { Name = "languageV2" },
                new FieldMetadata { Name = "image", IsComplex = true, QueryBuilderType = typeof(StaffImageQueryBuilder) },
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "primaryOccupations", IsComplex = true },
                new FieldMetadata { Name = "gender" },
                new FieldMetadata { Name = "dateOfBirth", IsComplex = true, QueryBuilderType = typeof(FuzzyDateQueryBuilder) },
                new FieldMetadata { Name = "dateOfDeath", IsComplex = true, QueryBuilderType = typeof(FuzzyDateQueryBuilder) },
                new FieldMetadata { Name = "age" },
                new FieldMetadata { Name = "yearsActive", IsComplex = true },
                new FieldMetadata { Name = "homeTown" },
                new FieldMetadata { Name = "bloodType" },
                new FieldMetadata { Name = "isFavourite" },
                new FieldMetadata { Name = "isFavouriteBlocked" },
                new FieldMetadata { Name = "siteUrl" },
                new FieldMetadata { Name = "staffMedia", IsComplex = true, QueryBuilderType = typeof(MediaConnectionQueryBuilder) },
                new FieldMetadata { Name = "characters", IsComplex = true, QueryBuilderType = typeof(CharacterConnectionQueryBuilder) },
                new FieldMetadata { Name = "characterMedia", IsComplex = true, QueryBuilderType = typeof(MediaConnectionQueryBuilder) },
                new FieldMetadata { Name = "staff", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) },
                new FieldMetadata { Name = "submitter", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "submissionStatus" },
                new FieldMetadata { Name = "submissionNotes" },
                new FieldMetadata { Name = "favourites" },
                new FieldMetadata { Name = "modNotes" }
            };

        protected override string TypeName { get { return "Staff"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StaffQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public StaffQueryBuilder WithName(StaffNameQueryBuilder staffNameQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("name", alias, staffNameQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public StaffQueryBuilder WithLanguageV2(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("languageV2", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptLanguageV2()
        {
            return ExceptField("languageV2");
        }

        public StaffQueryBuilder WithImage(StaffImageQueryBuilder staffImageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("image", alias, staffImageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptImage()
        {
            return ExceptField("image");
        }

        public StaffQueryBuilder WithDescription(QueryBuilderParameter<bool?> asHtml = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (asHtml != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "asHtml", ArgumentValue = asHtml} );

            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public StaffQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public StaffQueryBuilder WithPrimaryOccupations(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("primaryOccupations", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptPrimaryOccupations()
        {
            return ExceptField("primaryOccupations");
        }

        public StaffQueryBuilder WithGender(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gender", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptGender()
        {
            return ExceptField("gender");
        }

        public StaffQueryBuilder WithDateOfBirth(FuzzyDateQueryBuilder fuzzyDateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("dateOfBirth", alias, fuzzyDateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptDateOfBirth()
        {
            return ExceptField("dateOfBirth");
        }

        public StaffQueryBuilder WithDateOfDeath(FuzzyDateQueryBuilder fuzzyDateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("dateOfDeath", alias, fuzzyDateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptDateOfDeath()
        {
            return ExceptField("dateOfDeath");
        }

        public StaffQueryBuilder WithAge(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("age", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptAge()
        {
            return ExceptField("age");
        }

        public StaffQueryBuilder WithYearsActive(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("yearsActive", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptYearsActive()
        {
            return ExceptField("yearsActive");
        }

        public StaffQueryBuilder WithHomeTown(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("homeTown", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptHomeTown()
        {
            return ExceptField("homeTown");
        }

        public StaffQueryBuilder WithBloodType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bloodType", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptBloodType()
        {
            return ExceptField("bloodType");
        }

        public StaffQueryBuilder WithIsFavourite(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isFavourite", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptIsFavourite()
        {
            return ExceptField("isFavourite");
        }

        public StaffQueryBuilder WithIsFavouriteBlocked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isFavouriteBlocked", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptIsFavouriteBlocked()
        {
            return ExceptField("isFavouriteBlocked");
        }

        public StaffQueryBuilder WithSiteUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("siteUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptSiteUrl()
        {
            return ExceptField("siteUrl");
        }

        public StaffQueryBuilder WithStaffMedia(MediaConnectionQueryBuilder mediaConnectionQueryBuilder, QueryBuilderParameter<IEnumerable<MediaSort?>> sort = null, QueryBuilderParameter<MediaType?> type = null, QueryBuilderParameter<bool?> onList = null, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            if (onList != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "onList", ArgumentValue = onList} );

            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("staffMedia", alias, mediaConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public StaffQueryBuilder ExceptStaffMedia()
        {
            return ExceptField("staffMedia");
        }

        public StaffQueryBuilder WithCharacters(CharacterConnectionQueryBuilder characterConnectionQueryBuilder, QueryBuilderParameter<IEnumerable<CharacterSort?>> sort = null, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("characters", alias, characterConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public StaffQueryBuilder ExceptCharacters()
        {
            return ExceptField("characters");
        }

        public StaffQueryBuilder WithCharacterMedia(MediaConnectionQueryBuilder mediaConnectionQueryBuilder, QueryBuilderParameter<IEnumerable<MediaSort?>> sort = null, QueryBuilderParameter<bool?> onList = null, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (onList != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "onList", ArgumentValue = onList} );

            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("characterMedia", alias, mediaConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public StaffQueryBuilder ExceptCharacterMedia()
        {
            return ExceptField("characterMedia");
        }

        public StaffQueryBuilder WithStaff(StaffQueryBuilder staffQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("staff", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptStaff()
        {
            return ExceptField("staff");
        }

        public StaffQueryBuilder WithSubmitter(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("submitter", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptSubmitter()
        {
            return ExceptField("submitter");
        }

        public StaffQueryBuilder WithSubmissionStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("submissionStatus", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptSubmissionStatus()
        {
            return ExceptField("submissionStatus");
        }

        public StaffQueryBuilder WithSubmissionNotes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("submissionNotes", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptSubmissionNotes()
        {
            return ExceptField("submissionNotes");
        }

        public StaffQueryBuilder WithFavourites(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("favourites", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptFavourites()
        {
            return ExceptField("favourites");
        }

        public StaffQueryBuilder WithModNotes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("modNotes", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffQueryBuilder ExceptModNotes()
        {
            return ExceptField("modNotes");
        }
    }

    public class StaffNameQueryBuilder : GraphQlQueryBuilder<StaffNameQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "first" },
                new FieldMetadata { Name = "middle" },
                new FieldMetadata { Name = "last" },
                new FieldMetadata { Name = "full" },
                new FieldMetadata { Name = "native" },
                new FieldMetadata { Name = "alternative", IsComplex = true },
                new FieldMetadata { Name = "userPreferred" }
            };

        protected override string TypeName { get { return "StaffName"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StaffNameQueryBuilder WithFirst(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("first", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffNameQueryBuilder ExceptFirst()
        {
            return ExceptField("first");
        }

        public StaffNameQueryBuilder WithMiddle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("middle", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffNameQueryBuilder ExceptMiddle()
        {
            return ExceptField("middle");
        }

        public StaffNameQueryBuilder WithLast(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("last", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffNameQueryBuilder ExceptLast()
        {
            return ExceptField("last");
        }

        public StaffNameQueryBuilder WithFull(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("full", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffNameQueryBuilder ExceptFull()
        {
            return ExceptField("full");
        }

        public StaffNameQueryBuilder WithNative(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("native", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffNameQueryBuilder ExceptNative()
        {
            return ExceptField("native");
        }

        public StaffNameQueryBuilder WithAlternative(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("alternative", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffNameQueryBuilder ExceptAlternative()
        {
            return ExceptField("alternative");
        }

        public StaffNameQueryBuilder WithUserPreferred(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userPreferred", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffNameQueryBuilder ExceptUserPreferred()
        {
            return ExceptField("userPreferred");
        }
    }

    public class StaffImageQueryBuilder : GraphQlQueryBuilder<StaffImageQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "large" },
                new FieldMetadata { Name = "medium" }
            };

        protected override string TypeName { get { return "StaffImage"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StaffImageQueryBuilder WithLarge(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("large", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffImageQueryBuilder ExceptLarge()
        {
            return ExceptField("large");
        }

        public StaffImageQueryBuilder WithMedium(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("medium", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffImageQueryBuilder ExceptMedium()
        {
            return ExceptField("medium");
        }
    }

    public class StaffRoleTypeQueryBuilder : GraphQlQueryBuilder<StaffRoleTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "voiceActor", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) },
                new FieldMetadata { Name = "roleNotes" },
                new FieldMetadata { Name = "dubGroup" }
            };

        protected override string TypeName { get { return "StaffRoleType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StaffRoleTypeQueryBuilder WithVoiceActor(StaffQueryBuilder staffQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("voiceActor", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StaffRoleTypeQueryBuilder ExceptVoiceActor()
        {
            return ExceptField("voiceActor");
        }

        public StaffRoleTypeQueryBuilder WithRoleNotes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roleNotes", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffRoleTypeQueryBuilder ExceptRoleNotes()
        {
            return ExceptField("roleNotes");
        }

        public StaffRoleTypeQueryBuilder WithDubGroup(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dubGroup", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffRoleTypeQueryBuilder ExceptDubGroup()
        {
            return ExceptField("dubGroup");
        }
    }

    public class StaffConnectionQueryBuilder : GraphQlQueryBuilder<StaffConnectionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(StaffEdgeQueryBuilder) },
                new FieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) },
                new FieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "StaffConnection"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StaffConnectionQueryBuilder WithEdges(StaffEdgeQueryBuilder staffEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, staffEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StaffConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public StaffConnectionQueryBuilder WithNodes(StaffQueryBuilder staffQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StaffConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public StaffConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StaffConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class StaffEdgeQueryBuilder : GraphQlQueryBuilder<StaffEdgeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "role" },
                new FieldMetadata { Name = "favouriteOrder" }
            };

        protected override string TypeName { get { return "StaffEdge"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StaffEdgeQueryBuilder WithNode(StaffQueryBuilder staffQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StaffEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }

        public StaffEdgeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffEdgeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public StaffEdgeQueryBuilder WithRole(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("role", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffEdgeQueryBuilder ExceptRole()
        {
            return ExceptField("role");
        }

        public StaffEdgeQueryBuilder WithFavouriteOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("favouriteOrder", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffEdgeQueryBuilder ExceptFavouriteOrder()
        {
            return ExceptField("favouriteOrder");
        }
    }

    public class StudioConnectionQueryBuilder : GraphQlQueryBuilder<StudioConnectionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(StudioEdgeQueryBuilder) },
                new FieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(StudioQueryBuilder) },
                new FieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "StudioConnection"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StudioConnectionQueryBuilder WithEdges(StudioEdgeQueryBuilder studioEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, studioEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StudioConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public StudioConnectionQueryBuilder WithNodes(StudioQueryBuilder studioQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, studioQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StudioConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public StudioConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StudioConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class StudioEdgeQueryBuilder : GraphQlQueryBuilder<StudioEdgeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(StudioQueryBuilder) },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "isMain" },
                new FieldMetadata { Name = "favouriteOrder" }
            };

        protected override string TypeName { get { return "StudioEdge"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StudioEdgeQueryBuilder WithNode(StudioQueryBuilder studioQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, studioQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StudioEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }

        public StudioEdgeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public StudioEdgeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public StudioEdgeQueryBuilder WithIsMain(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isMain", alias, new GraphQlDirective[] { include, skip });
        }

        public StudioEdgeQueryBuilder ExceptIsMain()
        {
            return ExceptField("isMain");
        }

        public StudioEdgeQueryBuilder WithFavouriteOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("favouriteOrder", alias, new GraphQlDirective[] { include, skip });
        }

        public StudioEdgeQueryBuilder ExceptFavouriteOrder()
        {
            return ExceptField("favouriteOrder");
        }
    }

    public class StudioQueryBuilder : GraphQlQueryBuilder<StudioQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "isAnimationStudio" },
                new FieldMetadata { Name = "media", IsComplex = true, QueryBuilderType = typeof(MediaConnectionQueryBuilder) },
                new FieldMetadata { Name = "siteUrl" },
                new FieldMetadata { Name = "isFavourite" },
                new FieldMetadata { Name = "favourites" }
            };

        protected override string TypeName { get { return "Studio"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StudioQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public StudioQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public StudioQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public StudioQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public StudioQueryBuilder WithIsAnimationStudio(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAnimationStudio", alias, new GraphQlDirective[] { include, skip });
        }

        public StudioQueryBuilder ExceptIsAnimationStudio()
        {
            return ExceptField("isAnimationStudio");
        }

        public StudioQueryBuilder WithMedia(MediaConnectionQueryBuilder mediaConnectionQueryBuilder, QueryBuilderParameter<IEnumerable<MediaSort?>> sort = null, QueryBuilderParameter<bool?> isMain = null, QueryBuilderParameter<bool?> onList = null, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (isMain != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isMain", ArgumentValue = isMain} );

            if (onList != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "onList", ArgumentValue = onList} );

            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("media", alias, mediaConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public StudioQueryBuilder ExceptMedia()
        {
            return ExceptField("media");
        }

        public StudioQueryBuilder WithSiteUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("siteUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public StudioQueryBuilder ExceptSiteUrl()
        {
            return ExceptField("siteUrl");
        }

        public StudioQueryBuilder WithIsFavourite(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isFavourite", alias, new GraphQlDirective[] { include, skip });
        }

        public StudioQueryBuilder ExceptIsFavourite()
        {
            return ExceptField("isFavourite");
        }

        public StudioQueryBuilder WithFavourites(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("favourites", alias, new GraphQlDirective[] { include, skip });
        }

        public StudioQueryBuilder ExceptFavourites()
        {
            return ExceptField("favourites");
        }
    }

    public class AiringScheduleQueryBuilder : GraphQlQueryBuilder<AiringScheduleQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "airingAt" },
                new FieldMetadata { Name = "timeUntilAiring" },
                new FieldMetadata { Name = "episode" },
                new FieldMetadata { Name = "mediaId" },
                new FieldMetadata { Name = "media", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) }
            };

        protected override string TypeName { get { return "AiringSchedule"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AiringScheduleQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public AiringScheduleQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public AiringScheduleQueryBuilder WithAiringAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("airingAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AiringScheduleQueryBuilder ExceptAiringAt()
        {
            return ExceptField("airingAt");
        }

        public AiringScheduleQueryBuilder WithTimeUntilAiring(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timeUntilAiring", alias, new GraphQlDirective[] { include, skip });
        }

        public AiringScheduleQueryBuilder ExceptTimeUntilAiring()
        {
            return ExceptField("timeUntilAiring");
        }

        public AiringScheduleQueryBuilder WithEpisode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("episode", alias, new GraphQlDirective[] { include, skip });
        }

        public AiringScheduleQueryBuilder ExceptEpisode()
        {
            return ExceptField("episode");
        }

        public AiringScheduleQueryBuilder WithMediaId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaId", alias, new GraphQlDirective[] { include, skip });
        }

        public AiringScheduleQueryBuilder ExceptMediaId()
        {
            return ExceptField("mediaId");
        }

        public AiringScheduleQueryBuilder WithMedia(MediaQueryBuilder mediaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("media", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AiringScheduleQueryBuilder ExceptMedia()
        {
            return ExceptField("media");
        }
    }

    public class AiringScheduleConnectionQueryBuilder : GraphQlQueryBuilder<AiringScheduleConnectionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(AiringScheduleEdgeQueryBuilder) },
                new FieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(AiringScheduleQueryBuilder) },
                new FieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "AiringScheduleConnection"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AiringScheduleConnectionQueryBuilder WithEdges(AiringScheduleEdgeQueryBuilder airingScheduleEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, airingScheduleEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AiringScheduleConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public AiringScheduleConnectionQueryBuilder WithNodes(AiringScheduleQueryBuilder airingScheduleQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, airingScheduleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AiringScheduleConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public AiringScheduleConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AiringScheduleConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class AiringScheduleEdgeQueryBuilder : GraphQlQueryBuilder<AiringScheduleEdgeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(AiringScheduleQueryBuilder) },
                new FieldMetadata { Name = "id" }
            };

        protected override string TypeName { get { return "AiringScheduleEdge"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AiringScheduleEdgeQueryBuilder WithNode(AiringScheduleQueryBuilder airingScheduleQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, airingScheduleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AiringScheduleEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }

        public AiringScheduleEdgeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public AiringScheduleEdgeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }
    }

    public class MediaTrendConnectionQueryBuilder : GraphQlQueryBuilder<MediaTrendConnectionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(MediaTrendEdgeQueryBuilder) },
                new FieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(MediaTrendQueryBuilder) },
                new FieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "MediaTrendConnection"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaTrendConnectionQueryBuilder WithEdges(MediaTrendEdgeQueryBuilder mediaTrendEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, mediaTrendEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaTrendConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public MediaTrendConnectionQueryBuilder WithNodes(MediaTrendQueryBuilder mediaTrendQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, mediaTrendQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaTrendConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public MediaTrendConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaTrendConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class MediaTrendEdgeQueryBuilder : GraphQlQueryBuilder<MediaTrendEdgeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(MediaTrendQueryBuilder) }
            };

        protected override string TypeName { get { return "MediaTrendEdge"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaTrendEdgeQueryBuilder WithNode(MediaTrendQueryBuilder mediaTrendQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, mediaTrendQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaTrendEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class MediaTrendQueryBuilder : GraphQlQueryBuilder<MediaTrendQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "mediaId" },
                new FieldMetadata { Name = "date" },
                new FieldMetadata { Name = "trending" },
                new FieldMetadata { Name = "averageScore" },
                new FieldMetadata { Name = "popularity" },
                new FieldMetadata { Name = "inProgress" },
                new FieldMetadata { Name = "releasing" },
                new FieldMetadata { Name = "episode" },
                new FieldMetadata { Name = "media", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) }
            };

        protected override string TypeName { get { return "MediaTrend"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaTrendQueryBuilder WithMediaId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaId", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaTrendQueryBuilder ExceptMediaId()
        {
            return ExceptField("mediaId");
        }

        public MediaTrendQueryBuilder WithDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("date", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaTrendQueryBuilder ExceptDate()
        {
            return ExceptField("date");
        }

        public MediaTrendQueryBuilder WithTrending(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("trending", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaTrendQueryBuilder ExceptTrending()
        {
            return ExceptField("trending");
        }

        public MediaTrendQueryBuilder WithAverageScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("averageScore", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaTrendQueryBuilder ExceptAverageScore()
        {
            return ExceptField("averageScore");
        }

        public MediaTrendQueryBuilder WithPopularity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("popularity", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaTrendQueryBuilder ExceptPopularity()
        {
            return ExceptField("popularity");
        }

        public MediaTrendQueryBuilder WithInProgress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("inProgress", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaTrendQueryBuilder ExceptInProgress()
        {
            return ExceptField("inProgress");
        }

        public MediaTrendQueryBuilder WithReleasing(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("releasing", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaTrendQueryBuilder ExceptReleasing()
        {
            return ExceptField("releasing");
        }

        public MediaTrendQueryBuilder WithEpisode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("episode", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaTrendQueryBuilder ExceptEpisode()
        {
            return ExceptField("episode");
        }

        public MediaTrendQueryBuilder WithMedia(MediaQueryBuilder mediaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("media", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaTrendQueryBuilder ExceptMedia()
        {
            return ExceptField("media");
        }
    }

    public class MediaExternalLinkQueryBuilder : GraphQlQueryBuilder<MediaExternalLinkQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "url" },
                new FieldMetadata { Name = "site" }
            };

        protected override string TypeName { get { return "MediaExternalLink"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaExternalLinkQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaExternalLinkQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MediaExternalLinkQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaExternalLinkQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }

        public MediaExternalLinkQueryBuilder WithSite(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("site", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaExternalLinkQueryBuilder ExceptSite()
        {
            return ExceptField("site");
        }
    }

    public class MediaStreamingEpisodeQueryBuilder : GraphQlQueryBuilder<MediaStreamingEpisodeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "title" },
                new FieldMetadata { Name = "thumbnail" },
                new FieldMetadata { Name = "url" },
                new FieldMetadata { Name = "site" }
            };

        protected override string TypeName { get { return "MediaStreamingEpisode"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaStreamingEpisodeQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaStreamingEpisodeQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public MediaStreamingEpisodeQueryBuilder WithThumbnail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("thumbnail", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaStreamingEpisodeQueryBuilder ExceptThumbnail()
        {
            return ExceptField("thumbnail");
        }

        public MediaStreamingEpisodeQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaStreamingEpisodeQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }

        public MediaStreamingEpisodeQueryBuilder WithSite(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("site", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaStreamingEpisodeQueryBuilder ExceptSite()
        {
            return ExceptField("site");
        }
    }

    public class MediaRankQueryBuilder : GraphQlQueryBuilder<MediaRankQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "rank" },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "format" },
                new FieldMetadata { Name = "year" },
                new FieldMetadata { Name = "season" },
                new FieldMetadata { Name = "allTime" },
                new FieldMetadata { Name = "context" }
            };

        protected override string TypeName { get { return "MediaRank"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaRankQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaRankQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MediaRankQueryBuilder WithRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rank", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaRankQueryBuilder ExceptRank()
        {
            return ExceptField("rank");
        }

        public MediaRankQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaRankQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public MediaRankQueryBuilder WithFormat(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("format", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaRankQueryBuilder ExceptFormat()
        {
            return ExceptField("format");
        }

        public MediaRankQueryBuilder WithYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("year", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaRankQueryBuilder ExceptYear()
        {
            return ExceptField("year");
        }

        public MediaRankQueryBuilder WithSeason(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("season", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaRankQueryBuilder ExceptSeason()
        {
            return ExceptField("season");
        }

        public MediaRankQueryBuilder WithAllTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("allTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaRankQueryBuilder ExceptAllTime()
        {
            return ExceptField("allTime");
        }

        public MediaRankQueryBuilder WithContext(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("context", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaRankQueryBuilder ExceptContext()
        {
            return ExceptField("context");
        }
    }

    public class MediaListQueryBuilder : GraphQlQueryBuilder<MediaListQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "userId" },
                new FieldMetadata { Name = "mediaId" },
                new FieldMetadata { Name = "status" },
                new FieldMetadata { Name = "score" },
                new FieldMetadata { Name = "progress" },
                new FieldMetadata { Name = "progressVolumes" },
                new FieldMetadata { Name = "repeat" },
                new FieldMetadata { Name = "priority" },
                new FieldMetadata { Name = "private" },
                new FieldMetadata { Name = "notes" },
                new FieldMetadata { Name = "hiddenFromStatusLists" },
                new FieldMetadata { Name = "customLists", IsComplex = true },
                new FieldMetadata { Name = "advancedScores", IsComplex = true },
                new FieldMetadata { Name = "startedAt", IsComplex = true, QueryBuilderType = typeof(FuzzyDateQueryBuilder) },
                new FieldMetadata { Name = "completedAt", IsComplex = true, QueryBuilderType = typeof(FuzzyDateQueryBuilder) },
                new FieldMetadata { Name = "updatedAt" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "media", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "MediaList"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaListQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MediaListQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public MediaListQueryBuilder WithMediaId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaId", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListQueryBuilder ExceptMediaId()
        {
            return ExceptField("mediaId");
        }

        public MediaListQueryBuilder WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }

        public MediaListQueryBuilder WithScore(QueryBuilderParameter<ScoreFormat?> format = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (format != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "format", ArgumentValue = format} );

            return WithScalarField("score", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public MediaListQueryBuilder ExceptScore()
        {
            return ExceptField("score");
        }

        public MediaListQueryBuilder WithProgress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("progress", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListQueryBuilder ExceptProgress()
        {
            return ExceptField("progress");
        }

        public MediaListQueryBuilder WithProgressVolumes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("progressVolumes", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListQueryBuilder ExceptProgressVolumes()
        {
            return ExceptField("progressVolumes");
        }

        public MediaListQueryBuilder WithRepeat(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("repeat", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListQueryBuilder ExceptRepeat()
        {
            return ExceptField("repeat");
        }

        public MediaListQueryBuilder WithPriority(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("priority", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListQueryBuilder ExceptPriority()
        {
            return ExceptField("priority");
        }

        public MediaListQueryBuilder WithPrivate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("private", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListQueryBuilder ExceptPrivate()
        {
            return ExceptField("private");
        }

        public MediaListQueryBuilder WithNotes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("notes", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListQueryBuilder ExceptNotes()
        {
            return ExceptField("notes");
        }

        public MediaListQueryBuilder WithHiddenFromStatusLists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hiddenFromStatusLists", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListQueryBuilder ExceptHiddenFromStatusLists()
        {
            return ExceptField("hiddenFromStatusLists");
        }

        public MediaListQueryBuilder WithCustomLists(QueryBuilderParameter<bool?> asArray = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (asArray != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "asArray", ArgumentValue = asArray} );

            return WithScalarField("customLists", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public MediaListQueryBuilder ExceptCustomLists()
        {
            return ExceptField("customLists");
        }

        public MediaListQueryBuilder WithAdvancedScores(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("advancedScores", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListQueryBuilder ExceptAdvancedScores()
        {
            return ExceptField("advancedScores");
        }

        public MediaListQueryBuilder WithStartedAt(FuzzyDateQueryBuilder fuzzyDateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("startedAt", alias, fuzzyDateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaListQueryBuilder ExceptStartedAt()
        {
            return ExceptField("startedAt");
        }

        public MediaListQueryBuilder WithCompletedAt(FuzzyDateQueryBuilder fuzzyDateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("completedAt", alias, fuzzyDateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaListQueryBuilder ExceptCompletedAt()
        {
            return ExceptField("completedAt");
        }

        public MediaListQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public MediaListQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public MediaListQueryBuilder WithMedia(MediaQueryBuilder mediaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("media", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaListQueryBuilder ExceptMedia()
        {
            return ExceptField("media");
        }

        public MediaListQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaListQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class ReviewConnectionQueryBuilder : GraphQlQueryBuilder<ReviewConnectionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(ReviewEdgeQueryBuilder) },
                new FieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(ReviewQueryBuilder) },
                new FieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "ReviewConnection"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ReviewConnectionQueryBuilder WithEdges(ReviewEdgeQueryBuilder reviewEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, reviewEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ReviewConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public ReviewConnectionQueryBuilder WithNodes(ReviewQueryBuilder reviewQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, reviewQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ReviewConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public ReviewConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ReviewConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class ReviewEdgeQueryBuilder : GraphQlQueryBuilder<ReviewEdgeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(ReviewQueryBuilder) }
            };

        protected override string TypeName { get { return "ReviewEdge"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ReviewEdgeQueryBuilder WithNode(ReviewQueryBuilder reviewQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, reviewQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ReviewEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class ReviewQueryBuilder : GraphQlQueryBuilder<ReviewQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "userId" },
                new FieldMetadata { Name = "mediaId" },
                new FieldMetadata { Name = "mediaType" },
                new FieldMetadata { Name = "summary" },
                new FieldMetadata { Name = "body" },
                new FieldMetadata { Name = "rating" },
                new FieldMetadata { Name = "ratingAmount" },
                new FieldMetadata { Name = "userRating" },
                new FieldMetadata { Name = "score" },
                new FieldMetadata { Name = "private" },
                new FieldMetadata { Name = "siteUrl" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "updatedAt" },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "media", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) }
            };

        protected override string TypeName { get { return "Review"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ReviewQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ReviewQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public ReviewQueryBuilder WithMediaId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaId", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewQueryBuilder ExceptMediaId()
        {
            return ExceptField("mediaId");
        }

        public ReviewQueryBuilder WithMediaType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaType", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewQueryBuilder ExceptMediaType()
        {
            return ExceptField("mediaType");
        }

        public ReviewQueryBuilder WithSummary(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("summary", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewQueryBuilder ExceptSummary()
        {
            return ExceptField("summary");
        }

        public ReviewQueryBuilder WithBody(QueryBuilderParameter<bool?> asHtml = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (asHtml != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "asHtml", ArgumentValue = asHtml} );

            return WithScalarField("body", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public ReviewQueryBuilder ExceptBody()
        {
            return ExceptField("body");
        }

        public ReviewQueryBuilder WithRating(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rating", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewQueryBuilder ExceptRating()
        {
            return ExceptField("rating");
        }

        public ReviewQueryBuilder WithRatingAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ratingAmount", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewQueryBuilder ExceptRatingAmount()
        {
            return ExceptField("ratingAmount");
        }

        public ReviewQueryBuilder WithUserRating(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userRating", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewQueryBuilder ExceptUserRating()
        {
            return ExceptField("userRating");
        }

        public ReviewQueryBuilder WithScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("score", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewQueryBuilder ExceptScore()
        {
            return ExceptField("score");
        }

        public ReviewQueryBuilder WithPrivate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("private", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewQueryBuilder ExceptPrivate()
        {
            return ExceptField("private");
        }

        public ReviewQueryBuilder WithSiteUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("siteUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewQueryBuilder ExceptSiteUrl()
        {
            return ExceptField("siteUrl");
        }

        public ReviewQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ReviewQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public ReviewQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ReviewQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }

        public ReviewQueryBuilder WithMedia(MediaQueryBuilder mediaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("media", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ReviewQueryBuilder ExceptMedia()
        {
            return ExceptField("media");
        }
    }

    public class RecommendationConnectionQueryBuilder : GraphQlQueryBuilder<RecommendationConnectionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(RecommendationEdgeQueryBuilder) },
                new FieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(RecommendationQueryBuilder) },
                new FieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "RecommendationConnection"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public RecommendationConnectionQueryBuilder WithEdges(RecommendationEdgeQueryBuilder recommendationEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, recommendationEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RecommendationConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public RecommendationConnectionQueryBuilder WithNodes(RecommendationQueryBuilder recommendationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, recommendationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RecommendationConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public RecommendationConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RecommendationConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class RecommendationEdgeQueryBuilder : GraphQlQueryBuilder<RecommendationEdgeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(RecommendationQueryBuilder) }
            };

        protected override string TypeName { get { return "RecommendationEdge"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public RecommendationEdgeQueryBuilder WithNode(RecommendationQueryBuilder recommendationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, recommendationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RecommendationEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class RecommendationQueryBuilder : GraphQlQueryBuilder<RecommendationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "rating" },
                new FieldMetadata { Name = "userRating" },
                new FieldMetadata { Name = "media", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) },
                new FieldMetadata { Name = "mediaRecommendation", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "Recommendation"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public RecommendationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public RecommendationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public RecommendationQueryBuilder WithRating(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rating", alias, new GraphQlDirective[] { include, skip });
        }

        public RecommendationQueryBuilder ExceptRating()
        {
            return ExceptField("rating");
        }

        public RecommendationQueryBuilder WithUserRating(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userRating", alias, new GraphQlDirective[] { include, skip });
        }

        public RecommendationQueryBuilder ExceptUserRating()
        {
            return ExceptField("userRating");
        }

        public RecommendationQueryBuilder WithMedia(MediaQueryBuilder mediaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("media", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RecommendationQueryBuilder ExceptMedia()
        {
            return ExceptField("media");
        }

        public RecommendationQueryBuilder WithMediaRecommendation(MediaQueryBuilder mediaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mediaRecommendation", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RecommendationQueryBuilder ExceptMediaRecommendation()
        {
            return ExceptField("mediaRecommendation");
        }

        public RecommendationQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RecommendationQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class MediaStatsQueryBuilder : GraphQlQueryBuilder<MediaStatsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "scoreDistribution", IsComplex = true, QueryBuilderType = typeof(ScoreDistributionQueryBuilder) },
                new FieldMetadata { Name = "statusDistribution", IsComplex = true, QueryBuilderType = typeof(StatusDistributionQueryBuilder) }
            };

        protected override string TypeName { get { return "MediaStats"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaStatsQueryBuilder WithScoreDistribution(ScoreDistributionQueryBuilder scoreDistributionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("scoreDistribution", alias, scoreDistributionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaStatsQueryBuilder ExceptScoreDistribution()
        {
            return ExceptField("scoreDistribution");
        }

        public MediaStatsQueryBuilder WithStatusDistribution(StatusDistributionQueryBuilder statusDistributionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("statusDistribution", alias, statusDistributionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaStatsQueryBuilder ExceptStatusDistribution()
        {
            return ExceptField("statusDistribution");
        }
    }

    public class ScoreDistributionQueryBuilder : GraphQlQueryBuilder<ScoreDistributionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "score" },
                new FieldMetadata { Name = "amount" }
            };

        protected override string TypeName { get { return "ScoreDistribution"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ScoreDistributionQueryBuilder WithScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("score", alias, new GraphQlDirective[] { include, skip });
        }

        public ScoreDistributionQueryBuilder ExceptScore()
        {
            return ExceptField("score");
        }

        public ScoreDistributionQueryBuilder WithAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("amount", alias, new GraphQlDirective[] { include, skip });
        }

        public ScoreDistributionQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }
    }

    public class StatusDistributionQueryBuilder : GraphQlQueryBuilder<StatusDistributionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "status" },
                new FieldMetadata { Name = "amount" }
            };

        protected override string TypeName { get { return "StatusDistribution"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StatusDistributionQueryBuilder WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { include, skip });
        }

        public StatusDistributionQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }

        public StatusDistributionQueryBuilder WithAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("amount", alias, new GraphQlDirective[] { include, skip });
        }

        public StatusDistributionQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }
    }

    public class AiringProgressionQueryBuilder : GraphQlQueryBuilder<AiringProgressionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "episode" },
                new FieldMetadata { Name = "score" },
                new FieldMetadata { Name = "watching" }
            };

        protected override string TypeName { get { return "AiringProgression"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AiringProgressionQueryBuilder WithEpisode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("episode", alias, new GraphQlDirective[] { include, skip });
        }

        public AiringProgressionQueryBuilder ExceptEpisode()
        {
            return ExceptField("episode");
        }

        public AiringProgressionQueryBuilder WithScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("score", alias, new GraphQlDirective[] { include, skip });
        }

        public AiringProgressionQueryBuilder ExceptScore()
        {
            return ExceptField("score");
        }

        public AiringProgressionQueryBuilder WithWatching(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("watching", alias, new GraphQlDirective[] { include, skip });
        }

        public AiringProgressionQueryBuilder ExceptWatching()
        {
            return ExceptField("watching");
        }
    }

    public class UserStatisticTypesQueryBuilder : GraphQlQueryBuilder<UserStatisticTypesQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "anime", IsComplex = true, QueryBuilderType = typeof(UserStatisticsQueryBuilder) },
                new FieldMetadata { Name = "manga", IsComplex = true, QueryBuilderType = typeof(UserStatisticsQueryBuilder) }
            };

        protected override string TypeName { get { return "UserStatisticTypes"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserStatisticTypesQueryBuilder WithAnime(UserStatisticsQueryBuilder userStatisticsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("anime", alias, userStatisticsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserStatisticTypesQueryBuilder ExceptAnime()
        {
            return ExceptField("anime");
        }

        public UserStatisticTypesQueryBuilder WithManga(UserStatisticsQueryBuilder userStatisticsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("manga", alias, userStatisticsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserStatisticTypesQueryBuilder ExceptManga()
        {
            return ExceptField("manga");
        }
    }

    public class UserStatisticsQueryBuilder : GraphQlQueryBuilder<UserStatisticsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "count" },
                new FieldMetadata { Name = "meanScore" },
                new FieldMetadata { Name = "standardDeviation" },
                new FieldMetadata { Name = "minutesWatched" },
                new FieldMetadata { Name = "episodesWatched" },
                new FieldMetadata { Name = "chaptersRead" },
                new FieldMetadata { Name = "volumesRead" },
                new FieldMetadata { Name = "formats", IsComplex = true, QueryBuilderType = typeof(UserFormatStatisticQueryBuilder) },
                new FieldMetadata { Name = "statuses", IsComplex = true, QueryBuilderType = typeof(UserStatusStatisticQueryBuilder) },
                new FieldMetadata { Name = "scores", IsComplex = true, QueryBuilderType = typeof(UserScoreStatisticQueryBuilder) },
                new FieldMetadata { Name = "lengths", IsComplex = true, QueryBuilderType = typeof(UserLengthStatisticQueryBuilder) },
                new FieldMetadata { Name = "releaseYears", IsComplex = true, QueryBuilderType = typeof(UserReleaseYearStatisticQueryBuilder) },
                new FieldMetadata { Name = "startYears", IsComplex = true, QueryBuilderType = typeof(UserStartYearStatisticQueryBuilder) },
                new FieldMetadata { Name = "genres", IsComplex = true, QueryBuilderType = typeof(UserGenreStatisticQueryBuilder) },
                new FieldMetadata { Name = "tags", IsComplex = true, QueryBuilderType = typeof(UserTagStatisticQueryBuilder) },
                new FieldMetadata { Name = "countries", IsComplex = true, QueryBuilderType = typeof(UserCountryStatisticQueryBuilder) },
                new FieldMetadata { Name = "voiceActors", IsComplex = true, QueryBuilderType = typeof(UserVoiceActorStatisticQueryBuilder) },
                new FieldMetadata { Name = "staff", IsComplex = true, QueryBuilderType = typeof(UserStaffStatisticQueryBuilder) },
                new FieldMetadata { Name = "studios", IsComplex = true, QueryBuilderType = typeof(UserStudioStatisticQueryBuilder) }
            };

        protected override string TypeName { get { return "UserStatistics"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserStatisticsQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStatisticsQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public UserStatisticsQueryBuilder WithMeanScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meanScore", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStatisticsQueryBuilder ExceptMeanScore()
        {
            return ExceptField("meanScore");
        }

        public UserStatisticsQueryBuilder WithStandardDeviation(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("standardDeviation", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStatisticsQueryBuilder ExceptStandardDeviation()
        {
            return ExceptField("standardDeviation");
        }

        public UserStatisticsQueryBuilder WithMinutesWatched(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("minutesWatched", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStatisticsQueryBuilder ExceptMinutesWatched()
        {
            return ExceptField("minutesWatched");
        }

        public UserStatisticsQueryBuilder WithEpisodesWatched(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("episodesWatched", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStatisticsQueryBuilder ExceptEpisodesWatched()
        {
            return ExceptField("episodesWatched");
        }

        public UserStatisticsQueryBuilder WithChaptersRead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chaptersRead", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStatisticsQueryBuilder ExceptChaptersRead()
        {
            return ExceptField("chaptersRead");
        }

        public UserStatisticsQueryBuilder WithVolumesRead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("volumesRead", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStatisticsQueryBuilder ExceptVolumesRead()
        {
            return ExceptField("volumesRead");
        }

        public UserStatisticsQueryBuilder WithFormats(UserFormatStatisticQueryBuilder userFormatStatisticQueryBuilder, QueryBuilderParameter<int?> limit = null, QueryBuilderParameter<IEnumerable<UserStatisticsSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (limit != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "limit", ArgumentValue = limit} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("formats", alias, userFormatStatisticQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserStatisticsQueryBuilder ExceptFormats()
        {
            return ExceptField("formats");
        }

        public UserStatisticsQueryBuilder WithStatuses(UserStatusStatisticQueryBuilder userStatusStatisticQueryBuilder, QueryBuilderParameter<int?> limit = null, QueryBuilderParameter<IEnumerable<UserStatisticsSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (limit != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "limit", ArgumentValue = limit} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("statuses", alias, userStatusStatisticQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserStatisticsQueryBuilder ExceptStatuses()
        {
            return ExceptField("statuses");
        }

        public UserStatisticsQueryBuilder WithScores(UserScoreStatisticQueryBuilder userScoreStatisticQueryBuilder, QueryBuilderParameter<int?> limit = null, QueryBuilderParameter<IEnumerable<UserStatisticsSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (limit != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "limit", ArgumentValue = limit} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("scores", alias, userScoreStatisticQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserStatisticsQueryBuilder ExceptScores()
        {
            return ExceptField("scores");
        }

        public UserStatisticsQueryBuilder WithLengths(UserLengthStatisticQueryBuilder userLengthStatisticQueryBuilder, QueryBuilderParameter<int?> limit = null, QueryBuilderParameter<IEnumerable<UserStatisticsSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (limit != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "limit", ArgumentValue = limit} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("lengths", alias, userLengthStatisticQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserStatisticsQueryBuilder ExceptLengths()
        {
            return ExceptField("lengths");
        }

        public UserStatisticsQueryBuilder WithReleaseYears(UserReleaseYearStatisticQueryBuilder userReleaseYearStatisticQueryBuilder, QueryBuilderParameter<int?> limit = null, QueryBuilderParameter<IEnumerable<UserStatisticsSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (limit != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "limit", ArgumentValue = limit} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("releaseYears", alias, userReleaseYearStatisticQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserStatisticsQueryBuilder ExceptReleaseYears()
        {
            return ExceptField("releaseYears");
        }

        public UserStatisticsQueryBuilder WithStartYears(UserStartYearStatisticQueryBuilder userStartYearStatisticQueryBuilder, QueryBuilderParameter<int?> limit = null, QueryBuilderParameter<IEnumerable<UserStatisticsSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (limit != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "limit", ArgumentValue = limit} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("startYears", alias, userStartYearStatisticQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserStatisticsQueryBuilder ExceptStartYears()
        {
            return ExceptField("startYears");
        }

        public UserStatisticsQueryBuilder WithGenres(UserGenreStatisticQueryBuilder userGenreStatisticQueryBuilder, QueryBuilderParameter<int?> limit = null, QueryBuilderParameter<IEnumerable<UserStatisticsSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (limit != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "limit", ArgumentValue = limit} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("genres", alias, userGenreStatisticQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserStatisticsQueryBuilder ExceptGenres()
        {
            return ExceptField("genres");
        }

        public UserStatisticsQueryBuilder WithTags(UserTagStatisticQueryBuilder userTagStatisticQueryBuilder, QueryBuilderParameter<int?> limit = null, QueryBuilderParameter<IEnumerable<UserStatisticsSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (limit != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "limit", ArgumentValue = limit} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("tags", alias, userTagStatisticQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserStatisticsQueryBuilder ExceptTags()
        {
            return ExceptField("tags");
        }

        public UserStatisticsQueryBuilder WithCountries(UserCountryStatisticQueryBuilder userCountryStatisticQueryBuilder, QueryBuilderParameter<int?> limit = null, QueryBuilderParameter<IEnumerable<UserStatisticsSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (limit != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "limit", ArgumentValue = limit} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("countries", alias, userCountryStatisticQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserStatisticsQueryBuilder ExceptCountries()
        {
            return ExceptField("countries");
        }

        public UserStatisticsQueryBuilder WithVoiceActors(UserVoiceActorStatisticQueryBuilder userVoiceActorStatisticQueryBuilder, QueryBuilderParameter<int?> limit = null, QueryBuilderParameter<IEnumerable<UserStatisticsSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (limit != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "limit", ArgumentValue = limit} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("voiceActors", alias, userVoiceActorStatisticQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserStatisticsQueryBuilder ExceptVoiceActors()
        {
            return ExceptField("voiceActors");
        }

        public UserStatisticsQueryBuilder WithStaff(UserStaffStatisticQueryBuilder userStaffStatisticQueryBuilder, QueryBuilderParameter<int?> limit = null, QueryBuilderParameter<IEnumerable<UserStatisticsSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (limit != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "limit", ArgumentValue = limit} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("staff", alias, userStaffStatisticQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserStatisticsQueryBuilder ExceptStaff()
        {
            return ExceptField("staff");
        }

        public UserStatisticsQueryBuilder WithStudios(UserStudioStatisticQueryBuilder userStudioStatisticQueryBuilder, QueryBuilderParameter<int?> limit = null, QueryBuilderParameter<IEnumerable<UserStatisticsSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (limit != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "limit", ArgumentValue = limit} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("studios", alias, userStudioStatisticQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserStatisticsQueryBuilder ExceptStudios()
        {
            return ExceptField("studios");
        }
    }

    public class UserFormatStatisticQueryBuilder : GraphQlQueryBuilder<UserFormatStatisticQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "count" },
                new FieldMetadata { Name = "meanScore" },
                new FieldMetadata { Name = "minutesWatched" },
                new FieldMetadata { Name = "chaptersRead" },
                new FieldMetadata { Name = "mediaIds", IsComplex = true },
                new FieldMetadata { Name = "format" }
            };

        protected override string TypeName { get { return "UserFormatStatistic"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserFormatStatisticQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public UserFormatStatisticQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public UserFormatStatisticQueryBuilder WithMeanScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meanScore", alias, new GraphQlDirective[] { include, skip });
        }

        public UserFormatStatisticQueryBuilder ExceptMeanScore()
        {
            return ExceptField("meanScore");
        }

        public UserFormatStatisticQueryBuilder WithMinutesWatched(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("minutesWatched", alias, new GraphQlDirective[] { include, skip });
        }

        public UserFormatStatisticQueryBuilder ExceptMinutesWatched()
        {
            return ExceptField("minutesWatched");
        }

        public UserFormatStatisticQueryBuilder WithChaptersRead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chaptersRead", alias, new GraphQlDirective[] { include, skip });
        }

        public UserFormatStatisticQueryBuilder ExceptChaptersRead()
        {
            return ExceptField("chaptersRead");
        }

        public UserFormatStatisticQueryBuilder WithMediaIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaIds", alias, new GraphQlDirective[] { include, skip });
        }

        public UserFormatStatisticQueryBuilder ExceptMediaIds()
        {
            return ExceptField("mediaIds");
        }

        public UserFormatStatisticQueryBuilder WithFormat(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("format", alias, new GraphQlDirective[] { include, skip });
        }

        public UserFormatStatisticQueryBuilder ExceptFormat()
        {
            return ExceptField("format");
        }
    }

    public class UserStatusStatisticQueryBuilder : GraphQlQueryBuilder<UserStatusStatisticQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "count" },
                new FieldMetadata { Name = "meanScore" },
                new FieldMetadata { Name = "minutesWatched" },
                new FieldMetadata { Name = "chaptersRead" },
                new FieldMetadata { Name = "mediaIds", IsComplex = true },
                new FieldMetadata { Name = "status" }
            };

        protected override string TypeName { get { return "UserStatusStatistic"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserStatusStatisticQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStatusStatisticQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public UserStatusStatisticQueryBuilder WithMeanScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meanScore", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStatusStatisticQueryBuilder ExceptMeanScore()
        {
            return ExceptField("meanScore");
        }

        public UserStatusStatisticQueryBuilder WithMinutesWatched(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("minutesWatched", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStatusStatisticQueryBuilder ExceptMinutesWatched()
        {
            return ExceptField("minutesWatched");
        }

        public UserStatusStatisticQueryBuilder WithChaptersRead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chaptersRead", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStatusStatisticQueryBuilder ExceptChaptersRead()
        {
            return ExceptField("chaptersRead");
        }

        public UserStatusStatisticQueryBuilder WithMediaIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaIds", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStatusStatisticQueryBuilder ExceptMediaIds()
        {
            return ExceptField("mediaIds");
        }

        public UserStatusStatisticQueryBuilder WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStatusStatisticQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }
    }

    public class UserScoreStatisticQueryBuilder : GraphQlQueryBuilder<UserScoreStatisticQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "count" },
                new FieldMetadata { Name = "meanScore" },
                new FieldMetadata { Name = "minutesWatched" },
                new FieldMetadata { Name = "chaptersRead" },
                new FieldMetadata { Name = "mediaIds", IsComplex = true },
                new FieldMetadata { Name = "score" }
            };

        protected override string TypeName { get { return "UserScoreStatistic"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserScoreStatisticQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public UserScoreStatisticQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public UserScoreStatisticQueryBuilder WithMeanScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meanScore", alias, new GraphQlDirective[] { include, skip });
        }

        public UserScoreStatisticQueryBuilder ExceptMeanScore()
        {
            return ExceptField("meanScore");
        }

        public UserScoreStatisticQueryBuilder WithMinutesWatched(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("minutesWatched", alias, new GraphQlDirective[] { include, skip });
        }

        public UserScoreStatisticQueryBuilder ExceptMinutesWatched()
        {
            return ExceptField("minutesWatched");
        }

        public UserScoreStatisticQueryBuilder WithChaptersRead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chaptersRead", alias, new GraphQlDirective[] { include, skip });
        }

        public UserScoreStatisticQueryBuilder ExceptChaptersRead()
        {
            return ExceptField("chaptersRead");
        }

        public UserScoreStatisticQueryBuilder WithMediaIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaIds", alias, new GraphQlDirective[] { include, skip });
        }

        public UserScoreStatisticQueryBuilder ExceptMediaIds()
        {
            return ExceptField("mediaIds");
        }

        public UserScoreStatisticQueryBuilder WithScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("score", alias, new GraphQlDirective[] { include, skip });
        }

        public UserScoreStatisticQueryBuilder ExceptScore()
        {
            return ExceptField("score");
        }
    }

    public class UserLengthStatisticQueryBuilder : GraphQlQueryBuilder<UserLengthStatisticQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "count" },
                new FieldMetadata { Name = "meanScore" },
                new FieldMetadata { Name = "minutesWatched" },
                new FieldMetadata { Name = "chaptersRead" },
                new FieldMetadata { Name = "mediaIds", IsComplex = true },
                new FieldMetadata { Name = "length" }
            };

        protected override string TypeName { get { return "UserLengthStatistic"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserLengthStatisticQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public UserLengthStatisticQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public UserLengthStatisticQueryBuilder WithMeanScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meanScore", alias, new GraphQlDirective[] { include, skip });
        }

        public UserLengthStatisticQueryBuilder ExceptMeanScore()
        {
            return ExceptField("meanScore");
        }

        public UserLengthStatisticQueryBuilder WithMinutesWatched(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("minutesWatched", alias, new GraphQlDirective[] { include, skip });
        }

        public UserLengthStatisticQueryBuilder ExceptMinutesWatched()
        {
            return ExceptField("minutesWatched");
        }

        public UserLengthStatisticQueryBuilder WithChaptersRead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chaptersRead", alias, new GraphQlDirective[] { include, skip });
        }

        public UserLengthStatisticQueryBuilder ExceptChaptersRead()
        {
            return ExceptField("chaptersRead");
        }

        public UserLengthStatisticQueryBuilder WithMediaIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaIds", alias, new GraphQlDirective[] { include, skip });
        }

        public UserLengthStatisticQueryBuilder ExceptMediaIds()
        {
            return ExceptField("mediaIds");
        }

        public UserLengthStatisticQueryBuilder WithLength(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("length", alias, new GraphQlDirective[] { include, skip });
        }

        public UserLengthStatisticQueryBuilder ExceptLength()
        {
            return ExceptField("length");
        }
    }

    public class UserReleaseYearStatisticQueryBuilder : GraphQlQueryBuilder<UserReleaseYearStatisticQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "count" },
                new FieldMetadata { Name = "meanScore" },
                new FieldMetadata { Name = "minutesWatched" },
                new FieldMetadata { Name = "chaptersRead" },
                new FieldMetadata { Name = "mediaIds", IsComplex = true },
                new FieldMetadata { Name = "releaseYear" }
            };

        protected override string TypeName { get { return "UserReleaseYearStatistic"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserReleaseYearStatisticQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public UserReleaseYearStatisticQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public UserReleaseYearStatisticQueryBuilder WithMeanScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meanScore", alias, new GraphQlDirective[] { include, skip });
        }

        public UserReleaseYearStatisticQueryBuilder ExceptMeanScore()
        {
            return ExceptField("meanScore");
        }

        public UserReleaseYearStatisticQueryBuilder WithMinutesWatched(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("minutesWatched", alias, new GraphQlDirective[] { include, skip });
        }

        public UserReleaseYearStatisticQueryBuilder ExceptMinutesWatched()
        {
            return ExceptField("minutesWatched");
        }

        public UserReleaseYearStatisticQueryBuilder WithChaptersRead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chaptersRead", alias, new GraphQlDirective[] { include, skip });
        }

        public UserReleaseYearStatisticQueryBuilder ExceptChaptersRead()
        {
            return ExceptField("chaptersRead");
        }

        public UserReleaseYearStatisticQueryBuilder WithMediaIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaIds", alias, new GraphQlDirective[] { include, skip });
        }

        public UserReleaseYearStatisticQueryBuilder ExceptMediaIds()
        {
            return ExceptField("mediaIds");
        }

        public UserReleaseYearStatisticQueryBuilder WithReleaseYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("releaseYear", alias, new GraphQlDirective[] { include, skip });
        }

        public UserReleaseYearStatisticQueryBuilder ExceptReleaseYear()
        {
            return ExceptField("releaseYear");
        }
    }

    public class UserStartYearStatisticQueryBuilder : GraphQlQueryBuilder<UserStartYearStatisticQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "count" },
                new FieldMetadata { Name = "meanScore" },
                new FieldMetadata { Name = "minutesWatched" },
                new FieldMetadata { Name = "chaptersRead" },
                new FieldMetadata { Name = "mediaIds", IsComplex = true },
                new FieldMetadata { Name = "startYear" }
            };

        protected override string TypeName { get { return "UserStartYearStatistic"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserStartYearStatisticQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStartYearStatisticQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public UserStartYearStatisticQueryBuilder WithMeanScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meanScore", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStartYearStatisticQueryBuilder ExceptMeanScore()
        {
            return ExceptField("meanScore");
        }

        public UserStartYearStatisticQueryBuilder WithMinutesWatched(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("minutesWatched", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStartYearStatisticQueryBuilder ExceptMinutesWatched()
        {
            return ExceptField("minutesWatched");
        }

        public UserStartYearStatisticQueryBuilder WithChaptersRead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chaptersRead", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStartYearStatisticQueryBuilder ExceptChaptersRead()
        {
            return ExceptField("chaptersRead");
        }

        public UserStartYearStatisticQueryBuilder WithMediaIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaIds", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStartYearStatisticQueryBuilder ExceptMediaIds()
        {
            return ExceptField("mediaIds");
        }

        public UserStartYearStatisticQueryBuilder WithStartYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startYear", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStartYearStatisticQueryBuilder ExceptStartYear()
        {
            return ExceptField("startYear");
        }
    }

    public class UserGenreStatisticQueryBuilder : GraphQlQueryBuilder<UserGenreStatisticQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "count" },
                new FieldMetadata { Name = "meanScore" },
                new FieldMetadata { Name = "minutesWatched" },
                new FieldMetadata { Name = "chaptersRead" },
                new FieldMetadata { Name = "mediaIds", IsComplex = true },
                new FieldMetadata { Name = "genre" }
            };

        protected override string TypeName { get { return "UserGenreStatistic"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserGenreStatisticQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public UserGenreStatisticQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public UserGenreStatisticQueryBuilder WithMeanScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meanScore", alias, new GraphQlDirective[] { include, skip });
        }

        public UserGenreStatisticQueryBuilder ExceptMeanScore()
        {
            return ExceptField("meanScore");
        }

        public UserGenreStatisticQueryBuilder WithMinutesWatched(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("minutesWatched", alias, new GraphQlDirective[] { include, skip });
        }

        public UserGenreStatisticQueryBuilder ExceptMinutesWatched()
        {
            return ExceptField("minutesWatched");
        }

        public UserGenreStatisticQueryBuilder WithChaptersRead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chaptersRead", alias, new GraphQlDirective[] { include, skip });
        }

        public UserGenreStatisticQueryBuilder ExceptChaptersRead()
        {
            return ExceptField("chaptersRead");
        }

        public UserGenreStatisticQueryBuilder WithMediaIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaIds", alias, new GraphQlDirective[] { include, skip });
        }

        public UserGenreStatisticQueryBuilder ExceptMediaIds()
        {
            return ExceptField("mediaIds");
        }

        public UserGenreStatisticQueryBuilder WithGenre(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("genre", alias, new GraphQlDirective[] { include, skip });
        }

        public UserGenreStatisticQueryBuilder ExceptGenre()
        {
            return ExceptField("genre");
        }
    }

    public class UserTagStatisticQueryBuilder : GraphQlQueryBuilder<UserTagStatisticQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "count" },
                new FieldMetadata { Name = "meanScore" },
                new FieldMetadata { Name = "minutesWatched" },
                new FieldMetadata { Name = "chaptersRead" },
                new FieldMetadata { Name = "mediaIds", IsComplex = true },
                new FieldMetadata { Name = "tag", IsComplex = true, QueryBuilderType = typeof(MediaTagQueryBuilder) }
            };

        protected override string TypeName { get { return "UserTagStatistic"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserTagStatisticQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public UserTagStatisticQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public UserTagStatisticQueryBuilder WithMeanScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meanScore", alias, new GraphQlDirective[] { include, skip });
        }

        public UserTagStatisticQueryBuilder ExceptMeanScore()
        {
            return ExceptField("meanScore");
        }

        public UserTagStatisticQueryBuilder WithMinutesWatched(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("minutesWatched", alias, new GraphQlDirective[] { include, skip });
        }

        public UserTagStatisticQueryBuilder ExceptMinutesWatched()
        {
            return ExceptField("minutesWatched");
        }

        public UserTagStatisticQueryBuilder WithChaptersRead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chaptersRead", alias, new GraphQlDirective[] { include, skip });
        }

        public UserTagStatisticQueryBuilder ExceptChaptersRead()
        {
            return ExceptField("chaptersRead");
        }

        public UserTagStatisticQueryBuilder WithMediaIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaIds", alias, new GraphQlDirective[] { include, skip });
        }

        public UserTagStatisticQueryBuilder ExceptMediaIds()
        {
            return ExceptField("mediaIds");
        }

        public UserTagStatisticQueryBuilder WithTag(MediaTagQueryBuilder mediaTagQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("tag", alias, mediaTagQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserTagStatisticQueryBuilder ExceptTag()
        {
            return ExceptField("tag");
        }
    }

    public class UserCountryStatisticQueryBuilder : GraphQlQueryBuilder<UserCountryStatisticQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "count" },
                new FieldMetadata { Name = "meanScore" },
                new FieldMetadata { Name = "minutesWatched" },
                new FieldMetadata { Name = "chaptersRead" },
                new FieldMetadata { Name = "mediaIds", IsComplex = true },
                new FieldMetadata { Name = "country", IsComplex = true }
            };

        protected override string TypeName { get { return "UserCountryStatistic"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserCountryStatisticQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public UserCountryStatisticQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public UserCountryStatisticQueryBuilder WithMeanScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meanScore", alias, new GraphQlDirective[] { include, skip });
        }

        public UserCountryStatisticQueryBuilder ExceptMeanScore()
        {
            return ExceptField("meanScore");
        }

        public UserCountryStatisticQueryBuilder WithMinutesWatched(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("minutesWatched", alias, new GraphQlDirective[] { include, skip });
        }

        public UserCountryStatisticQueryBuilder ExceptMinutesWatched()
        {
            return ExceptField("minutesWatched");
        }

        public UserCountryStatisticQueryBuilder WithChaptersRead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chaptersRead", alias, new GraphQlDirective[] { include, skip });
        }

        public UserCountryStatisticQueryBuilder ExceptChaptersRead()
        {
            return ExceptField("chaptersRead");
        }

        public UserCountryStatisticQueryBuilder WithMediaIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaIds", alias, new GraphQlDirective[] { include, skip });
        }

        public UserCountryStatisticQueryBuilder ExceptMediaIds()
        {
            return ExceptField("mediaIds");
        }

        public UserCountryStatisticQueryBuilder WithCountry(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("country", alias, new GraphQlDirective[] { include, skip });
        }

        public UserCountryStatisticQueryBuilder ExceptCountry()
        {
            return ExceptField("country");
        }
    }

    public class UserVoiceActorStatisticQueryBuilder : GraphQlQueryBuilder<UserVoiceActorStatisticQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "count" },
                new FieldMetadata { Name = "meanScore" },
                new FieldMetadata { Name = "minutesWatched" },
                new FieldMetadata { Name = "chaptersRead" },
                new FieldMetadata { Name = "mediaIds", IsComplex = true },
                new FieldMetadata { Name = "voiceActor", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) },
                new FieldMetadata { Name = "characterIds", IsComplex = true }
            };

        protected override string TypeName { get { return "UserVoiceActorStatistic"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserVoiceActorStatisticQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public UserVoiceActorStatisticQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public UserVoiceActorStatisticQueryBuilder WithMeanScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meanScore", alias, new GraphQlDirective[] { include, skip });
        }

        public UserVoiceActorStatisticQueryBuilder ExceptMeanScore()
        {
            return ExceptField("meanScore");
        }

        public UserVoiceActorStatisticQueryBuilder WithMinutesWatched(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("minutesWatched", alias, new GraphQlDirective[] { include, skip });
        }

        public UserVoiceActorStatisticQueryBuilder ExceptMinutesWatched()
        {
            return ExceptField("minutesWatched");
        }

        public UserVoiceActorStatisticQueryBuilder WithChaptersRead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chaptersRead", alias, new GraphQlDirective[] { include, skip });
        }

        public UserVoiceActorStatisticQueryBuilder ExceptChaptersRead()
        {
            return ExceptField("chaptersRead");
        }

        public UserVoiceActorStatisticQueryBuilder WithMediaIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaIds", alias, new GraphQlDirective[] { include, skip });
        }

        public UserVoiceActorStatisticQueryBuilder ExceptMediaIds()
        {
            return ExceptField("mediaIds");
        }

        public UserVoiceActorStatisticQueryBuilder WithVoiceActor(StaffQueryBuilder staffQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("voiceActor", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserVoiceActorStatisticQueryBuilder ExceptVoiceActor()
        {
            return ExceptField("voiceActor");
        }

        public UserVoiceActorStatisticQueryBuilder WithCharacterIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("characterIds", alias, new GraphQlDirective[] { include, skip });
        }

        public UserVoiceActorStatisticQueryBuilder ExceptCharacterIds()
        {
            return ExceptField("characterIds");
        }
    }

    public class UserStaffStatisticQueryBuilder : GraphQlQueryBuilder<UserStaffStatisticQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "count" },
                new FieldMetadata { Name = "meanScore" },
                new FieldMetadata { Name = "minutesWatched" },
                new FieldMetadata { Name = "chaptersRead" },
                new FieldMetadata { Name = "mediaIds", IsComplex = true },
                new FieldMetadata { Name = "staff", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) }
            };

        protected override string TypeName { get { return "UserStaffStatistic"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserStaffStatisticQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStaffStatisticQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public UserStaffStatisticQueryBuilder WithMeanScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meanScore", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStaffStatisticQueryBuilder ExceptMeanScore()
        {
            return ExceptField("meanScore");
        }

        public UserStaffStatisticQueryBuilder WithMinutesWatched(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("minutesWatched", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStaffStatisticQueryBuilder ExceptMinutesWatched()
        {
            return ExceptField("minutesWatched");
        }

        public UserStaffStatisticQueryBuilder WithChaptersRead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chaptersRead", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStaffStatisticQueryBuilder ExceptChaptersRead()
        {
            return ExceptField("chaptersRead");
        }

        public UserStaffStatisticQueryBuilder WithMediaIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaIds", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStaffStatisticQueryBuilder ExceptMediaIds()
        {
            return ExceptField("mediaIds");
        }

        public UserStaffStatisticQueryBuilder WithStaff(StaffQueryBuilder staffQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("staff", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserStaffStatisticQueryBuilder ExceptStaff()
        {
            return ExceptField("staff");
        }
    }

    public class UserStudioStatisticQueryBuilder : GraphQlQueryBuilder<UserStudioStatisticQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "count" },
                new FieldMetadata { Name = "meanScore" },
                new FieldMetadata { Name = "minutesWatched" },
                new FieldMetadata { Name = "chaptersRead" },
                new FieldMetadata { Name = "mediaIds", IsComplex = true },
                new FieldMetadata { Name = "studio", IsComplex = true, QueryBuilderType = typeof(StudioQueryBuilder) }
            };

        protected override string TypeName { get { return "UserStudioStatistic"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserStudioStatisticQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStudioStatisticQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public UserStudioStatisticQueryBuilder WithMeanScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meanScore", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStudioStatisticQueryBuilder ExceptMeanScore()
        {
            return ExceptField("meanScore");
        }

        public UserStudioStatisticQueryBuilder WithMinutesWatched(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("minutesWatched", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStudioStatisticQueryBuilder ExceptMinutesWatched()
        {
            return ExceptField("minutesWatched");
        }

        public UserStudioStatisticQueryBuilder WithChaptersRead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chaptersRead", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStudioStatisticQueryBuilder ExceptChaptersRead()
        {
            return ExceptField("chaptersRead");
        }

        public UserStudioStatisticQueryBuilder WithMediaIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaIds", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStudioStatisticQueryBuilder ExceptMediaIds()
        {
            return ExceptField("mediaIds");
        }

        public UserStudioStatisticQueryBuilder WithStudio(StudioQueryBuilder studioQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("studio", alias, studioQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserStudioStatisticQueryBuilder ExceptStudio()
        {
            return ExceptField("studio");
        }
    }

    public class UserStatsQueryBuilder : GraphQlQueryBuilder<UserStatsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "watchedTime" },
                new FieldMetadata { Name = "chaptersRead" },
                new FieldMetadata { Name = "activityHistory", IsComplex = true, QueryBuilderType = typeof(UserActivityHistoryQueryBuilder) },
                new FieldMetadata { Name = "animeStatusDistribution", IsComplex = true, QueryBuilderType = typeof(StatusDistributionQueryBuilder) },
                new FieldMetadata { Name = "mangaStatusDistribution", IsComplex = true, QueryBuilderType = typeof(StatusDistributionQueryBuilder) },
                new FieldMetadata { Name = "animeScoreDistribution", IsComplex = true, QueryBuilderType = typeof(ScoreDistributionQueryBuilder) },
                new FieldMetadata { Name = "mangaScoreDistribution", IsComplex = true, QueryBuilderType = typeof(ScoreDistributionQueryBuilder) },
                new FieldMetadata { Name = "animeListScores", IsComplex = true, QueryBuilderType = typeof(ListScoreStatsQueryBuilder) },
                new FieldMetadata { Name = "mangaListScores", IsComplex = true, QueryBuilderType = typeof(ListScoreStatsQueryBuilder) },
                new FieldMetadata { Name = "favouredGenresOverview", IsComplex = true, QueryBuilderType = typeof(GenreStatsQueryBuilder) },
                new FieldMetadata { Name = "favouredGenres", IsComplex = true, QueryBuilderType = typeof(GenreStatsQueryBuilder) },
                new FieldMetadata { Name = "favouredTags", IsComplex = true, QueryBuilderType = typeof(TagStatsQueryBuilder) },
                new FieldMetadata { Name = "favouredActors", IsComplex = true, QueryBuilderType = typeof(StaffStatsQueryBuilder) },
                new FieldMetadata { Name = "favouredStaff", IsComplex = true, QueryBuilderType = typeof(StaffStatsQueryBuilder) },
                new FieldMetadata { Name = "favouredStudios", IsComplex = true, QueryBuilderType = typeof(StudioStatsQueryBuilder) },
                new FieldMetadata { Name = "favouredYears", IsComplex = true, QueryBuilderType = typeof(YearStatsQueryBuilder) },
                new FieldMetadata { Name = "favouredFormats", IsComplex = true, QueryBuilderType = typeof(FormatStatsQueryBuilder) }
            };

        protected override string TypeName { get { return "UserStats"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserStatsQueryBuilder WithWatchedTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("watchedTime", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStatsQueryBuilder ExceptWatchedTime()
        {
            return ExceptField("watchedTime");
        }

        public UserStatsQueryBuilder WithChaptersRead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chaptersRead", alias, new GraphQlDirective[] { include, skip });
        }

        public UserStatsQueryBuilder ExceptChaptersRead()
        {
            return ExceptField("chaptersRead");
        }

        public UserStatsQueryBuilder WithActivityHistory(UserActivityHistoryQueryBuilder userActivityHistoryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("activityHistory", alias, userActivityHistoryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserStatsQueryBuilder ExceptActivityHistory()
        {
            return ExceptField("activityHistory");
        }

        public UserStatsQueryBuilder WithAnimeStatusDistribution(StatusDistributionQueryBuilder statusDistributionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("animeStatusDistribution", alias, statusDistributionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserStatsQueryBuilder ExceptAnimeStatusDistribution()
        {
            return ExceptField("animeStatusDistribution");
        }

        public UserStatsQueryBuilder WithMangaStatusDistribution(StatusDistributionQueryBuilder statusDistributionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mangaStatusDistribution", alias, statusDistributionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserStatsQueryBuilder ExceptMangaStatusDistribution()
        {
            return ExceptField("mangaStatusDistribution");
        }

        public UserStatsQueryBuilder WithAnimeScoreDistribution(ScoreDistributionQueryBuilder scoreDistributionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("animeScoreDistribution", alias, scoreDistributionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserStatsQueryBuilder ExceptAnimeScoreDistribution()
        {
            return ExceptField("animeScoreDistribution");
        }

        public UserStatsQueryBuilder WithMangaScoreDistribution(ScoreDistributionQueryBuilder scoreDistributionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mangaScoreDistribution", alias, scoreDistributionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserStatsQueryBuilder ExceptMangaScoreDistribution()
        {
            return ExceptField("mangaScoreDistribution");
        }

        public UserStatsQueryBuilder WithAnimeListScores(ListScoreStatsQueryBuilder listScoreStatsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("animeListScores", alias, listScoreStatsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserStatsQueryBuilder ExceptAnimeListScores()
        {
            return ExceptField("animeListScores");
        }

        public UserStatsQueryBuilder WithMangaListScores(ListScoreStatsQueryBuilder listScoreStatsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mangaListScores", alias, listScoreStatsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserStatsQueryBuilder ExceptMangaListScores()
        {
            return ExceptField("mangaListScores");
        }

        public UserStatsQueryBuilder WithFavouredGenresOverview(GenreStatsQueryBuilder genreStatsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("favouredGenresOverview", alias, genreStatsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserStatsQueryBuilder ExceptFavouredGenresOverview()
        {
            return ExceptField("favouredGenresOverview");
        }

        public UserStatsQueryBuilder WithFavouredGenres(GenreStatsQueryBuilder genreStatsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("favouredGenres", alias, genreStatsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserStatsQueryBuilder ExceptFavouredGenres()
        {
            return ExceptField("favouredGenres");
        }

        public UserStatsQueryBuilder WithFavouredTags(TagStatsQueryBuilder tagStatsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("favouredTags", alias, tagStatsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserStatsQueryBuilder ExceptFavouredTags()
        {
            return ExceptField("favouredTags");
        }

        public UserStatsQueryBuilder WithFavouredActors(StaffStatsQueryBuilder staffStatsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("favouredActors", alias, staffStatsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserStatsQueryBuilder ExceptFavouredActors()
        {
            return ExceptField("favouredActors");
        }

        public UserStatsQueryBuilder WithFavouredStaff(StaffStatsQueryBuilder staffStatsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("favouredStaff", alias, staffStatsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserStatsQueryBuilder ExceptFavouredStaff()
        {
            return ExceptField("favouredStaff");
        }

        public UserStatsQueryBuilder WithFavouredStudios(StudioStatsQueryBuilder studioStatsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("favouredStudios", alias, studioStatsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserStatsQueryBuilder ExceptFavouredStudios()
        {
            return ExceptField("favouredStudios");
        }

        public UserStatsQueryBuilder WithFavouredYears(YearStatsQueryBuilder yearStatsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("favouredYears", alias, yearStatsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserStatsQueryBuilder ExceptFavouredYears()
        {
            return ExceptField("favouredYears");
        }

        public UserStatsQueryBuilder WithFavouredFormats(FormatStatsQueryBuilder formatStatsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("favouredFormats", alias, formatStatsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserStatsQueryBuilder ExceptFavouredFormats()
        {
            return ExceptField("favouredFormats");
        }
    }

    public class UserActivityHistoryQueryBuilder : GraphQlQueryBuilder<UserActivityHistoryQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "date" },
                new FieldMetadata { Name = "amount" },
                new FieldMetadata { Name = "level" }
            };

        protected override string TypeName { get { return "UserActivityHistory"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserActivityHistoryQueryBuilder WithDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("date", alias, new GraphQlDirective[] { include, skip });
        }

        public UserActivityHistoryQueryBuilder ExceptDate()
        {
            return ExceptField("date");
        }

        public UserActivityHistoryQueryBuilder WithAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("amount", alias, new GraphQlDirective[] { include, skip });
        }

        public UserActivityHistoryQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }

        public UserActivityHistoryQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public UserActivityHistoryQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }
    }

    public class ListScoreStatsQueryBuilder : GraphQlQueryBuilder<ListScoreStatsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "meanScore" },
                new FieldMetadata { Name = "standardDeviation" }
            };

        protected override string TypeName { get { return "ListScoreStats"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ListScoreStatsQueryBuilder WithMeanScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meanScore", alias, new GraphQlDirective[] { include, skip });
        }

        public ListScoreStatsQueryBuilder ExceptMeanScore()
        {
            return ExceptField("meanScore");
        }

        public ListScoreStatsQueryBuilder WithStandardDeviation(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("standardDeviation", alias, new GraphQlDirective[] { include, skip });
        }

        public ListScoreStatsQueryBuilder ExceptStandardDeviation()
        {
            return ExceptField("standardDeviation");
        }
    }

    public class GenreStatsQueryBuilder : GraphQlQueryBuilder<GenreStatsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "genre" },
                new FieldMetadata { Name = "amount" },
                new FieldMetadata { Name = "meanScore" },
                new FieldMetadata { Name = "timeWatched" }
            };

        protected override string TypeName { get { return "GenreStats"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public GenreStatsQueryBuilder WithGenre(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("genre", alias, new GraphQlDirective[] { include, skip });
        }

        public GenreStatsQueryBuilder ExceptGenre()
        {
            return ExceptField("genre");
        }

        public GenreStatsQueryBuilder WithAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("amount", alias, new GraphQlDirective[] { include, skip });
        }

        public GenreStatsQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }

        public GenreStatsQueryBuilder WithMeanScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meanScore", alias, new GraphQlDirective[] { include, skip });
        }

        public GenreStatsQueryBuilder ExceptMeanScore()
        {
            return ExceptField("meanScore");
        }

        public GenreStatsQueryBuilder WithTimeWatched(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timeWatched", alias, new GraphQlDirective[] { include, skip });
        }

        public GenreStatsQueryBuilder ExceptTimeWatched()
        {
            return ExceptField("timeWatched");
        }
    }

    public class TagStatsQueryBuilder : GraphQlQueryBuilder<TagStatsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "tag", IsComplex = true, QueryBuilderType = typeof(MediaTagQueryBuilder) },
                new FieldMetadata { Name = "amount" },
                new FieldMetadata { Name = "meanScore" },
                new FieldMetadata { Name = "timeWatched" }
            };

        protected override string TypeName { get { return "TagStats"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TagStatsQueryBuilder WithTag(MediaTagQueryBuilder mediaTagQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("tag", alias, mediaTagQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TagStatsQueryBuilder ExceptTag()
        {
            return ExceptField("tag");
        }

        public TagStatsQueryBuilder WithAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("amount", alias, new GraphQlDirective[] { include, skip });
        }

        public TagStatsQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }

        public TagStatsQueryBuilder WithMeanScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meanScore", alias, new GraphQlDirective[] { include, skip });
        }

        public TagStatsQueryBuilder ExceptMeanScore()
        {
            return ExceptField("meanScore");
        }

        public TagStatsQueryBuilder WithTimeWatched(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timeWatched", alias, new GraphQlDirective[] { include, skip });
        }

        public TagStatsQueryBuilder ExceptTimeWatched()
        {
            return ExceptField("timeWatched");
        }
    }

    public class StaffStatsQueryBuilder : GraphQlQueryBuilder<StaffStatsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "staff", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) },
                new FieldMetadata { Name = "amount" },
                new FieldMetadata { Name = "meanScore" },
                new FieldMetadata { Name = "timeWatched" }
            };

        protected override string TypeName { get { return "StaffStats"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StaffStatsQueryBuilder WithStaff(StaffQueryBuilder staffQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("staff", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StaffStatsQueryBuilder ExceptStaff()
        {
            return ExceptField("staff");
        }

        public StaffStatsQueryBuilder WithAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("amount", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffStatsQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }

        public StaffStatsQueryBuilder WithMeanScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meanScore", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffStatsQueryBuilder ExceptMeanScore()
        {
            return ExceptField("meanScore");
        }

        public StaffStatsQueryBuilder WithTimeWatched(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timeWatched", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffStatsQueryBuilder ExceptTimeWatched()
        {
            return ExceptField("timeWatched");
        }
    }

    public class StudioStatsQueryBuilder : GraphQlQueryBuilder<StudioStatsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "studio", IsComplex = true, QueryBuilderType = typeof(StudioQueryBuilder) },
                new FieldMetadata { Name = "amount" },
                new FieldMetadata { Name = "meanScore" },
                new FieldMetadata { Name = "timeWatched" }
            };

        protected override string TypeName { get { return "StudioStats"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StudioStatsQueryBuilder WithStudio(StudioQueryBuilder studioQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("studio", alias, studioQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StudioStatsQueryBuilder ExceptStudio()
        {
            return ExceptField("studio");
        }

        public StudioStatsQueryBuilder WithAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("amount", alias, new GraphQlDirective[] { include, skip });
        }

        public StudioStatsQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }

        public StudioStatsQueryBuilder WithMeanScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meanScore", alias, new GraphQlDirective[] { include, skip });
        }

        public StudioStatsQueryBuilder ExceptMeanScore()
        {
            return ExceptField("meanScore");
        }

        public StudioStatsQueryBuilder WithTimeWatched(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timeWatched", alias, new GraphQlDirective[] { include, skip });
        }

        public StudioStatsQueryBuilder ExceptTimeWatched()
        {
            return ExceptField("timeWatched");
        }
    }

    public class YearStatsQueryBuilder : GraphQlQueryBuilder<YearStatsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "year" },
                new FieldMetadata { Name = "amount" },
                new FieldMetadata { Name = "meanScore" }
            };

        protected override string TypeName { get { return "YearStats"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public YearStatsQueryBuilder WithYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("year", alias, new GraphQlDirective[] { include, skip });
        }

        public YearStatsQueryBuilder ExceptYear()
        {
            return ExceptField("year");
        }

        public YearStatsQueryBuilder WithAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("amount", alias, new GraphQlDirective[] { include, skip });
        }

        public YearStatsQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }

        public YearStatsQueryBuilder WithMeanScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meanScore", alias, new GraphQlDirective[] { include, skip });
        }

        public YearStatsQueryBuilder ExceptMeanScore()
        {
            return ExceptField("meanScore");
        }
    }

    public class FormatStatsQueryBuilder : GraphQlQueryBuilder<FormatStatsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "format" },
                new FieldMetadata { Name = "amount" }
            };

        protected override string TypeName { get { return "FormatStats"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FormatStatsQueryBuilder WithFormat(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("format", alias, new GraphQlDirective[] { include, skip });
        }

        public FormatStatsQueryBuilder ExceptFormat()
        {
            return ExceptField("format");
        }

        public FormatStatsQueryBuilder WithAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("amount", alias, new GraphQlDirective[] { include, skip });
        }

        public FormatStatsQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }
    }

    public class UserPreviousNameQueryBuilder : GraphQlQueryBuilder<UserPreviousNameQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "updatedAt" }
            };

        protected override string TypeName { get { return "UserPreviousName"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserPreviousNameQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public UserPreviousNameQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public UserPreviousNameQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public UserPreviousNameQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public UserPreviousNameQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public UserPreviousNameQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }
    }

    public class NotificationUnionQueryBuilder : GraphQlQueryBuilder<NotificationUnionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata = new FieldMetadata[0];

        protected override string TypeName { get { return "NotificationUnion"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public NotificationUnionQueryBuilder WithAiringNotificationFragment(AiringNotificationQueryBuilder airingNotificationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(airingNotificationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NotificationUnionQueryBuilder WithFollowingNotificationFragment(FollowingNotificationQueryBuilder followingNotificationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(followingNotificationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NotificationUnionQueryBuilder WithActivityMessageNotificationFragment(ActivityMessageNotificationQueryBuilder activityMessageNotificationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(activityMessageNotificationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NotificationUnionQueryBuilder WithActivityMentionNotificationFragment(ActivityMentionNotificationQueryBuilder activityMentionNotificationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(activityMentionNotificationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NotificationUnionQueryBuilder WithActivityReplyNotificationFragment(ActivityReplyNotificationQueryBuilder activityReplyNotificationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(activityReplyNotificationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NotificationUnionQueryBuilder WithActivityReplySubscribedNotificationFragment(ActivityReplySubscribedNotificationQueryBuilder activityReplySubscribedNotificationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(activityReplySubscribedNotificationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NotificationUnionQueryBuilder WithActivityLikeNotificationFragment(ActivityLikeNotificationQueryBuilder activityLikeNotificationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(activityLikeNotificationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NotificationUnionQueryBuilder WithActivityReplyLikeNotificationFragment(ActivityReplyLikeNotificationQueryBuilder activityReplyLikeNotificationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(activityReplyLikeNotificationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NotificationUnionQueryBuilder WithThreadCommentMentionNotificationFragment(ThreadCommentMentionNotificationQueryBuilder threadCommentMentionNotificationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(threadCommentMentionNotificationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NotificationUnionQueryBuilder WithThreadCommentReplyNotificationFragment(ThreadCommentReplyNotificationQueryBuilder threadCommentReplyNotificationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(threadCommentReplyNotificationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NotificationUnionQueryBuilder WithThreadCommentSubscribedNotificationFragment(ThreadCommentSubscribedNotificationQueryBuilder threadCommentSubscribedNotificationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(threadCommentSubscribedNotificationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NotificationUnionQueryBuilder WithThreadCommentLikeNotificationFragment(ThreadCommentLikeNotificationQueryBuilder threadCommentLikeNotificationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(threadCommentLikeNotificationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NotificationUnionQueryBuilder WithThreadLikeNotificationFragment(ThreadLikeNotificationQueryBuilder threadLikeNotificationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(threadLikeNotificationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NotificationUnionQueryBuilder WithRelatedMediaAdditionNotificationFragment(RelatedMediaAdditionNotificationQueryBuilder relatedMediaAdditionNotificationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(relatedMediaAdditionNotificationQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class AiringNotificationQueryBuilder : GraphQlQueryBuilder<AiringNotificationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "animeId" },
                new FieldMetadata { Name = "episode" },
                new FieldMetadata { Name = "contexts", IsComplex = true },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "media", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) }
            };

        protected override string TypeName { get { return "AiringNotification"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AiringNotificationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public AiringNotificationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public AiringNotificationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public AiringNotificationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public AiringNotificationQueryBuilder WithAnimeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("animeId", alias, new GraphQlDirective[] { include, skip });
        }

        public AiringNotificationQueryBuilder ExceptAnimeId()
        {
            return ExceptField("animeId");
        }

        public AiringNotificationQueryBuilder WithEpisode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("episode", alias, new GraphQlDirective[] { include, skip });
        }

        public AiringNotificationQueryBuilder ExceptEpisode()
        {
            return ExceptField("episode");
        }

        public AiringNotificationQueryBuilder WithContexts(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("contexts", alias, new GraphQlDirective[] { include, skip });
        }

        public AiringNotificationQueryBuilder ExceptContexts()
        {
            return ExceptField("contexts");
        }

        public AiringNotificationQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AiringNotificationQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public AiringNotificationQueryBuilder WithMedia(MediaQueryBuilder mediaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("media", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AiringNotificationQueryBuilder ExceptMedia()
        {
            return ExceptField("media");
        }
    }

    public class FollowingNotificationQueryBuilder : GraphQlQueryBuilder<FollowingNotificationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "userId" },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "context" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "FollowingNotification"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FollowingNotificationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowingNotificationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public FollowingNotificationQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowingNotificationQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public FollowingNotificationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowingNotificationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public FollowingNotificationQueryBuilder WithContext(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("context", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowingNotificationQueryBuilder ExceptContext()
        {
            return ExceptField("context");
        }

        public FollowingNotificationQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowingNotificationQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public FollowingNotificationQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FollowingNotificationQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class ActivityMessageNotificationQueryBuilder : GraphQlQueryBuilder<ActivityMessageNotificationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "userId" },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "activityId" },
                new FieldMetadata { Name = "context" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "message", IsComplex = true, QueryBuilderType = typeof(MessageActivityQueryBuilder) },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "ActivityMessageNotification"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ActivityMessageNotificationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityMessageNotificationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ActivityMessageNotificationQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityMessageNotificationQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public ActivityMessageNotificationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityMessageNotificationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public ActivityMessageNotificationQueryBuilder WithActivityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("activityId", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityMessageNotificationQueryBuilder ExceptActivityId()
        {
            return ExceptField("activityId");
        }

        public ActivityMessageNotificationQueryBuilder WithContext(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("context", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityMessageNotificationQueryBuilder ExceptContext()
        {
            return ExceptField("context");
        }

        public ActivityMessageNotificationQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityMessageNotificationQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ActivityMessageNotificationQueryBuilder WithMessage(MessageActivityQueryBuilder messageActivityQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("message", alias, messageActivityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ActivityMessageNotificationQueryBuilder ExceptMessage()
        {
            return ExceptField("message");
        }

        public ActivityMessageNotificationQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ActivityMessageNotificationQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class MessageActivityQueryBuilder : GraphQlQueryBuilder<MessageActivityQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "recipientId" },
                new FieldMetadata { Name = "messengerId" },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "replyCount" },
                new FieldMetadata { Name = "message" },
                new FieldMetadata { Name = "isLocked" },
                new FieldMetadata { Name = "isSubscribed" },
                new FieldMetadata { Name = "likeCount" },
                new FieldMetadata { Name = "isLiked" },
                new FieldMetadata { Name = "isPrivate" },
                new FieldMetadata { Name = "siteUrl" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "recipient", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "messenger", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "replies", IsComplex = true, QueryBuilderType = typeof(ActivityReplyQueryBuilder) },
                new FieldMetadata { Name = "likes", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "MessageActivity"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MessageActivityQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MessageActivityQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MessageActivityQueryBuilder WithRecipientId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("recipientId", alias, new GraphQlDirective[] { include, skip });
        }

        public MessageActivityQueryBuilder ExceptRecipientId()
        {
            return ExceptField("recipientId");
        }

        public MessageActivityQueryBuilder WithMessengerId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("messengerId", alias, new GraphQlDirective[] { include, skip });
        }

        public MessageActivityQueryBuilder ExceptMessengerId()
        {
            return ExceptField("messengerId");
        }

        public MessageActivityQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public MessageActivityQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public MessageActivityQueryBuilder WithReplyCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("replyCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MessageActivityQueryBuilder ExceptReplyCount()
        {
            return ExceptField("replyCount");
        }

        public MessageActivityQueryBuilder WithMessage(QueryBuilderParameter<bool?> asHtml = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (asHtml != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "asHtml", ArgumentValue = asHtml} );

            return WithScalarField("message", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public MessageActivityQueryBuilder ExceptMessage()
        {
            return ExceptField("message");
        }

        public MessageActivityQueryBuilder WithIsLocked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLocked", alias, new GraphQlDirective[] { include, skip });
        }

        public MessageActivityQueryBuilder ExceptIsLocked()
        {
            return ExceptField("isLocked");
        }

        public MessageActivityQueryBuilder WithIsSubscribed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSubscribed", alias, new GraphQlDirective[] { include, skip });
        }

        public MessageActivityQueryBuilder ExceptIsSubscribed()
        {
            return ExceptField("isSubscribed");
        }

        public MessageActivityQueryBuilder WithLikeCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("likeCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MessageActivityQueryBuilder ExceptLikeCount()
        {
            return ExceptField("likeCount");
        }

        public MessageActivityQueryBuilder WithIsLiked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLiked", alias, new GraphQlDirective[] { include, skip });
        }

        public MessageActivityQueryBuilder ExceptIsLiked()
        {
            return ExceptField("isLiked");
        }

        public MessageActivityQueryBuilder WithIsPrivate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isPrivate", alias, new GraphQlDirective[] { include, skip });
        }

        public MessageActivityQueryBuilder ExceptIsPrivate()
        {
            return ExceptField("isPrivate");
        }

        public MessageActivityQueryBuilder WithSiteUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("siteUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public MessageActivityQueryBuilder ExceptSiteUrl()
        {
            return ExceptField("siteUrl");
        }

        public MessageActivityQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public MessageActivityQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public MessageActivityQueryBuilder WithRecipient(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("recipient", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MessageActivityQueryBuilder ExceptRecipient()
        {
            return ExceptField("recipient");
        }

        public MessageActivityQueryBuilder WithMessenger(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("messenger", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MessageActivityQueryBuilder ExceptMessenger()
        {
            return ExceptField("messenger");
        }

        public MessageActivityQueryBuilder WithReplies(ActivityReplyQueryBuilder activityReplyQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("replies", alias, activityReplyQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MessageActivityQueryBuilder ExceptReplies()
        {
            return ExceptField("replies");
        }

        public MessageActivityQueryBuilder WithLikes(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("likes", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MessageActivityQueryBuilder ExceptLikes()
        {
            return ExceptField("likes");
        }
    }

    public class ActivityReplyQueryBuilder : GraphQlQueryBuilder<ActivityReplyQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "userId" },
                new FieldMetadata { Name = "activityId" },
                new FieldMetadata { Name = "text" },
                new FieldMetadata { Name = "likeCount" },
                new FieldMetadata { Name = "isLiked" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "likes", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "ActivityReply"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ActivityReplyQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ActivityReplyQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public ActivityReplyQueryBuilder WithActivityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("activityId", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyQueryBuilder ExceptActivityId()
        {
            return ExceptField("activityId");
        }

        public ActivityReplyQueryBuilder WithText(QueryBuilderParameter<bool?> asHtml = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (asHtml != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "asHtml", ArgumentValue = asHtml} );

            return WithScalarField("text", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public ActivityReplyQueryBuilder ExceptText()
        {
            return ExceptField("text");
        }

        public ActivityReplyQueryBuilder WithLikeCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("likeCount", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyQueryBuilder ExceptLikeCount()
        {
            return ExceptField("likeCount");
        }

        public ActivityReplyQueryBuilder WithIsLiked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLiked", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyQueryBuilder ExceptIsLiked()
        {
            return ExceptField("isLiked");
        }

        public ActivityReplyQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ActivityReplyQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }

        public ActivityReplyQueryBuilder WithLikes(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("likes", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyQueryBuilder ExceptLikes()
        {
            return ExceptField("likes");
        }
    }

    public class ActivityMentionNotificationQueryBuilder : GraphQlQueryBuilder<ActivityMentionNotificationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "userId" },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "activityId" },
                new FieldMetadata { Name = "context" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "activity", IsComplex = true, QueryBuilderType = typeof(ActivityUnionQueryBuilder) },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "ActivityMentionNotification"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ActivityMentionNotificationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityMentionNotificationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ActivityMentionNotificationQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityMentionNotificationQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public ActivityMentionNotificationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityMentionNotificationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public ActivityMentionNotificationQueryBuilder WithActivityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("activityId", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityMentionNotificationQueryBuilder ExceptActivityId()
        {
            return ExceptField("activityId");
        }

        public ActivityMentionNotificationQueryBuilder WithContext(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("context", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityMentionNotificationQueryBuilder ExceptContext()
        {
            return ExceptField("context");
        }

        public ActivityMentionNotificationQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityMentionNotificationQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ActivityMentionNotificationQueryBuilder WithActivity(ActivityUnionQueryBuilder activityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("activity", alias, activityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ActivityMentionNotificationQueryBuilder ExceptActivity()
        {
            return ExceptField("activity");
        }

        public ActivityMentionNotificationQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ActivityMentionNotificationQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class ActivityUnionQueryBuilder : GraphQlQueryBuilder<ActivityUnionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata = new FieldMetadata[0];

        protected override string TypeName { get { return "ActivityUnion"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ActivityUnionQueryBuilder WithTextActivityFragment(TextActivityQueryBuilder textActivityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(textActivityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ActivityUnionQueryBuilder WithListActivityFragment(ListActivityQueryBuilder listActivityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(listActivityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ActivityUnionQueryBuilder WithMessageActivityFragment(MessageActivityQueryBuilder messageActivityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(messageActivityQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class TextActivityQueryBuilder : GraphQlQueryBuilder<TextActivityQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "userId" },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "replyCount" },
                new FieldMetadata { Name = "text" },
                new FieldMetadata { Name = "siteUrl" },
                new FieldMetadata { Name = "isLocked" },
                new FieldMetadata { Name = "isSubscribed" },
                new FieldMetadata { Name = "likeCount" },
                new FieldMetadata { Name = "isLiked" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "replies", IsComplex = true, QueryBuilderType = typeof(ActivityReplyQueryBuilder) },
                new FieldMetadata { Name = "likes", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "TextActivity"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TextActivityQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public TextActivityQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public TextActivityQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public TextActivityQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public TextActivityQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public TextActivityQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public TextActivityQueryBuilder WithReplyCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("replyCount", alias, new GraphQlDirective[] { include, skip });
        }

        public TextActivityQueryBuilder ExceptReplyCount()
        {
            return ExceptField("replyCount");
        }

        public TextActivityQueryBuilder WithText(QueryBuilderParameter<bool?> asHtml = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (asHtml != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "asHtml", ArgumentValue = asHtml} );

            return WithScalarField("text", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public TextActivityQueryBuilder ExceptText()
        {
            return ExceptField("text");
        }

        public TextActivityQueryBuilder WithSiteUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("siteUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public TextActivityQueryBuilder ExceptSiteUrl()
        {
            return ExceptField("siteUrl");
        }

        public TextActivityQueryBuilder WithIsLocked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLocked", alias, new GraphQlDirective[] { include, skip });
        }

        public TextActivityQueryBuilder ExceptIsLocked()
        {
            return ExceptField("isLocked");
        }

        public TextActivityQueryBuilder WithIsSubscribed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSubscribed", alias, new GraphQlDirective[] { include, skip });
        }

        public TextActivityQueryBuilder ExceptIsSubscribed()
        {
            return ExceptField("isSubscribed");
        }

        public TextActivityQueryBuilder WithLikeCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("likeCount", alias, new GraphQlDirective[] { include, skip });
        }

        public TextActivityQueryBuilder ExceptLikeCount()
        {
            return ExceptField("likeCount");
        }

        public TextActivityQueryBuilder WithIsLiked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLiked", alias, new GraphQlDirective[] { include, skip });
        }

        public TextActivityQueryBuilder ExceptIsLiked()
        {
            return ExceptField("isLiked");
        }

        public TextActivityQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public TextActivityQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public TextActivityQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TextActivityQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }

        public TextActivityQueryBuilder WithReplies(ActivityReplyQueryBuilder activityReplyQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("replies", alias, activityReplyQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TextActivityQueryBuilder ExceptReplies()
        {
            return ExceptField("replies");
        }

        public TextActivityQueryBuilder WithLikes(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("likes", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TextActivityQueryBuilder ExceptLikes()
        {
            return ExceptField("likes");
        }
    }

    public class ListActivityQueryBuilder : GraphQlQueryBuilder<ListActivityQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "userId" },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "replyCount" },
                new FieldMetadata { Name = "status" },
                new FieldMetadata { Name = "progress" },
                new FieldMetadata { Name = "isLocked" },
                new FieldMetadata { Name = "isSubscribed" },
                new FieldMetadata { Name = "likeCount" },
                new FieldMetadata { Name = "isLiked" },
                new FieldMetadata { Name = "siteUrl" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "media", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) },
                new FieldMetadata { Name = "replies", IsComplex = true, QueryBuilderType = typeof(ActivityReplyQueryBuilder) },
                new FieldMetadata { Name = "likes", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "ListActivity"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ListActivityQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ListActivityQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ListActivityQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public ListActivityQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public ListActivityQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ListActivityQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public ListActivityQueryBuilder WithReplyCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("replyCount", alias, new GraphQlDirective[] { include, skip });
        }

        public ListActivityQueryBuilder ExceptReplyCount()
        {
            return ExceptField("replyCount");
        }

        public ListActivityQueryBuilder WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { include, skip });
        }

        public ListActivityQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }

        public ListActivityQueryBuilder WithProgress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("progress", alias, new GraphQlDirective[] { include, skip });
        }

        public ListActivityQueryBuilder ExceptProgress()
        {
            return ExceptField("progress");
        }

        public ListActivityQueryBuilder WithIsLocked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLocked", alias, new GraphQlDirective[] { include, skip });
        }

        public ListActivityQueryBuilder ExceptIsLocked()
        {
            return ExceptField("isLocked");
        }

        public ListActivityQueryBuilder WithIsSubscribed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSubscribed", alias, new GraphQlDirective[] { include, skip });
        }

        public ListActivityQueryBuilder ExceptIsSubscribed()
        {
            return ExceptField("isSubscribed");
        }

        public ListActivityQueryBuilder WithLikeCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("likeCount", alias, new GraphQlDirective[] { include, skip });
        }

        public ListActivityQueryBuilder ExceptLikeCount()
        {
            return ExceptField("likeCount");
        }

        public ListActivityQueryBuilder WithIsLiked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLiked", alias, new GraphQlDirective[] { include, skip });
        }

        public ListActivityQueryBuilder ExceptIsLiked()
        {
            return ExceptField("isLiked");
        }

        public ListActivityQueryBuilder WithSiteUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("siteUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public ListActivityQueryBuilder ExceptSiteUrl()
        {
            return ExceptField("siteUrl");
        }

        public ListActivityQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ListActivityQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ListActivityQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ListActivityQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }

        public ListActivityQueryBuilder WithMedia(MediaQueryBuilder mediaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("media", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ListActivityQueryBuilder ExceptMedia()
        {
            return ExceptField("media");
        }

        public ListActivityQueryBuilder WithReplies(ActivityReplyQueryBuilder activityReplyQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("replies", alias, activityReplyQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ListActivityQueryBuilder ExceptReplies()
        {
            return ExceptField("replies");
        }

        public ListActivityQueryBuilder WithLikes(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("likes", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ListActivityQueryBuilder ExceptLikes()
        {
            return ExceptField("likes");
        }
    }

    public class ActivityReplyNotificationQueryBuilder : GraphQlQueryBuilder<ActivityReplyNotificationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "userId" },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "activityId" },
                new FieldMetadata { Name = "context" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "activity", IsComplex = true, QueryBuilderType = typeof(ActivityUnionQueryBuilder) },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "ActivityReplyNotification"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ActivityReplyNotificationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyNotificationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ActivityReplyNotificationQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyNotificationQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public ActivityReplyNotificationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyNotificationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public ActivityReplyNotificationQueryBuilder WithActivityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("activityId", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyNotificationQueryBuilder ExceptActivityId()
        {
            return ExceptField("activityId");
        }

        public ActivityReplyNotificationQueryBuilder WithContext(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("context", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyNotificationQueryBuilder ExceptContext()
        {
            return ExceptField("context");
        }

        public ActivityReplyNotificationQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyNotificationQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ActivityReplyNotificationQueryBuilder WithActivity(ActivityUnionQueryBuilder activityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("activity", alias, activityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyNotificationQueryBuilder ExceptActivity()
        {
            return ExceptField("activity");
        }

        public ActivityReplyNotificationQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyNotificationQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class ActivityReplySubscribedNotificationQueryBuilder : GraphQlQueryBuilder<ActivityReplySubscribedNotificationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "userId" },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "activityId" },
                new FieldMetadata { Name = "context" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "activity", IsComplex = true, QueryBuilderType = typeof(ActivityUnionQueryBuilder) },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "ActivityReplySubscribedNotification"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ActivityReplySubscribedNotificationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplySubscribedNotificationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ActivityReplySubscribedNotificationQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplySubscribedNotificationQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public ActivityReplySubscribedNotificationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplySubscribedNotificationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public ActivityReplySubscribedNotificationQueryBuilder WithActivityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("activityId", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplySubscribedNotificationQueryBuilder ExceptActivityId()
        {
            return ExceptField("activityId");
        }

        public ActivityReplySubscribedNotificationQueryBuilder WithContext(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("context", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplySubscribedNotificationQueryBuilder ExceptContext()
        {
            return ExceptField("context");
        }

        public ActivityReplySubscribedNotificationQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplySubscribedNotificationQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ActivityReplySubscribedNotificationQueryBuilder WithActivity(ActivityUnionQueryBuilder activityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("activity", alias, activityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplySubscribedNotificationQueryBuilder ExceptActivity()
        {
            return ExceptField("activity");
        }

        public ActivityReplySubscribedNotificationQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplySubscribedNotificationQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class ActivityLikeNotificationQueryBuilder : GraphQlQueryBuilder<ActivityLikeNotificationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "userId" },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "activityId" },
                new FieldMetadata { Name = "context" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "activity", IsComplex = true, QueryBuilderType = typeof(ActivityUnionQueryBuilder) },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "ActivityLikeNotification"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ActivityLikeNotificationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityLikeNotificationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ActivityLikeNotificationQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityLikeNotificationQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public ActivityLikeNotificationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityLikeNotificationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public ActivityLikeNotificationQueryBuilder WithActivityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("activityId", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityLikeNotificationQueryBuilder ExceptActivityId()
        {
            return ExceptField("activityId");
        }

        public ActivityLikeNotificationQueryBuilder WithContext(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("context", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityLikeNotificationQueryBuilder ExceptContext()
        {
            return ExceptField("context");
        }

        public ActivityLikeNotificationQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityLikeNotificationQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ActivityLikeNotificationQueryBuilder WithActivity(ActivityUnionQueryBuilder activityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("activity", alias, activityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ActivityLikeNotificationQueryBuilder ExceptActivity()
        {
            return ExceptField("activity");
        }

        public ActivityLikeNotificationQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ActivityLikeNotificationQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class ActivityReplyLikeNotificationQueryBuilder : GraphQlQueryBuilder<ActivityReplyLikeNotificationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "userId" },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "activityId" },
                new FieldMetadata { Name = "context" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "activity", IsComplex = true, QueryBuilderType = typeof(ActivityUnionQueryBuilder) },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "ActivityReplyLikeNotification"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ActivityReplyLikeNotificationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyLikeNotificationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ActivityReplyLikeNotificationQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyLikeNotificationQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public ActivityReplyLikeNotificationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyLikeNotificationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public ActivityReplyLikeNotificationQueryBuilder WithActivityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("activityId", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyLikeNotificationQueryBuilder ExceptActivityId()
        {
            return ExceptField("activityId");
        }

        public ActivityReplyLikeNotificationQueryBuilder WithContext(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("context", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyLikeNotificationQueryBuilder ExceptContext()
        {
            return ExceptField("context");
        }

        public ActivityReplyLikeNotificationQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyLikeNotificationQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ActivityReplyLikeNotificationQueryBuilder WithActivity(ActivityUnionQueryBuilder activityUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("activity", alias, activityUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyLikeNotificationQueryBuilder ExceptActivity()
        {
            return ExceptField("activity");
        }

        public ActivityReplyLikeNotificationQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ActivityReplyLikeNotificationQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class ThreadCommentMentionNotificationQueryBuilder : GraphQlQueryBuilder<ThreadCommentMentionNotificationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "userId" },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "commentId" },
                new FieldMetadata { Name = "context" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "thread", IsComplex = true, QueryBuilderType = typeof(ThreadQueryBuilder) },
                new FieldMetadata { Name = "comment", IsComplex = true, QueryBuilderType = typeof(ThreadCommentQueryBuilder) },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "ThreadCommentMentionNotification"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ThreadCommentMentionNotificationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentMentionNotificationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ThreadCommentMentionNotificationQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentMentionNotificationQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public ThreadCommentMentionNotificationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentMentionNotificationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public ThreadCommentMentionNotificationQueryBuilder WithCommentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("commentId", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentMentionNotificationQueryBuilder ExceptCommentId()
        {
            return ExceptField("commentId");
        }

        public ThreadCommentMentionNotificationQueryBuilder WithContext(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("context", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentMentionNotificationQueryBuilder ExceptContext()
        {
            return ExceptField("context");
        }

        public ThreadCommentMentionNotificationQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentMentionNotificationQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ThreadCommentMentionNotificationQueryBuilder WithThread(ThreadQueryBuilder threadQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("thread", alias, threadQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentMentionNotificationQueryBuilder ExceptThread()
        {
            return ExceptField("thread");
        }

        public ThreadCommentMentionNotificationQueryBuilder WithComment(ThreadCommentQueryBuilder threadCommentQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("comment", alias, threadCommentQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentMentionNotificationQueryBuilder ExceptComment()
        {
            return ExceptField("comment");
        }

        public ThreadCommentMentionNotificationQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentMentionNotificationQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class ThreadQueryBuilder : GraphQlQueryBuilder<ThreadQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "title" },
                new FieldMetadata { Name = "body" },
                new FieldMetadata { Name = "userId" },
                new FieldMetadata { Name = "replyUserId" },
                new FieldMetadata { Name = "replyCommentId" },
                new FieldMetadata { Name = "replyCount" },
                new FieldMetadata { Name = "viewCount" },
                new FieldMetadata { Name = "isLocked" },
                new FieldMetadata { Name = "isSticky" },
                new FieldMetadata { Name = "isSubscribed" },
                new FieldMetadata { Name = "likeCount" },
                new FieldMetadata { Name = "isLiked" },
                new FieldMetadata { Name = "repliedAt" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "updatedAt" },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "replyUser", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "likes", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "siteUrl" },
                new FieldMetadata { Name = "categories", IsComplex = true, QueryBuilderType = typeof(ThreadCategoryQueryBuilder) },
                new FieldMetadata { Name = "mediaCategories", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) }
            };

        protected override string TypeName { get { return "Thread"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ThreadQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ThreadQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public ThreadQueryBuilder WithBody(QueryBuilderParameter<bool?> asHtml = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (asHtml != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "asHtml", ArgumentValue = asHtml} );

            return WithScalarField("body", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public ThreadQueryBuilder ExceptBody()
        {
            return ExceptField("body");
        }

        public ThreadQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public ThreadQueryBuilder WithReplyUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("replyUserId", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptReplyUserId()
        {
            return ExceptField("replyUserId");
        }

        public ThreadQueryBuilder WithReplyCommentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("replyCommentId", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptReplyCommentId()
        {
            return ExceptField("replyCommentId");
        }

        public ThreadQueryBuilder WithReplyCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("replyCount", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptReplyCount()
        {
            return ExceptField("replyCount");
        }

        public ThreadQueryBuilder WithViewCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("viewCount", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptViewCount()
        {
            return ExceptField("viewCount");
        }

        public ThreadQueryBuilder WithIsLocked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLocked", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptIsLocked()
        {
            return ExceptField("isLocked");
        }

        public ThreadQueryBuilder WithIsSticky(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSticky", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptIsSticky()
        {
            return ExceptField("isSticky");
        }

        public ThreadQueryBuilder WithIsSubscribed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSubscribed", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptIsSubscribed()
        {
            return ExceptField("isSubscribed");
        }

        public ThreadQueryBuilder WithLikeCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("likeCount", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptLikeCount()
        {
            return ExceptField("likeCount");
        }

        public ThreadQueryBuilder WithIsLiked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLiked", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptIsLiked()
        {
            return ExceptField("isLiked");
        }

        public ThreadQueryBuilder WithRepliedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("repliedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptRepliedAt()
        {
            return ExceptField("repliedAt");
        }

        public ThreadQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ThreadQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public ThreadQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }

        public ThreadQueryBuilder WithReplyUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("replyUser", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptReplyUser()
        {
            return ExceptField("replyUser");
        }

        public ThreadQueryBuilder WithLikes(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("likes", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptLikes()
        {
            return ExceptField("likes");
        }

        public ThreadQueryBuilder WithSiteUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("siteUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptSiteUrl()
        {
            return ExceptField("siteUrl");
        }

        public ThreadQueryBuilder WithCategories(ThreadCategoryQueryBuilder threadCategoryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("categories", alias, threadCategoryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptCategories()
        {
            return ExceptField("categories");
        }

        public ThreadQueryBuilder WithMediaCategories(MediaQueryBuilder mediaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mediaCategories", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadQueryBuilder ExceptMediaCategories()
        {
            return ExceptField("mediaCategories");
        }
    }

    public class ThreadCategoryQueryBuilder : GraphQlQueryBuilder<ThreadCategoryQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "ThreadCategory"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ThreadCategoryQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCategoryQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ThreadCategoryQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCategoryQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class ThreadCommentQueryBuilder : GraphQlQueryBuilder<ThreadCommentQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "userId" },
                new FieldMetadata { Name = "threadId" },
                new FieldMetadata { Name = "comment" },
                new FieldMetadata { Name = "likeCount" },
                new FieldMetadata { Name = "isLiked" },
                new FieldMetadata { Name = "siteUrl" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "updatedAt" },
                new FieldMetadata { Name = "thread", IsComplex = true, QueryBuilderType = typeof(ThreadQueryBuilder) },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "likes", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "childComments", IsComplex = true }
            };

        protected override string TypeName { get { return "ThreadComment"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ThreadCommentQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ThreadCommentQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public ThreadCommentQueryBuilder WithThreadId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("threadId", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentQueryBuilder ExceptThreadId()
        {
            return ExceptField("threadId");
        }

        public ThreadCommentQueryBuilder WithComment(QueryBuilderParameter<bool?> asHtml = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (asHtml != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "asHtml", ArgumentValue = asHtml} );

            return WithScalarField("comment", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public ThreadCommentQueryBuilder ExceptComment()
        {
            return ExceptField("comment");
        }

        public ThreadCommentQueryBuilder WithLikeCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("likeCount", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentQueryBuilder ExceptLikeCount()
        {
            return ExceptField("likeCount");
        }

        public ThreadCommentQueryBuilder WithIsLiked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLiked", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentQueryBuilder ExceptIsLiked()
        {
            return ExceptField("isLiked");
        }

        public ThreadCommentQueryBuilder WithSiteUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("siteUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentQueryBuilder ExceptSiteUrl()
        {
            return ExceptField("siteUrl");
        }

        public ThreadCommentQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ThreadCommentQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public ThreadCommentQueryBuilder WithThread(ThreadQueryBuilder threadQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("thread", alias, threadQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentQueryBuilder ExceptThread()
        {
            return ExceptField("thread");
        }

        public ThreadCommentQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }

        public ThreadCommentQueryBuilder WithLikes(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("likes", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentQueryBuilder ExceptLikes()
        {
            return ExceptField("likes");
        }

        public ThreadCommentQueryBuilder WithChildComments(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("childComments", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentQueryBuilder ExceptChildComments()
        {
            return ExceptField("childComments");
        }
    }

    public class ThreadCommentReplyNotificationQueryBuilder : GraphQlQueryBuilder<ThreadCommentReplyNotificationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "userId" },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "commentId" },
                new FieldMetadata { Name = "context" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "thread", IsComplex = true, QueryBuilderType = typeof(ThreadQueryBuilder) },
                new FieldMetadata { Name = "comment", IsComplex = true, QueryBuilderType = typeof(ThreadCommentQueryBuilder) },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "ThreadCommentReplyNotification"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ThreadCommentReplyNotificationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentReplyNotificationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ThreadCommentReplyNotificationQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentReplyNotificationQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public ThreadCommentReplyNotificationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentReplyNotificationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public ThreadCommentReplyNotificationQueryBuilder WithCommentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("commentId", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentReplyNotificationQueryBuilder ExceptCommentId()
        {
            return ExceptField("commentId");
        }

        public ThreadCommentReplyNotificationQueryBuilder WithContext(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("context", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentReplyNotificationQueryBuilder ExceptContext()
        {
            return ExceptField("context");
        }

        public ThreadCommentReplyNotificationQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentReplyNotificationQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ThreadCommentReplyNotificationQueryBuilder WithThread(ThreadQueryBuilder threadQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("thread", alias, threadQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentReplyNotificationQueryBuilder ExceptThread()
        {
            return ExceptField("thread");
        }

        public ThreadCommentReplyNotificationQueryBuilder WithComment(ThreadCommentQueryBuilder threadCommentQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("comment", alias, threadCommentQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentReplyNotificationQueryBuilder ExceptComment()
        {
            return ExceptField("comment");
        }

        public ThreadCommentReplyNotificationQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentReplyNotificationQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class ThreadCommentSubscribedNotificationQueryBuilder : GraphQlQueryBuilder<ThreadCommentSubscribedNotificationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "userId" },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "commentId" },
                new FieldMetadata { Name = "context" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "thread", IsComplex = true, QueryBuilderType = typeof(ThreadQueryBuilder) },
                new FieldMetadata { Name = "comment", IsComplex = true, QueryBuilderType = typeof(ThreadCommentQueryBuilder) },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "ThreadCommentSubscribedNotification"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ThreadCommentSubscribedNotificationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentSubscribedNotificationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ThreadCommentSubscribedNotificationQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentSubscribedNotificationQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public ThreadCommentSubscribedNotificationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentSubscribedNotificationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public ThreadCommentSubscribedNotificationQueryBuilder WithCommentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("commentId", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentSubscribedNotificationQueryBuilder ExceptCommentId()
        {
            return ExceptField("commentId");
        }

        public ThreadCommentSubscribedNotificationQueryBuilder WithContext(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("context", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentSubscribedNotificationQueryBuilder ExceptContext()
        {
            return ExceptField("context");
        }

        public ThreadCommentSubscribedNotificationQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentSubscribedNotificationQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ThreadCommentSubscribedNotificationQueryBuilder WithThread(ThreadQueryBuilder threadQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("thread", alias, threadQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentSubscribedNotificationQueryBuilder ExceptThread()
        {
            return ExceptField("thread");
        }

        public ThreadCommentSubscribedNotificationQueryBuilder WithComment(ThreadCommentQueryBuilder threadCommentQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("comment", alias, threadCommentQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentSubscribedNotificationQueryBuilder ExceptComment()
        {
            return ExceptField("comment");
        }

        public ThreadCommentSubscribedNotificationQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentSubscribedNotificationQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class ThreadCommentLikeNotificationQueryBuilder : GraphQlQueryBuilder<ThreadCommentLikeNotificationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "userId" },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "commentId" },
                new FieldMetadata { Name = "context" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "thread", IsComplex = true, QueryBuilderType = typeof(ThreadQueryBuilder) },
                new FieldMetadata { Name = "comment", IsComplex = true, QueryBuilderType = typeof(ThreadCommentQueryBuilder) },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "ThreadCommentLikeNotification"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ThreadCommentLikeNotificationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentLikeNotificationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ThreadCommentLikeNotificationQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentLikeNotificationQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public ThreadCommentLikeNotificationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentLikeNotificationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public ThreadCommentLikeNotificationQueryBuilder WithCommentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("commentId", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentLikeNotificationQueryBuilder ExceptCommentId()
        {
            return ExceptField("commentId");
        }

        public ThreadCommentLikeNotificationQueryBuilder WithContext(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("context", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentLikeNotificationQueryBuilder ExceptContext()
        {
            return ExceptField("context");
        }

        public ThreadCommentLikeNotificationQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentLikeNotificationQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ThreadCommentLikeNotificationQueryBuilder WithThread(ThreadQueryBuilder threadQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("thread", alias, threadQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentLikeNotificationQueryBuilder ExceptThread()
        {
            return ExceptField("thread");
        }

        public ThreadCommentLikeNotificationQueryBuilder WithComment(ThreadCommentQueryBuilder threadCommentQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("comment", alias, threadCommentQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentLikeNotificationQueryBuilder ExceptComment()
        {
            return ExceptField("comment");
        }

        public ThreadCommentLikeNotificationQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadCommentLikeNotificationQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class ThreadLikeNotificationQueryBuilder : GraphQlQueryBuilder<ThreadLikeNotificationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "userId" },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "threadId" },
                new FieldMetadata { Name = "context" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "thread", IsComplex = true, QueryBuilderType = typeof(ThreadQueryBuilder) },
                new FieldMetadata { Name = "comment", IsComplex = true, QueryBuilderType = typeof(ThreadCommentQueryBuilder) },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "ThreadLikeNotification"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ThreadLikeNotificationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadLikeNotificationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ThreadLikeNotificationQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadLikeNotificationQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public ThreadLikeNotificationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadLikeNotificationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public ThreadLikeNotificationQueryBuilder WithThreadId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("threadId", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadLikeNotificationQueryBuilder ExceptThreadId()
        {
            return ExceptField("threadId");
        }

        public ThreadLikeNotificationQueryBuilder WithContext(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("context", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadLikeNotificationQueryBuilder ExceptContext()
        {
            return ExceptField("context");
        }

        public ThreadLikeNotificationQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ThreadLikeNotificationQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ThreadLikeNotificationQueryBuilder WithThread(ThreadQueryBuilder threadQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("thread", alias, threadQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadLikeNotificationQueryBuilder ExceptThread()
        {
            return ExceptField("thread");
        }

        public ThreadLikeNotificationQueryBuilder WithComment(ThreadCommentQueryBuilder threadCommentQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("comment", alias, threadCommentQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadLikeNotificationQueryBuilder ExceptComment()
        {
            return ExceptField("comment");
        }

        public ThreadLikeNotificationQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThreadLikeNotificationQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class RelatedMediaAdditionNotificationQueryBuilder : GraphQlQueryBuilder<RelatedMediaAdditionNotificationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "mediaId" },
                new FieldMetadata { Name = "context" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "media", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) }
            };

        protected override string TypeName { get { return "RelatedMediaAdditionNotification"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public RelatedMediaAdditionNotificationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public RelatedMediaAdditionNotificationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public RelatedMediaAdditionNotificationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public RelatedMediaAdditionNotificationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public RelatedMediaAdditionNotificationQueryBuilder WithMediaId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mediaId", alias, new GraphQlDirective[] { include, skip });
        }

        public RelatedMediaAdditionNotificationQueryBuilder ExceptMediaId()
        {
            return ExceptField("mediaId");
        }

        public RelatedMediaAdditionNotificationQueryBuilder WithContext(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("context", alias, new GraphQlDirective[] { include, skip });
        }

        public RelatedMediaAdditionNotificationQueryBuilder ExceptContext()
        {
            return ExceptField("context");
        }

        public RelatedMediaAdditionNotificationQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public RelatedMediaAdditionNotificationQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public RelatedMediaAdditionNotificationQueryBuilder WithMedia(MediaQueryBuilder mediaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("media", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RelatedMediaAdditionNotificationQueryBuilder ExceptMedia()
        {
            return ExceptField("media");
        }
    }

    public class MediaListCollectionQueryBuilder : GraphQlQueryBuilder<MediaListCollectionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "lists", IsComplex = true, QueryBuilderType = typeof(MediaListGroupQueryBuilder) },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "hasNextChunk" }
            };

        protected override string TypeName { get { return "MediaListCollection"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaListCollectionQueryBuilder WithLists(MediaListGroupQueryBuilder mediaListGroupQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("lists", alias, mediaListGroupQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaListCollectionQueryBuilder ExceptLists()
        {
            return ExceptField("lists");
        }

        public MediaListCollectionQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaListCollectionQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }

        public MediaListCollectionQueryBuilder WithHasNextChunk(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasNextChunk", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListCollectionQueryBuilder ExceptHasNextChunk()
        {
            return ExceptField("hasNextChunk");
        }
    }

    public class MediaListGroupQueryBuilder : GraphQlQueryBuilder<MediaListGroupQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "entries", IsComplex = true, QueryBuilderType = typeof(MediaListQueryBuilder) },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "isCustomList" },
                new FieldMetadata { Name = "isSplitCompletedList" },
                new FieldMetadata { Name = "status" }
            };

        protected override string TypeName { get { return "MediaListGroup"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaListGroupQueryBuilder WithEntries(MediaListQueryBuilder mediaListQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("entries", alias, mediaListQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaListGroupQueryBuilder ExceptEntries()
        {
            return ExceptField("entries");
        }

        public MediaListGroupQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListGroupQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public MediaListGroupQueryBuilder WithIsCustomList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isCustomList", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListGroupQueryBuilder ExceptIsCustomList()
        {
            return ExceptField("isCustomList");
        }

        public MediaListGroupQueryBuilder WithIsSplitCompletedList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSplitCompletedList", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListGroupQueryBuilder ExceptIsSplitCompletedList()
        {
            return ExceptField("isSplitCompletedList");
        }

        public MediaListGroupQueryBuilder WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaListGroupQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }
    }

    public class ParsedMarkdownQueryBuilder : GraphQlQueryBuilder<ParsedMarkdownQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "html" }
            };

        protected override string TypeName { get { return "ParsedMarkdown"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ParsedMarkdownQueryBuilder WithHtml(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("html", alias, new GraphQlDirective[] { include, skip });
        }

        public ParsedMarkdownQueryBuilder ExceptHtml()
        {
            return ExceptField("html");
        }
    }

    public class AniChartUserQueryBuilder : GraphQlQueryBuilder<AniChartUserQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "settings", IsComplex = true },
                new FieldMetadata { Name = "highlights", IsComplex = true }
            };

        protected override string TypeName { get { return "AniChartUser"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AniChartUserQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AniChartUserQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }

        public AniChartUserQueryBuilder WithSettings(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("settings", alias, new GraphQlDirective[] { include, skip });
        }

        public AniChartUserQueryBuilder ExceptSettings()
        {
            return ExceptField("settings");
        }

        public AniChartUserQueryBuilder WithHighlights(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("highlights", alias, new GraphQlDirective[] { include, skip });
        }

        public AniChartUserQueryBuilder ExceptHighlights()
        {
            return ExceptField("highlights");
        }
    }

    public class SiteStatisticsQueryBuilder : GraphQlQueryBuilder<SiteStatisticsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "users", IsComplex = true, QueryBuilderType = typeof(SiteTrendConnectionQueryBuilder) },
                new FieldMetadata { Name = "anime", IsComplex = true, QueryBuilderType = typeof(SiteTrendConnectionQueryBuilder) },
                new FieldMetadata { Name = "manga", IsComplex = true, QueryBuilderType = typeof(SiteTrendConnectionQueryBuilder) },
                new FieldMetadata { Name = "characters", IsComplex = true, QueryBuilderType = typeof(SiteTrendConnectionQueryBuilder) },
                new FieldMetadata { Name = "staff", IsComplex = true, QueryBuilderType = typeof(SiteTrendConnectionQueryBuilder) },
                new FieldMetadata { Name = "studios", IsComplex = true, QueryBuilderType = typeof(SiteTrendConnectionQueryBuilder) },
                new FieldMetadata { Name = "reviews", IsComplex = true, QueryBuilderType = typeof(SiteTrendConnectionQueryBuilder) }
            };

        protected override string TypeName { get { return "SiteStatistics"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SiteStatisticsQueryBuilder WithUsers(SiteTrendConnectionQueryBuilder siteTrendConnectionQueryBuilder, QueryBuilderParameter<IEnumerable<SiteTrendSort?>> sort = null, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("users", alias, siteTrendConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteStatisticsQueryBuilder ExceptUsers()
        {
            return ExceptField("users");
        }

        public SiteStatisticsQueryBuilder WithAnime(SiteTrendConnectionQueryBuilder siteTrendConnectionQueryBuilder, QueryBuilderParameter<IEnumerable<SiteTrendSort?>> sort = null, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("anime", alias, siteTrendConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteStatisticsQueryBuilder ExceptAnime()
        {
            return ExceptField("anime");
        }

        public SiteStatisticsQueryBuilder WithManga(SiteTrendConnectionQueryBuilder siteTrendConnectionQueryBuilder, QueryBuilderParameter<IEnumerable<SiteTrendSort?>> sort = null, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("manga", alias, siteTrendConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteStatisticsQueryBuilder ExceptManga()
        {
            return ExceptField("manga");
        }

        public SiteStatisticsQueryBuilder WithCharacters(SiteTrendConnectionQueryBuilder siteTrendConnectionQueryBuilder, QueryBuilderParameter<IEnumerable<SiteTrendSort?>> sort = null, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("characters", alias, siteTrendConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteStatisticsQueryBuilder ExceptCharacters()
        {
            return ExceptField("characters");
        }

        public SiteStatisticsQueryBuilder WithStaff(SiteTrendConnectionQueryBuilder siteTrendConnectionQueryBuilder, QueryBuilderParameter<IEnumerable<SiteTrendSort?>> sort = null, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("staff", alias, siteTrendConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteStatisticsQueryBuilder ExceptStaff()
        {
            return ExceptField("staff");
        }

        public SiteStatisticsQueryBuilder WithStudios(SiteTrendConnectionQueryBuilder siteTrendConnectionQueryBuilder, QueryBuilderParameter<IEnumerable<SiteTrendSort?>> sort = null, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("studios", alias, siteTrendConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteStatisticsQueryBuilder ExceptStudios()
        {
            return ExceptField("studios");
        }

        public SiteStatisticsQueryBuilder WithReviews(SiteTrendConnectionQueryBuilder siteTrendConnectionQueryBuilder, QueryBuilderParameter<IEnumerable<SiteTrendSort?>> sort = null, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> perPage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (perPage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "perPage", ArgumentValue = perPage} );

            return WithObjectField("reviews", alias, siteTrendConnectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteStatisticsQueryBuilder ExceptReviews()
        {
            return ExceptField("reviews");
        }
    }

    public class SiteTrendConnectionQueryBuilder : GraphQlQueryBuilder<SiteTrendConnectionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(SiteTrendEdgeQueryBuilder) },
                new FieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(SiteTrendQueryBuilder) },
                new FieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "SiteTrendConnection"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SiteTrendConnectionQueryBuilder WithEdges(SiteTrendEdgeQueryBuilder siteTrendEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, siteTrendEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteTrendConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public SiteTrendConnectionQueryBuilder WithNodes(SiteTrendQueryBuilder siteTrendQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, siteTrendQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteTrendConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public SiteTrendConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteTrendConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class SiteTrendEdgeQueryBuilder : GraphQlQueryBuilder<SiteTrendEdgeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(SiteTrendQueryBuilder) }
            };

        protected override string TypeName { get { return "SiteTrendEdge"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SiteTrendEdgeQueryBuilder WithNode(SiteTrendQueryBuilder siteTrendQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, siteTrendQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteTrendEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class SiteTrendQueryBuilder : GraphQlQueryBuilder<SiteTrendQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "date" },
                new FieldMetadata { Name = "count" },
                new FieldMetadata { Name = "change" }
            };

        protected override string TypeName { get { return "SiteTrend"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SiteTrendQueryBuilder WithDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("date", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteTrendQueryBuilder ExceptDate()
        {
            return ExceptField("date");
        }

        public SiteTrendQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteTrendQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public SiteTrendQueryBuilder WithChange(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("change", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteTrendQueryBuilder ExceptChange()
        {
            return ExceptField("change");
        }
    }

    public class MutationQueryBuilder : GraphQlQueryBuilder<MutationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "UpdateUser", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "SaveMediaListEntry", IsComplex = true, QueryBuilderType = typeof(MediaListQueryBuilder) },
                new FieldMetadata { Name = "UpdateMediaListEntries", IsComplex = true, QueryBuilderType = typeof(MediaListQueryBuilder) },
                new FieldMetadata { Name = "DeleteMediaListEntry", IsComplex = true, QueryBuilderType = typeof(DeletedQueryBuilder) },
                new FieldMetadata { Name = "DeleteCustomList", IsComplex = true, QueryBuilderType = typeof(DeletedQueryBuilder) },
                new FieldMetadata { Name = "SaveTextActivity", IsComplex = true, QueryBuilderType = typeof(TextActivityQueryBuilder) },
                new FieldMetadata { Name = "SaveMessageActivity", IsComplex = true, QueryBuilderType = typeof(MessageActivityQueryBuilder) },
                new FieldMetadata { Name = "SaveListActivity", IsComplex = true, QueryBuilderType = typeof(ListActivityQueryBuilder) },
                new FieldMetadata { Name = "DeleteActivity", IsComplex = true, QueryBuilderType = typeof(DeletedQueryBuilder) },
                new FieldMetadata { Name = "ToggleActivitySubscription", IsComplex = true, QueryBuilderType = typeof(ActivityUnionQueryBuilder) },
                new FieldMetadata { Name = "SaveActivityReply", IsComplex = true, QueryBuilderType = typeof(ActivityReplyQueryBuilder) },
                new FieldMetadata { Name = "DeleteActivityReply", IsComplex = true, QueryBuilderType = typeof(DeletedQueryBuilder) },
                new FieldMetadata { Name = "ToggleLike", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "ToggleLikeV2", IsComplex = true, QueryBuilderType = typeof(LikeableUnionQueryBuilder) },
                new FieldMetadata { Name = "ToggleFollow", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "ToggleFavourite", IsComplex = true, QueryBuilderType = typeof(FavouritesQueryBuilder) },
                new FieldMetadata { Name = "UpdateFavouriteOrder", IsComplex = true, QueryBuilderType = typeof(FavouritesQueryBuilder) },
                new FieldMetadata { Name = "SaveReview", IsComplex = true, QueryBuilderType = typeof(ReviewQueryBuilder) },
                new FieldMetadata { Name = "DeleteReview", IsComplex = true, QueryBuilderType = typeof(DeletedQueryBuilder) },
                new FieldMetadata { Name = "RateReview", IsComplex = true, QueryBuilderType = typeof(ReviewQueryBuilder) },
                new FieldMetadata { Name = "SaveRecommendation", IsComplex = true, QueryBuilderType = typeof(RecommendationQueryBuilder) },
                new FieldMetadata { Name = "SaveThread", IsComplex = true, QueryBuilderType = typeof(ThreadQueryBuilder) },
                new FieldMetadata { Name = "DeleteThread", IsComplex = true, QueryBuilderType = typeof(DeletedQueryBuilder) },
                new FieldMetadata { Name = "ToggleThreadSubscription", IsComplex = true, QueryBuilderType = typeof(ThreadQueryBuilder) },
                new FieldMetadata { Name = "SaveThreadComment", IsComplex = true, QueryBuilderType = typeof(ThreadCommentQueryBuilder) },
                new FieldMetadata { Name = "DeleteThreadComment", IsComplex = true, QueryBuilderType = typeof(DeletedQueryBuilder) },
                new FieldMetadata { Name = "UpdateAniChartSettings", IsComplex = true },
                new FieldMetadata { Name = "UpdateAniChartHighlights", IsComplex = true }
            };

        protected override string TypeName { get { return "Mutation"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MutationQueryBuilder(string operationName = null) : base("mutation", operationName)
        {
        }

        public MutationQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public MutationQueryBuilder WithUpdateUser(UserQueryBuilder userQueryBuilder, QueryBuilderParameter<string> about = null, QueryBuilderParameter<UserTitleLanguage?> titleLanguage = null, QueryBuilderParameter<bool?> displayAdultContent = null, QueryBuilderParameter<bool?> airingNotifications = null, QueryBuilderParameter<ScoreFormat?> scoreFormat = null, QueryBuilderParameter<string> rowOrder = null, QueryBuilderParameter<string> profileColor = null, QueryBuilderParameter<string> donatorBadge = null, QueryBuilderParameter<IEnumerable<NotificationOptionInput>> notificationOptions = null, QueryBuilderParameter<string> timezone = null, QueryBuilderParameter<int?> activityMergeTime = null, QueryBuilderParameter<MediaListOptionsInput> animeListOptions = null, QueryBuilderParameter<MediaListOptionsInput> mangaListOptions = null, QueryBuilderParameter<UserStaffNameLanguage?> staffNameLanguage = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (about != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "about", ArgumentValue = about} );

            if (titleLanguage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "titleLanguage", ArgumentValue = titleLanguage} );

            if (displayAdultContent != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "displayAdultContent", ArgumentValue = displayAdultContent} );

            if (airingNotifications != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "airingNotifications", ArgumentValue = airingNotifications} );

            if (scoreFormat != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "scoreFormat", ArgumentValue = scoreFormat} );

            if (rowOrder != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "rowOrder", ArgumentValue = rowOrder} );

            if (profileColor != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "profileColor", ArgumentValue = profileColor} );

            if (donatorBadge != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "donatorBadge", ArgumentValue = donatorBadge} );

            if (notificationOptions != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "notificationOptions", ArgumentValue = notificationOptions} );

            if (timezone != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "timezone", ArgumentValue = timezone} );

            if (activityMergeTime != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "activityMergeTime", ArgumentValue = activityMergeTime} );

            if (animeListOptions != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "animeListOptions", ArgumentValue = animeListOptions} );

            if (mangaListOptions != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mangaListOptions", ArgumentValue = mangaListOptions} );

            if (staffNameLanguage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "staffNameLanguage", ArgumentValue = staffNameLanguage} );

            return WithObjectField("UpdateUser", alias, userQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateUser()
        {
            return ExceptField("UpdateUser");
        }

        public MutationQueryBuilder WithSaveMediaListEntry(MediaListQueryBuilder mediaListQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<MediaListStatus?> status = null, QueryBuilderParameter<decimal?> score = null, QueryBuilderParameter<int?> scoreRaw = null, QueryBuilderParameter<int?> progress = null, QueryBuilderParameter<int?> progressVolumes = null, QueryBuilderParameter<int?> repeat = null, QueryBuilderParameter<int?> priority = null, QueryBuilderParameter<bool?> @private = null, QueryBuilderParameter<string> notes = null, QueryBuilderParameter<bool?> hiddenFromStatusLists = null, QueryBuilderParameter<IEnumerable<string>> customLists = null, QueryBuilderParameter<IEnumerable<decimal?>> advancedScores = null, QueryBuilderParameter<FuzzyDateInput> startedAt = null, QueryBuilderParameter<FuzzyDateInput> completedAt = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            if (score != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "score", ArgumentValue = score} );

            if (scoreRaw != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "scoreRaw", ArgumentValue = scoreRaw} );

            if (progress != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "progress", ArgumentValue = progress} );

            if (progressVolumes != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "progressVolumes", ArgumentValue = progressVolumes} );

            if (repeat != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "repeat", ArgumentValue = repeat} );

            if (priority != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "priority", ArgumentValue = priority} );

            if (@private != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "private", ArgumentValue = @private} );

            if (notes != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "notes", ArgumentValue = notes} );

            if (hiddenFromStatusLists != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "hiddenFromStatusLists", ArgumentValue = hiddenFromStatusLists} );

            if (customLists != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "customLists", ArgumentValue = customLists} );

            if (advancedScores != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "advancedScores", ArgumentValue = advancedScores} );

            if (startedAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startedAt", ArgumentValue = startedAt} );

            if (completedAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "completedAt", ArgumentValue = completedAt} );

            return WithObjectField("SaveMediaListEntry", alias, mediaListQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptSaveMediaListEntry()
        {
            return ExceptField("SaveMediaListEntry");
        }

        public MutationQueryBuilder WithUpdateMediaListEntries(MediaListQueryBuilder mediaListQueryBuilder, QueryBuilderParameter<MediaListStatus?> status = null, QueryBuilderParameter<decimal?> score = null, QueryBuilderParameter<int?> scoreRaw = null, QueryBuilderParameter<int?> progress = null, QueryBuilderParameter<int?> progressVolumes = null, QueryBuilderParameter<int?> repeat = null, QueryBuilderParameter<int?> priority = null, QueryBuilderParameter<bool?> @private = null, QueryBuilderParameter<string> notes = null, QueryBuilderParameter<bool?> hiddenFromStatusLists = null, QueryBuilderParameter<IEnumerable<decimal?>> advancedScores = null, QueryBuilderParameter<FuzzyDateInput> startedAt = null, QueryBuilderParameter<FuzzyDateInput> completedAt = null, QueryBuilderParameter<IEnumerable<int?>> ids = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            if (score != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "score", ArgumentValue = score} );

            if (scoreRaw != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "scoreRaw", ArgumentValue = scoreRaw} );

            if (progress != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "progress", ArgumentValue = progress} );

            if (progressVolumes != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "progressVolumes", ArgumentValue = progressVolumes} );

            if (repeat != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "repeat", ArgumentValue = repeat} );

            if (priority != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "priority", ArgumentValue = priority} );

            if (@private != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "private", ArgumentValue = @private} );

            if (notes != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "notes", ArgumentValue = notes} );

            if (hiddenFromStatusLists != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "hiddenFromStatusLists", ArgumentValue = hiddenFromStatusLists} );

            if (advancedScores != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "advancedScores", ArgumentValue = advancedScores} );

            if (startedAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startedAt", ArgumentValue = startedAt} );

            if (completedAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "completedAt", ArgumentValue = completedAt} );

            if (ids != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "ids", ArgumentValue = ids} );

            return WithObjectField("UpdateMediaListEntries", alias, mediaListQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateMediaListEntries()
        {
            return ExceptField("UpdateMediaListEntries");
        }

        public MutationQueryBuilder WithDeleteMediaListEntry(DeletedQueryBuilder deletedQueryBuilder, QueryBuilderParameter<int?> id = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            return WithObjectField("DeleteMediaListEntry", alias, deletedQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteMediaListEntry()
        {
            return ExceptField("DeleteMediaListEntry");
        }

        public MutationQueryBuilder WithDeleteCustomList(DeletedQueryBuilder deletedQueryBuilder, QueryBuilderParameter<string> customList = null, QueryBuilderParameter<MediaType?> type = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (customList != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "customList", ArgumentValue = customList} );

            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            return WithObjectField("DeleteCustomList", alias, deletedQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteCustomList()
        {
            return ExceptField("DeleteCustomList");
        }

        public MutationQueryBuilder WithSaveTextActivity(TextActivityQueryBuilder textActivityQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<string> text = null, QueryBuilderParameter<bool?> locked = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (text != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "text", ArgumentValue = text} );

            if (locked != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "locked", ArgumentValue = locked} );

            return WithObjectField("SaveTextActivity", alias, textActivityQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptSaveTextActivity()
        {
            return ExceptField("SaveTextActivity");
        }

        public MutationQueryBuilder WithSaveMessageActivity(MessageActivityQueryBuilder messageActivityQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<string> message = null, QueryBuilderParameter<int?> recipientId = null, QueryBuilderParameter<bool?> @private = null, QueryBuilderParameter<bool?> locked = null, QueryBuilderParameter<bool?> asMod = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (message != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "message", ArgumentValue = message} );

            if (recipientId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "recipientId", ArgumentValue = recipientId} );

            if (@private != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "private", ArgumentValue = @private} );

            if (locked != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "locked", ArgumentValue = locked} );

            if (asMod != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "asMod", ArgumentValue = asMod} );

            return WithObjectField("SaveMessageActivity", alias, messageActivityQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptSaveMessageActivity()
        {
            return ExceptField("SaveMessageActivity");
        }

        public MutationQueryBuilder WithSaveListActivity(ListActivityQueryBuilder listActivityQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<bool?> locked = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (locked != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "locked", ArgumentValue = locked} );

            return WithObjectField("SaveListActivity", alias, listActivityQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptSaveListActivity()
        {
            return ExceptField("SaveListActivity");
        }

        public MutationQueryBuilder WithDeleteActivity(DeletedQueryBuilder deletedQueryBuilder, QueryBuilderParameter<int?> id = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            return WithObjectField("DeleteActivity", alias, deletedQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteActivity()
        {
            return ExceptField("DeleteActivity");
        }

        public MutationQueryBuilder WithToggleActivitySubscription(ActivityUnionQueryBuilder activityUnionQueryBuilder, QueryBuilderParameter<int?> activityId = null, QueryBuilderParameter<bool?> subscribe = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (activityId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "activityId", ArgumentValue = activityId} );

            if (subscribe != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subscribe", ArgumentValue = subscribe} );

            return WithObjectField("ToggleActivitySubscription", alias, activityUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptToggleActivitySubscription()
        {
            return ExceptField("ToggleActivitySubscription");
        }

        public MutationQueryBuilder WithSaveActivityReply(ActivityReplyQueryBuilder activityReplyQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> activityId = null, QueryBuilderParameter<string> text = null, QueryBuilderParameter<bool?> asMod = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (activityId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "activityId", ArgumentValue = activityId} );

            if (text != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "text", ArgumentValue = text} );

            if (asMod != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "asMod", ArgumentValue = asMod} );

            return WithObjectField("SaveActivityReply", alias, activityReplyQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptSaveActivityReply()
        {
            return ExceptField("SaveActivityReply");
        }

        public MutationQueryBuilder WithDeleteActivityReply(DeletedQueryBuilder deletedQueryBuilder, QueryBuilderParameter<int?> id = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            return WithObjectField("DeleteActivityReply", alias, deletedQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteActivityReply()
        {
            return ExceptField("DeleteActivityReply");
        }

        public MutationQueryBuilder WithToggleLike(UserQueryBuilder userQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<LikeableType?> type = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            return WithObjectField("ToggleLike", alias, userQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptToggleLike()
        {
            return ExceptField("ToggleLike");
        }

        public MutationQueryBuilder WithToggleLikeV2(LikeableUnionQueryBuilder likeableUnionQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<LikeableType?> type = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            return WithObjectField("ToggleLikeV2", alias, likeableUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptToggleLikeV2()
        {
            return ExceptField("ToggleLikeV2");
        }

        public MutationQueryBuilder WithToggleFollow(UserQueryBuilder userQueryBuilder, QueryBuilderParameter<int?> userId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            return WithObjectField("ToggleFollow", alias, userQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptToggleFollow()
        {
            return ExceptField("ToggleFollow");
        }

        public MutationQueryBuilder WithToggleFavourite(FavouritesQueryBuilder favouritesQueryBuilder, QueryBuilderParameter<int?> animeId = null, QueryBuilderParameter<int?> mangaId = null, QueryBuilderParameter<int?> characterId = null, QueryBuilderParameter<int?> staffId = null, QueryBuilderParameter<int?> studioId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (animeId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "animeId", ArgumentValue = animeId} );

            if (mangaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mangaId", ArgumentValue = mangaId} );

            if (characterId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "characterId", ArgumentValue = characterId} );

            if (staffId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "staffId", ArgumentValue = staffId} );

            if (studioId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "studioId", ArgumentValue = studioId} );

            return WithObjectField("ToggleFavourite", alias, favouritesQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptToggleFavourite()
        {
            return ExceptField("ToggleFavourite");
        }

        public MutationQueryBuilder WithUpdateFavouriteOrder(FavouritesQueryBuilder favouritesQueryBuilder, QueryBuilderParameter<IEnumerable<int?>> animeIds = null, QueryBuilderParameter<IEnumerable<int?>> mangaIds = null, QueryBuilderParameter<IEnumerable<int?>> characterIds = null, QueryBuilderParameter<IEnumerable<int?>> staffIds = null, QueryBuilderParameter<IEnumerable<int?>> studioIds = null, QueryBuilderParameter<IEnumerable<int?>> animeOrder = null, QueryBuilderParameter<IEnumerable<int?>> mangaOrder = null, QueryBuilderParameter<IEnumerable<int?>> characterOrder = null, QueryBuilderParameter<IEnumerable<int?>> staffOrder = null, QueryBuilderParameter<IEnumerable<int?>> studioOrder = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (animeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "animeIds", ArgumentValue = animeIds} );

            if (mangaIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mangaIds", ArgumentValue = mangaIds} );

            if (characterIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "characterIds", ArgumentValue = characterIds} );

            if (staffIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "staffIds", ArgumentValue = staffIds} );

            if (studioIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "studioIds", ArgumentValue = studioIds} );

            if (animeOrder != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "animeOrder", ArgumentValue = animeOrder} );

            if (mangaOrder != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mangaOrder", ArgumentValue = mangaOrder} );

            if (characterOrder != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "characterOrder", ArgumentValue = characterOrder} );

            if (staffOrder != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "staffOrder", ArgumentValue = staffOrder} );

            if (studioOrder != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "studioOrder", ArgumentValue = studioOrder} );

            return WithObjectField("UpdateFavouriteOrder", alias, favouritesQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateFavouriteOrder()
        {
            return ExceptField("UpdateFavouriteOrder");
        }

        public MutationQueryBuilder WithSaveReview(ReviewQueryBuilder reviewQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<string> body = null, QueryBuilderParameter<string> summary = null, QueryBuilderParameter<int?> score = null, QueryBuilderParameter<bool?> @private = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (body != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "body", ArgumentValue = body} );

            if (summary != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "summary", ArgumentValue = summary} );

            if (score != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "score", ArgumentValue = score} );

            if (@private != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "private", ArgumentValue = @private} );

            return WithObjectField("SaveReview", alias, reviewQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptSaveReview()
        {
            return ExceptField("SaveReview");
        }

        public MutationQueryBuilder WithDeleteReview(DeletedQueryBuilder deletedQueryBuilder, QueryBuilderParameter<int?> id = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            return WithObjectField("DeleteReview", alias, deletedQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteReview()
        {
            return ExceptField("DeleteReview");
        }

        public MutationQueryBuilder WithRateReview(ReviewQueryBuilder reviewQueryBuilder, QueryBuilderParameter<int?> reviewId = null, QueryBuilderParameter<ReviewRating?> rating = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (reviewId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reviewId", ArgumentValue = reviewId} );

            if (rating != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "rating", ArgumentValue = rating} );

            return WithObjectField("RateReview", alias, reviewQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptRateReview()
        {
            return ExceptField("RateReview");
        }

        public MutationQueryBuilder WithSaveRecommendation(RecommendationQueryBuilder recommendationQueryBuilder, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<int?> mediaRecommendationId = null, QueryBuilderParameter<RecommendationRating?> rating = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (mediaRecommendationId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaRecommendationId", ArgumentValue = mediaRecommendationId} );

            if (rating != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "rating", ArgumentValue = rating} );

            return WithObjectField("SaveRecommendation", alias, recommendationQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptSaveRecommendation()
        {
            return ExceptField("SaveRecommendation");
        }

        public MutationQueryBuilder WithSaveThread(ThreadQueryBuilder threadQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<string> title = null, QueryBuilderParameter<string> body = null, QueryBuilderParameter<IEnumerable<int?>> categories = null, QueryBuilderParameter<IEnumerable<int?>> mediaCategories = null, QueryBuilderParameter<bool?> sticky = null, QueryBuilderParameter<bool?> locked = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (title != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "title", ArgumentValue = title} );

            if (body != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "body", ArgumentValue = body} );

            if (categories != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "categories", ArgumentValue = categories} );

            if (mediaCategories != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaCategories", ArgumentValue = mediaCategories} );

            if (sticky != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sticky", ArgumentValue = sticky} );

            if (locked != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "locked", ArgumentValue = locked} );

            return WithObjectField("SaveThread", alias, threadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptSaveThread()
        {
            return ExceptField("SaveThread");
        }

        public MutationQueryBuilder WithDeleteThread(DeletedQueryBuilder deletedQueryBuilder, QueryBuilderParameter<int?> id = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            return WithObjectField("DeleteThread", alias, deletedQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteThread()
        {
            return ExceptField("DeleteThread");
        }

        public MutationQueryBuilder WithToggleThreadSubscription(ThreadQueryBuilder threadQueryBuilder, QueryBuilderParameter<int?> threadId = null, QueryBuilderParameter<bool?> subscribe = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (threadId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "threadId", ArgumentValue = threadId} );

            if (subscribe != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subscribe", ArgumentValue = subscribe} );

            return WithObjectField("ToggleThreadSubscription", alias, threadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptToggleThreadSubscription()
        {
            return ExceptField("ToggleThreadSubscription");
        }

        public MutationQueryBuilder WithSaveThreadComment(ThreadCommentQueryBuilder threadCommentQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> threadId = null, QueryBuilderParameter<int?> parentCommentId = null, QueryBuilderParameter<string> comment = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (threadId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "threadId", ArgumentValue = threadId} );

            if (parentCommentId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "parentCommentId", ArgumentValue = parentCommentId} );

            if (comment != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "comment", ArgumentValue = comment} );

            return WithObjectField("SaveThreadComment", alias, threadCommentQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptSaveThreadComment()
        {
            return ExceptField("SaveThreadComment");
        }

        public MutationQueryBuilder WithDeleteThreadComment(DeletedQueryBuilder deletedQueryBuilder, QueryBuilderParameter<int?> id = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            return WithObjectField("DeleteThreadComment", alias, deletedQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteThreadComment()
        {
            return ExceptField("DeleteThreadComment");
        }

        public MutationQueryBuilder WithUpdateAniChartSettings(QueryBuilderParameter<string> titleLanguage = null, QueryBuilderParameter<string> outgoingLinkProvider = null, QueryBuilderParameter<string> theme = null, QueryBuilderParameter<string> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (titleLanguage != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "titleLanguage", ArgumentValue = titleLanguage} );

            if (outgoingLinkProvider != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "outgoingLinkProvider", ArgumentValue = outgoingLinkProvider} );

            if (theme != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "theme", ArgumentValue = theme} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithScalarField("UpdateAniChartSettings", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateAniChartSettings()
        {
            return ExceptField("UpdateAniChartSettings");
        }

        public MutationQueryBuilder WithUpdateAniChartHighlights(QueryBuilderParameter<IEnumerable<AniChartHighlightInput>> highlights = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (highlights != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "highlights", ArgumentValue = highlights} );

            return WithScalarField("UpdateAniChartHighlights", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateAniChartHighlights()
        {
            return ExceptField("UpdateAniChartHighlights");
        }
    }

    public class DeletedQueryBuilder : GraphQlQueryBuilder<DeletedQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "deleted" }
            };

        protected override string TypeName { get { return "Deleted"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DeletedQueryBuilder WithDeleted(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deleted", alias, new GraphQlDirective[] { include, skip });
        }

        public DeletedQueryBuilder ExceptDeleted()
        {
            return ExceptField("deleted");
        }
    }

    public class LikeableUnionQueryBuilder : GraphQlQueryBuilder<LikeableUnionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata = new FieldMetadata[0];

        protected override string TypeName { get { return "LikeableUnion"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LikeableUnionQueryBuilder WithListActivityFragment(ListActivityQueryBuilder listActivityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(listActivityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LikeableUnionQueryBuilder WithTextActivityFragment(TextActivityQueryBuilder textActivityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(textActivityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LikeableUnionQueryBuilder WithMessageActivityFragment(MessageActivityQueryBuilder messageActivityQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(messageActivityQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LikeableUnionQueryBuilder WithActivityReplyFragment(ActivityReplyQueryBuilder activityReplyQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(activityReplyQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LikeableUnionQueryBuilder WithThreadFragment(ThreadQueryBuilder threadQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(threadQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LikeableUnionQueryBuilder WithThreadCommentFragment(ThreadCommentQueryBuilder threadCommentQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(threadCommentQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class InternalPageQueryBuilder : GraphQlQueryBuilder<InternalPageQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "mediaSubmissions", IsComplex = true, QueryBuilderType = typeof(MediaSubmissionQueryBuilder) },
                new FieldMetadata { Name = "characterSubmissions", IsComplex = true, QueryBuilderType = typeof(CharacterSubmissionQueryBuilder) },
                new FieldMetadata { Name = "staffSubmissions", IsComplex = true, QueryBuilderType = typeof(StaffSubmissionQueryBuilder) },
                new FieldMetadata { Name = "revisionHistory", IsComplex = true, QueryBuilderType = typeof(RevisionHistoryQueryBuilder) },
                new FieldMetadata { Name = "reports", IsComplex = true, QueryBuilderType = typeof(ReportQueryBuilder) },
                new FieldMetadata { Name = "modActions", IsComplex = true, QueryBuilderType = typeof(ModActionQueryBuilder) },
                new FieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) },
                new FieldMetadata { Name = "users", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "media", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) },
                new FieldMetadata { Name = "characters", IsComplex = true, QueryBuilderType = typeof(CharacterQueryBuilder) },
                new FieldMetadata { Name = "staff", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) },
                new FieldMetadata { Name = "studios", IsComplex = true, QueryBuilderType = typeof(StudioQueryBuilder) },
                new FieldMetadata { Name = "mediaList", IsComplex = true, QueryBuilderType = typeof(MediaListQueryBuilder) },
                new FieldMetadata { Name = "airingSchedules", IsComplex = true, QueryBuilderType = typeof(AiringScheduleQueryBuilder) },
                new FieldMetadata { Name = "mediaTrends", IsComplex = true, QueryBuilderType = typeof(MediaTrendQueryBuilder) },
                new FieldMetadata { Name = "notifications", IsComplex = true, QueryBuilderType = typeof(NotificationUnionQueryBuilder) },
                new FieldMetadata { Name = "followers", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "following", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "activities", IsComplex = true, QueryBuilderType = typeof(ActivityUnionQueryBuilder) },
                new FieldMetadata { Name = "activityReplies", IsComplex = true, QueryBuilderType = typeof(ActivityReplyQueryBuilder) },
                new FieldMetadata { Name = "threads", IsComplex = true, QueryBuilderType = typeof(ThreadQueryBuilder) },
                new FieldMetadata { Name = "threadComments", IsComplex = true, QueryBuilderType = typeof(ThreadCommentQueryBuilder) },
                new FieldMetadata { Name = "reviews", IsComplex = true, QueryBuilderType = typeof(ReviewQueryBuilder) },
                new FieldMetadata { Name = "recommendations", IsComplex = true, QueryBuilderType = typeof(RecommendationQueryBuilder) },
                new FieldMetadata { Name = "likes", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "InternalPage"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public InternalPageQueryBuilder WithMediaSubmissions(MediaSubmissionQueryBuilder mediaSubmissionQueryBuilder, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<int?> submissionId = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<SubmissionStatus?> status = null, QueryBuilderParameter<MediaType?> type = null, QueryBuilderParameter<IEnumerable<SubmissionSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (submissionId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "submissionId", ArgumentValue = submissionId} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("mediaSubmissions", alias, mediaSubmissionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptMediaSubmissions()
        {
            return ExceptField("mediaSubmissions");
        }

        public InternalPageQueryBuilder WithCharacterSubmissions(CharacterSubmissionQueryBuilder characterSubmissionQueryBuilder, QueryBuilderParameter<int?> characterId = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<SubmissionStatus?> status = null, QueryBuilderParameter<IEnumerable<SubmissionSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (characterId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "characterId", ArgumentValue = characterId} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("characterSubmissions", alias, characterSubmissionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptCharacterSubmissions()
        {
            return ExceptField("characterSubmissions");
        }

        public InternalPageQueryBuilder WithStaffSubmissions(StaffSubmissionQueryBuilder staffSubmissionQueryBuilder, QueryBuilderParameter<int?> staffId = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<SubmissionStatus?> status = null, QueryBuilderParameter<IEnumerable<SubmissionSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (staffId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "staffId", ArgumentValue = staffId} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("staffSubmissions", alias, staffSubmissionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptStaffSubmissions()
        {
            return ExceptField("staffSubmissions");
        }

        public InternalPageQueryBuilder WithRevisionHistory(RevisionHistoryQueryBuilder revisionHistoryQueryBuilder, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<int?> characterId = null, QueryBuilderParameter<int?> staffId = null, QueryBuilderParameter<int?> studioId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (characterId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "characterId", ArgumentValue = characterId} );

            if (staffId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "staffId", ArgumentValue = staffId} );

            if (studioId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "studioId", ArgumentValue = studioId} );

            return WithObjectField("revisionHistory", alias, revisionHistoryQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptRevisionHistory()
        {
            return ExceptField("revisionHistory");
        }

        public InternalPageQueryBuilder WithReports(ReportQueryBuilder reportQueryBuilder, QueryBuilderParameter<int?> reporterId = null, QueryBuilderParameter<int?> reportedId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (reporterId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reporterId", ArgumentValue = reporterId} );

            if (reportedId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "reportedId", ArgumentValue = reportedId} );

            return WithObjectField("reports", alias, reportQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptReports()
        {
            return ExceptField("reports");
        }

        public InternalPageQueryBuilder WithModActions(ModActionQueryBuilder modActionQueryBuilder, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<int?> modId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (modId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "modId", ArgumentValue = modId} );

            return WithObjectField("modActions", alias, modActionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptModActions()
        {
            return ExceptField("modActions");
        }

        public InternalPageQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InternalPageQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }

        public InternalPageQueryBuilder WithUsers(UserQueryBuilder userQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<string> name = null, QueryBuilderParameter<bool?> isModerator = null, QueryBuilderParameter<string> search = null, QueryBuilderParameter<IEnumerable<UserSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (name != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );

            if (isModerator != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isModerator", ArgumentValue = isModerator} );

            if (search != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "search", ArgumentValue = search} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("users", alias, userQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptUsers()
        {
            return ExceptField("users");
        }

        public InternalPageQueryBuilder WithMedia(MediaQueryBuilder mediaQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> idMal = null, QueryBuilderParameter<object> startDate = null, QueryBuilderParameter<object> endDate = null, QueryBuilderParameter<MediaSeason?> season = null, QueryBuilderParameter<int?> seasonYear = null, QueryBuilderParameter<MediaType?> type = null, QueryBuilderParameter<MediaFormat?> format = null, QueryBuilderParameter<MediaStatus?> status = null, QueryBuilderParameter<int?> episodes = null, QueryBuilderParameter<int?> duration = null, QueryBuilderParameter<int?> chapters = null, QueryBuilderParameter<int?> volumes = null, QueryBuilderParameter<bool?> isAdult = null, QueryBuilderParameter<string> genre = null, QueryBuilderParameter<string> tag = null, QueryBuilderParameter<int?> minimumTagRank = null, QueryBuilderParameter<string> tagCategory = null, QueryBuilderParameter<bool?> onList = null, QueryBuilderParameter<string> licensedBy = null, QueryBuilderParameter<int?> averageScore = null, QueryBuilderParameter<int?> popularity = null, QueryBuilderParameter<MediaSource?> source = null, QueryBuilderParameter<object> countryOfOrigin = null, QueryBuilderParameter<string> search = null, QueryBuilderParameter<int?> idNot = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<int?>> idNotIn = null, QueryBuilderParameter<int?> idMalNot = null, QueryBuilderParameter<IEnumerable<int?>> idMalIn = null, QueryBuilderParameter<IEnumerable<int?>> idMalNotIn = null, QueryBuilderParameter<object> startDateGreater = null, QueryBuilderParameter<object> startDateLesser = null, QueryBuilderParameter<string> startDateLike = null, QueryBuilderParameter<object> endDateGreater = null, QueryBuilderParameter<object> endDateLesser = null, QueryBuilderParameter<string> endDateLike = null, QueryBuilderParameter<IEnumerable<MediaFormat?>> formatIn = null, QueryBuilderParameter<MediaFormat?> formatNot = null, QueryBuilderParameter<IEnumerable<MediaFormat?>> formatNotIn = null, QueryBuilderParameter<IEnumerable<MediaStatus?>> statusIn = null, QueryBuilderParameter<MediaStatus?> statusNot = null, QueryBuilderParameter<IEnumerable<MediaStatus?>> statusNotIn = null, QueryBuilderParameter<int?> episodesGreater = null, QueryBuilderParameter<int?> episodesLesser = null, QueryBuilderParameter<int?> durationGreater = null, QueryBuilderParameter<int?> durationLesser = null, QueryBuilderParameter<int?> chaptersGreater = null, QueryBuilderParameter<int?> chaptersLesser = null, QueryBuilderParameter<int?> volumesGreater = null, QueryBuilderParameter<int?> volumesLesser = null, QueryBuilderParameter<IEnumerable<string>> genreIn = null, QueryBuilderParameter<IEnumerable<string>> genreNotIn = null, QueryBuilderParameter<IEnumerable<string>> tagIn = null, QueryBuilderParameter<IEnumerable<string>> tagNotIn = null, QueryBuilderParameter<IEnumerable<string>> tagCategoryIn = null, QueryBuilderParameter<IEnumerable<string>> tagCategoryNotIn = null, QueryBuilderParameter<IEnumerable<string>> licensedByIn = null, QueryBuilderParameter<int?> averageScoreNot = null, QueryBuilderParameter<int?> averageScoreGreater = null, QueryBuilderParameter<int?> averageScoreLesser = null, QueryBuilderParameter<int?> popularityNot = null, QueryBuilderParameter<int?> popularityGreater = null, QueryBuilderParameter<int?> popularityLesser = null, QueryBuilderParameter<IEnumerable<MediaSource?>> sourceIn = null, QueryBuilderParameter<IEnumerable<MediaSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (idMal != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "idMal", ArgumentValue = idMal} );

            if (startDate != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startDate", ArgumentValue = startDate} );

            if (endDate != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "endDate", ArgumentValue = endDate} );

            if (season != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "season", ArgumentValue = season} );

            if (seasonYear != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "seasonYear", ArgumentValue = seasonYear} );

            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            if (format != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "format", ArgumentValue = format} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            if (episodes != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episodes", ArgumentValue = episodes} );

            if (duration != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "duration", ArgumentValue = duration} );

            if (chapters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "chapters", ArgumentValue = chapters} );

            if (volumes != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "volumes", ArgumentValue = volumes} );

            if (isAdult != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isAdult", ArgumentValue = isAdult} );

            if (genre != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "genre", ArgumentValue = genre} );

            if (tag != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tag", ArgumentValue = tag} );

            if (minimumTagRank != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "minimumTagRank", ArgumentValue = minimumTagRank} );

            if (tagCategory != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tagCategory", ArgumentValue = tagCategory} );

            if (onList != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "onList", ArgumentValue = onList} );

            if (licensedBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "licensedBy", ArgumentValue = licensedBy} );

            if (averageScore != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore", ArgumentValue = averageScore} );

            if (popularity != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity", ArgumentValue = popularity} );

            if (source != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "source", ArgumentValue = source} );

            if (countryOfOrigin != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "countryOfOrigin", ArgumentValue = countryOfOrigin} );

            if (search != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "search", ArgumentValue = search} );

            if (idNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not", ArgumentValue = idNot} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (idNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not_in", ArgumentValue = idNotIn} );

            if (idMalNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "idMal_not", ArgumentValue = idMalNot} );

            if (idMalIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "idMal_in", ArgumentValue = idMalIn} );

            if (idMalNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "idMal_not_in", ArgumentValue = idMalNotIn} );

            if (startDateGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startDate_greater", ArgumentValue = startDateGreater} );

            if (startDateLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startDate_lesser", ArgumentValue = startDateLesser} );

            if (startDateLike != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startDate_like", ArgumentValue = startDateLike} );

            if (endDateGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "endDate_greater", ArgumentValue = endDateGreater} );

            if (endDateLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "endDate_lesser", ArgumentValue = endDateLesser} );

            if (endDateLike != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "endDate_like", ArgumentValue = endDateLike} );

            if (formatIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "format_in", ArgumentValue = formatIn} );

            if (formatNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "format_not", ArgumentValue = formatNot} );

            if (formatNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "format_not_in", ArgumentValue = formatNotIn} );

            if (statusIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_in", ArgumentValue = statusIn} );

            if (statusNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_not", ArgumentValue = statusNot} );

            if (statusNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_not_in", ArgumentValue = statusNotIn} );

            if (episodesGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episodes_greater", ArgumentValue = episodesGreater} );

            if (episodesLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episodes_lesser", ArgumentValue = episodesLesser} );

            if (durationGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "duration_greater", ArgumentValue = durationGreater} );

            if (durationLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "duration_lesser", ArgumentValue = durationLesser} );

            if (chaptersGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "chapters_greater", ArgumentValue = chaptersGreater} );

            if (chaptersLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "chapters_lesser", ArgumentValue = chaptersLesser} );

            if (volumesGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "volumes_greater", ArgumentValue = volumesGreater} );

            if (volumesLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "volumes_lesser", ArgumentValue = volumesLesser} );

            if (genreIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "genre_in", ArgumentValue = genreIn} );

            if (genreNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "genre_not_in", ArgumentValue = genreNotIn} );

            if (tagIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tag_in", ArgumentValue = tagIn} );

            if (tagNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tag_not_in", ArgumentValue = tagNotIn} );

            if (tagCategoryIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tagCategory_in", ArgumentValue = tagCategoryIn} );

            if (tagCategoryNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tagCategory_not_in", ArgumentValue = tagCategoryNotIn} );

            if (licensedByIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "licensedBy_in", ArgumentValue = licensedByIn} );

            if (averageScoreNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore_not", ArgumentValue = averageScoreNot} );

            if (averageScoreGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore_greater", ArgumentValue = averageScoreGreater} );

            if (averageScoreLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore_lesser", ArgumentValue = averageScoreLesser} );

            if (popularityNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity_not", ArgumentValue = popularityNot} );

            if (popularityGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity_greater", ArgumentValue = popularityGreater} );

            if (popularityLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity_lesser", ArgumentValue = popularityLesser} );

            if (sourceIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "source_in", ArgumentValue = sourceIn} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("media", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptMedia()
        {
            return ExceptField("media");
        }

        public InternalPageQueryBuilder WithCharacters(CharacterQueryBuilder characterQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<bool?> isBirthday = null, QueryBuilderParameter<string> search = null, QueryBuilderParameter<int?> idNot = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<int?>> idNotIn = null, QueryBuilderParameter<IEnumerable<CharacterSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (isBirthday != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isBirthday", ArgumentValue = isBirthday} );

            if (search != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "search", ArgumentValue = search} );

            if (idNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not", ArgumentValue = idNot} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (idNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not_in", ArgumentValue = idNotIn} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("characters", alias, characterQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptCharacters()
        {
            return ExceptField("characters");
        }

        public InternalPageQueryBuilder WithStaff(StaffQueryBuilder staffQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<bool?> isBirthday = null, QueryBuilderParameter<string> search = null, QueryBuilderParameter<int?> idNot = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<int?>> idNotIn = null, QueryBuilderParameter<IEnumerable<StaffSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (isBirthday != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isBirthday", ArgumentValue = isBirthday} );

            if (search != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "search", ArgumentValue = search} );

            if (idNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not", ArgumentValue = idNot} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (idNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not_in", ArgumentValue = idNotIn} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("staff", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptStaff()
        {
            return ExceptField("staff");
        }

        public InternalPageQueryBuilder WithStudios(StudioQueryBuilder studioQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<string> search = null, QueryBuilderParameter<int?> idNot = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<int?>> idNotIn = null, QueryBuilderParameter<IEnumerable<StudioSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (search != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "search", ArgumentValue = search} );

            if (idNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not", ArgumentValue = idNot} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (idNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not_in", ArgumentValue = idNotIn} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("studios", alias, studioQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptStudios()
        {
            return ExceptField("studios");
        }

        public InternalPageQueryBuilder WithMediaList(MediaListQueryBuilder mediaListQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<string> userName = null, QueryBuilderParameter<MediaType?> type = null, QueryBuilderParameter<MediaListStatus?> status = null, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<bool?> isFollowing = null, QueryBuilderParameter<string> notes = null, QueryBuilderParameter<object> startedAt = null, QueryBuilderParameter<object> completedAt = null, QueryBuilderParameter<bool?> compareWithAuthList = null, QueryBuilderParameter<IEnumerable<int?>> userIdIn = null, QueryBuilderParameter<IEnumerable<MediaListStatus?>> statusIn = null, QueryBuilderParameter<IEnumerable<MediaListStatus?>> statusNotIn = null, QueryBuilderParameter<MediaListStatus?> statusNot = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdIn = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdNotIn = null, QueryBuilderParameter<string> notesLike = null, QueryBuilderParameter<object> startedAtGreater = null, QueryBuilderParameter<object> startedAtLesser = null, QueryBuilderParameter<string> startedAtLike = null, QueryBuilderParameter<object> completedAtGreater = null, QueryBuilderParameter<object> completedAtLesser = null, QueryBuilderParameter<string> completedAtLike = null, QueryBuilderParameter<IEnumerable<MediaListSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (userName != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userName", ArgumentValue = userName} );

            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (isFollowing != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isFollowing", ArgumentValue = isFollowing} );

            if (notes != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "notes", ArgumentValue = notes} );

            if (startedAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startedAt", ArgumentValue = startedAt} );

            if (completedAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "completedAt", ArgumentValue = completedAt} );

            if (compareWithAuthList != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "compareWithAuthList", ArgumentValue = compareWithAuthList} );

            if (userIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId_in", ArgumentValue = userIdIn} );

            if (statusIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_in", ArgumentValue = statusIn} );

            if (statusNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_not_in", ArgumentValue = statusNotIn} );

            if (statusNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status_not", ArgumentValue = statusNot} );

            if (mediaIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_in", ArgumentValue = mediaIdIn} );

            if (mediaIdNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not_in", ArgumentValue = mediaIdNotIn} );

            if (notesLike != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "notes_like", ArgumentValue = notesLike} );

            if (startedAtGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startedAt_greater", ArgumentValue = startedAtGreater} );

            if (startedAtLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startedAt_lesser", ArgumentValue = startedAtLesser} );

            if (startedAtLike != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startedAt_like", ArgumentValue = startedAtLike} );

            if (completedAtGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "completedAt_greater", ArgumentValue = completedAtGreater} );

            if (completedAtLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "completedAt_lesser", ArgumentValue = completedAtLesser} );

            if (completedAtLike != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "completedAt_like", ArgumentValue = completedAtLike} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("mediaList", alias, mediaListQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptMediaList()
        {
            return ExceptField("mediaList");
        }

        public InternalPageQueryBuilder WithAiringSchedules(AiringScheduleQueryBuilder airingScheduleQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<int?> episode = null, QueryBuilderParameter<int?> airingAt = null, QueryBuilderParameter<bool?> notYetAired = null, QueryBuilderParameter<int?> idNot = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<int?>> idNotIn = null, QueryBuilderParameter<int?> mediaIdNot = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdIn = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdNotIn = null, QueryBuilderParameter<int?> episodeNot = null, QueryBuilderParameter<IEnumerable<int?>> episodeIn = null, QueryBuilderParameter<IEnumerable<int?>> episodeNotIn = null, QueryBuilderParameter<int?> episodeGreater = null, QueryBuilderParameter<int?> episodeLesser = null, QueryBuilderParameter<int?> airingAtGreater = null, QueryBuilderParameter<int?> airingAtLesser = null, QueryBuilderParameter<IEnumerable<AiringSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (episode != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode", ArgumentValue = episode} );

            if (airingAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "airingAt", ArgumentValue = airingAt} );

            if (notYetAired != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "notYetAired", ArgumentValue = notYetAired} );

            if (idNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not", ArgumentValue = idNot} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (idNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not_in", ArgumentValue = idNotIn} );

            if (mediaIdNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not", ArgumentValue = mediaIdNot} );

            if (mediaIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_in", ArgumentValue = mediaIdIn} );

            if (mediaIdNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not_in", ArgumentValue = mediaIdNotIn} );

            if (episodeNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_not", ArgumentValue = episodeNot} );

            if (episodeIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_in", ArgumentValue = episodeIn} );

            if (episodeNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_not_in", ArgumentValue = episodeNotIn} );

            if (episodeGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_greater", ArgumentValue = episodeGreater} );

            if (episodeLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_lesser", ArgumentValue = episodeLesser} );

            if (airingAtGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "airingAt_greater", ArgumentValue = airingAtGreater} );

            if (airingAtLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "airingAt_lesser", ArgumentValue = airingAtLesser} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("airingSchedules", alias, airingScheduleQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptAiringSchedules()
        {
            return ExceptField("airingSchedules");
        }

        public InternalPageQueryBuilder WithMediaTrends(MediaTrendQueryBuilder mediaTrendQueryBuilder, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<int?> date = null, QueryBuilderParameter<int?> trending = null, QueryBuilderParameter<int?> averageScore = null, QueryBuilderParameter<int?> popularity = null, QueryBuilderParameter<int?> episode = null, QueryBuilderParameter<bool?> releasing = null, QueryBuilderParameter<int?> mediaIdNot = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdIn = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdNotIn = null, QueryBuilderParameter<int?> dateGreater = null, QueryBuilderParameter<int?> dateLesser = null, QueryBuilderParameter<int?> trendingGreater = null, QueryBuilderParameter<int?> trendingLesser = null, QueryBuilderParameter<int?> trendingNot = null, QueryBuilderParameter<int?> averageScoreGreater = null, QueryBuilderParameter<int?> averageScoreLesser = null, QueryBuilderParameter<int?> averageScoreNot = null, QueryBuilderParameter<int?> popularityGreater = null, QueryBuilderParameter<int?> popularityLesser = null, QueryBuilderParameter<int?> popularityNot = null, QueryBuilderParameter<int?> episodeGreater = null, QueryBuilderParameter<int?> episodeLesser = null, QueryBuilderParameter<int?> episodeNot = null, QueryBuilderParameter<IEnumerable<MediaTrendSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (date != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "date", ArgumentValue = date} );

            if (trending != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "trending", ArgumentValue = trending} );

            if (averageScore != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore", ArgumentValue = averageScore} );

            if (popularity != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity", ArgumentValue = popularity} );

            if (episode != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode", ArgumentValue = episode} );

            if (releasing != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "releasing", ArgumentValue = releasing} );

            if (mediaIdNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not", ArgumentValue = mediaIdNot} );

            if (mediaIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_in", ArgumentValue = mediaIdIn} );

            if (mediaIdNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not_in", ArgumentValue = mediaIdNotIn} );

            if (dateGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "date_greater", ArgumentValue = dateGreater} );

            if (dateLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "date_lesser", ArgumentValue = dateLesser} );

            if (trendingGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "trending_greater", ArgumentValue = trendingGreater} );

            if (trendingLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "trending_lesser", ArgumentValue = trendingLesser} );

            if (trendingNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "trending_not", ArgumentValue = trendingNot} );

            if (averageScoreGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore_greater", ArgumentValue = averageScoreGreater} );

            if (averageScoreLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore_lesser", ArgumentValue = averageScoreLesser} );

            if (averageScoreNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averageScore_not", ArgumentValue = averageScoreNot} );

            if (popularityGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity_greater", ArgumentValue = popularityGreater} );

            if (popularityLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity_lesser", ArgumentValue = popularityLesser} );

            if (popularityNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "popularity_not", ArgumentValue = popularityNot} );

            if (episodeGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_greater", ArgumentValue = episodeGreater} );

            if (episodeLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_lesser", ArgumentValue = episodeLesser} );

            if (episodeNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "episode_not", ArgumentValue = episodeNot} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("mediaTrends", alias, mediaTrendQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptMediaTrends()
        {
            return ExceptField("mediaTrends");
        }

        public InternalPageQueryBuilder WithNotifications(NotificationUnionQueryBuilder notificationUnionQueryBuilder, QueryBuilderParameter<NotificationType?> type = null, QueryBuilderParameter<bool?> resetNotificationCount = null, QueryBuilderParameter<IEnumerable<NotificationType?>> typeIn = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            if (resetNotificationCount != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "resetNotificationCount", ArgumentValue = resetNotificationCount} );

            if (typeIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type_in", ArgumentValue = typeIn} );

            return WithObjectField("notifications", alias, notificationUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptNotifications()
        {
            return ExceptField("notifications");
        }

        public InternalPageQueryBuilder WithFollowers(UserQueryBuilder userQueryBuilder, QueryBuilderParameter<int> userId, QueryBuilderParameter<IEnumerable<UserSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("followers", alias, userQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptFollowers()
        {
            return ExceptField("followers");
        }

        public InternalPageQueryBuilder WithFollowing(UserQueryBuilder userQueryBuilder, QueryBuilderParameter<int> userId, QueryBuilderParameter<IEnumerable<UserSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );
            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("following", alias, userQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptFollowing()
        {
            return ExceptField("following");
        }

        public InternalPageQueryBuilder WithActivities(ActivityUnionQueryBuilder activityUnionQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<int?> messengerId = null, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<ActivityType?> type = null, QueryBuilderParameter<bool?> isFollowing = null, QueryBuilderParameter<bool?> hasReplies = null, QueryBuilderParameter<bool?> hasRepliesOrTypeText = null, QueryBuilderParameter<int?> createdAt = null, QueryBuilderParameter<int?> idNot = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<int?>> idNotIn = null, QueryBuilderParameter<int?> userIdNot = null, QueryBuilderParameter<IEnumerable<int?>> userIdIn = null, QueryBuilderParameter<IEnumerable<int?>> userIdNotIn = null, QueryBuilderParameter<int?> messengerIdNot = null, QueryBuilderParameter<IEnumerable<int?>> messengerIdIn = null, QueryBuilderParameter<IEnumerable<int?>> messengerIdNotIn = null, QueryBuilderParameter<int?> mediaIdNot = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdIn = null, QueryBuilderParameter<IEnumerable<int?>> mediaIdNotIn = null, QueryBuilderParameter<ActivityType?> typeNot = null, QueryBuilderParameter<IEnumerable<ActivityType?>> typeIn = null, QueryBuilderParameter<IEnumerable<ActivityType?>> typeNotIn = null, QueryBuilderParameter<int?> createdAtGreater = null, QueryBuilderParameter<int?> createdAtLesser = null, QueryBuilderParameter<IEnumerable<ActivitySort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (messengerId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "messengerId", ArgumentValue = messengerId} );

            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            if (isFollowing != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isFollowing", ArgumentValue = isFollowing} );

            if (hasReplies != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "hasReplies", ArgumentValue = hasReplies} );

            if (hasRepliesOrTypeText != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "hasRepliesOrTypeText", ArgumentValue = hasRepliesOrTypeText} );

            if (createdAt != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "createdAt", ArgumentValue = createdAt} );

            if (idNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not", ArgumentValue = idNot} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (idNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_not_in", ArgumentValue = idNotIn} );

            if (userIdNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId_not", ArgumentValue = userIdNot} );

            if (userIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId_in", ArgumentValue = userIdIn} );

            if (userIdNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId_not_in", ArgumentValue = userIdNotIn} );

            if (messengerIdNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "messengerId_not", ArgumentValue = messengerIdNot} );

            if (messengerIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "messengerId_in", ArgumentValue = messengerIdIn} );

            if (messengerIdNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "messengerId_not_in", ArgumentValue = messengerIdNotIn} );

            if (mediaIdNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not", ArgumentValue = mediaIdNot} );

            if (mediaIdIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_in", ArgumentValue = mediaIdIn} );

            if (mediaIdNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId_not_in", ArgumentValue = mediaIdNotIn} );

            if (typeNot != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type_not", ArgumentValue = typeNot} );

            if (typeIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type_in", ArgumentValue = typeIn} );

            if (typeNotIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type_not_in", ArgumentValue = typeNotIn} );

            if (createdAtGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "createdAt_greater", ArgumentValue = createdAtGreater} );

            if (createdAtLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "createdAt_lesser", ArgumentValue = createdAtLesser} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("activities", alias, activityUnionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptActivities()
        {
            return ExceptField("activities");
        }

        public InternalPageQueryBuilder WithActivityReplies(ActivityReplyQueryBuilder activityReplyQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> activityId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (activityId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "activityId", ArgumentValue = activityId} );

            return WithObjectField("activityReplies", alias, activityReplyQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptActivityReplies()
        {
            return ExceptField("activityReplies");
        }

        public InternalPageQueryBuilder WithThreads(ThreadQueryBuilder threadQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<int?> replyUserId = null, QueryBuilderParameter<bool?> subscribed = null, QueryBuilderParameter<int?> categoryId = null, QueryBuilderParameter<int?> mediaCategoryId = null, QueryBuilderParameter<string> search = null, QueryBuilderParameter<IEnumerable<int?>> idIn = null, QueryBuilderParameter<IEnumerable<ThreadSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (replyUserId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "replyUserId", ArgumentValue = replyUserId} );

            if (subscribed != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "subscribed", ArgumentValue = subscribed} );

            if (categoryId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "categoryId", ArgumentValue = categoryId} );

            if (mediaCategoryId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaCategoryId", ArgumentValue = mediaCategoryId} );

            if (search != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "search", ArgumentValue = search} );

            if (idIn != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id_in", ArgumentValue = idIn} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("threads", alias, threadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptThreads()
        {
            return ExceptField("threads");
        }

        public InternalPageQueryBuilder WithThreadComments(ThreadCommentQueryBuilder threadCommentQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> threadId = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<IEnumerable<ThreadCommentSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (threadId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "threadId", ArgumentValue = threadId} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("threadComments", alias, threadCommentQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptThreadComments()
        {
            return ExceptField("threadComments");
        }

        public InternalPageQueryBuilder WithReviews(ReviewQueryBuilder reviewQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<MediaType?> mediaType = null, QueryBuilderParameter<IEnumerable<ReviewSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (mediaType != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaType", ArgumentValue = mediaType} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("reviews", alias, reviewQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptReviews()
        {
            return ExceptField("reviews");
        }

        public InternalPageQueryBuilder WithRecommendations(RecommendationQueryBuilder recommendationQueryBuilder, QueryBuilderParameter<int?> id = null, QueryBuilderParameter<int?> mediaId = null, QueryBuilderParameter<int?> mediaRecommendationId = null, QueryBuilderParameter<int?> userId = null, QueryBuilderParameter<int?> rating = null, QueryBuilderParameter<bool?> onList = null, QueryBuilderParameter<int?> ratingGreater = null, QueryBuilderParameter<int?> ratingLesser = null, QueryBuilderParameter<IEnumerable<RecommendationSort?>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (mediaId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaId", ArgumentValue = mediaId} );

            if (mediaRecommendationId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mediaRecommendationId", ArgumentValue = mediaRecommendationId} );

            if (userId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );

            if (rating != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "rating", ArgumentValue = rating} );

            if (onList != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "onList", ArgumentValue = onList} );

            if (ratingGreater != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "rating_greater", ArgumentValue = ratingGreater} );

            if (ratingLesser != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "rating_lesser", ArgumentValue = ratingLesser} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("recommendations", alias, recommendationQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptRecommendations()
        {
            return ExceptField("recommendations");
        }

        public InternalPageQueryBuilder WithLikes(UserQueryBuilder userQueryBuilder, QueryBuilderParameter<int?> likeableId = null, QueryBuilderParameter<LikeableType?> type = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (likeableId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "likeableId", ArgumentValue = likeableId} );

            if (type != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "type", ArgumentValue = type} );

            return WithObjectField("likes", alias, userQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public InternalPageQueryBuilder ExceptLikes()
        {
            return ExceptField("likes");
        }
    }

    public class MediaSubmissionQueryBuilder : GraphQlQueryBuilder<MediaSubmissionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "submitter", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "status" },
                new FieldMetadata { Name = "submitterStats", IsComplex = true },
                new FieldMetadata { Name = "notes" },
                new FieldMetadata { Name = "source" },
                new FieldMetadata { Name = "changes", IsComplex = true },
                new FieldMetadata { Name = "media", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) },
                new FieldMetadata { Name = "submission", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) },
                new FieldMetadata { Name = "characters", IsComplex = true, QueryBuilderType = typeof(MediaSubmissionComparisonQueryBuilder) },
                new FieldMetadata { Name = "staff", IsComplex = true, QueryBuilderType = typeof(MediaSubmissionComparisonQueryBuilder) },
                new FieldMetadata { Name = "studios", IsComplex = true, QueryBuilderType = typeof(MediaSubmissionComparisonQueryBuilder) },
                new FieldMetadata { Name = "relations", IsComplex = true, QueryBuilderType = typeof(MediaEdgeQueryBuilder) },
                new FieldMetadata { Name = "externalLinks", IsComplex = true, QueryBuilderType = typeof(MediaExternalLinkQueryBuilder) },
                new FieldMetadata { Name = "createdAt" }
            };

        protected override string TypeName { get { return "MediaSubmission"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaSubmissionQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MediaSubmissionQueryBuilder WithSubmitter(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("submitter", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionQueryBuilder ExceptSubmitter()
        {
            return ExceptField("submitter");
        }

        public MediaSubmissionQueryBuilder WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }

        public MediaSubmissionQueryBuilder WithSubmitterStats(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("submitterStats", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionQueryBuilder ExceptSubmitterStats()
        {
            return ExceptField("submitterStats");
        }

        public MediaSubmissionQueryBuilder WithNotes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("notes", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionQueryBuilder ExceptNotes()
        {
            return ExceptField("notes");
        }

        public MediaSubmissionQueryBuilder WithSource(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("source", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionQueryBuilder ExceptSource()
        {
            return ExceptField("source");
        }

        public MediaSubmissionQueryBuilder WithChanges(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("changes", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionQueryBuilder ExceptChanges()
        {
            return ExceptField("changes");
        }

        public MediaSubmissionQueryBuilder WithMedia(MediaQueryBuilder mediaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("media", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionQueryBuilder ExceptMedia()
        {
            return ExceptField("media");
        }

        public MediaSubmissionQueryBuilder WithSubmission(MediaQueryBuilder mediaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("submission", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionQueryBuilder ExceptSubmission()
        {
            return ExceptField("submission");
        }

        public MediaSubmissionQueryBuilder WithCharacters(MediaSubmissionComparisonQueryBuilder mediaSubmissionComparisonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("characters", alias, mediaSubmissionComparisonQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionQueryBuilder ExceptCharacters()
        {
            return ExceptField("characters");
        }

        public MediaSubmissionQueryBuilder WithStaff(MediaSubmissionComparisonQueryBuilder mediaSubmissionComparisonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("staff", alias, mediaSubmissionComparisonQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionQueryBuilder ExceptStaff()
        {
            return ExceptField("staff");
        }

        public MediaSubmissionQueryBuilder WithStudios(MediaSubmissionComparisonQueryBuilder mediaSubmissionComparisonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("studios", alias, mediaSubmissionComparisonQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionQueryBuilder ExceptStudios()
        {
            return ExceptField("studios");
        }

        public MediaSubmissionQueryBuilder WithRelations(MediaEdgeQueryBuilder mediaEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("relations", alias, mediaEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionQueryBuilder ExceptRelations()
        {
            return ExceptField("relations");
        }

        public MediaSubmissionQueryBuilder WithExternalLinks(MediaExternalLinkQueryBuilder mediaExternalLinkQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("externalLinks", alias, mediaExternalLinkQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionQueryBuilder ExceptExternalLinks()
        {
            return ExceptField("externalLinks");
        }

        public MediaSubmissionQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }
    }

    public class MediaSubmissionComparisonQueryBuilder : GraphQlQueryBuilder<MediaSubmissionComparisonQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "submission", IsComplex = true, QueryBuilderType = typeof(MediaSubmissionEdgeQueryBuilder) },
                new FieldMetadata { Name = "character", IsComplex = true, QueryBuilderType = typeof(MediaCharacterQueryBuilder) },
                new FieldMetadata { Name = "staff", IsComplex = true, QueryBuilderType = typeof(StaffEdgeQueryBuilder) },
                new FieldMetadata { Name = "studio", IsComplex = true, QueryBuilderType = typeof(StudioEdgeQueryBuilder) }
            };

        protected override string TypeName { get { return "MediaSubmissionComparison"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaSubmissionComparisonQueryBuilder WithSubmission(MediaSubmissionEdgeQueryBuilder mediaSubmissionEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("submission", alias, mediaSubmissionEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionComparisonQueryBuilder ExceptSubmission()
        {
            return ExceptField("submission");
        }

        public MediaSubmissionComparisonQueryBuilder WithCharacter(MediaCharacterQueryBuilder mediaCharacterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("character", alias, mediaCharacterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionComparisonQueryBuilder ExceptCharacter()
        {
            return ExceptField("character");
        }

        public MediaSubmissionComparisonQueryBuilder WithStaff(StaffEdgeQueryBuilder staffEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("staff", alias, staffEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionComparisonQueryBuilder ExceptStaff()
        {
            return ExceptField("staff");
        }

        public MediaSubmissionComparisonQueryBuilder WithStudio(StudioEdgeQueryBuilder studioEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("studio", alias, studioEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionComparisonQueryBuilder ExceptStudio()
        {
            return ExceptField("studio");
        }
    }

    public class MediaSubmissionEdgeQueryBuilder : GraphQlQueryBuilder<MediaSubmissionEdgeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "characterRole" },
                new FieldMetadata { Name = "staffRole" },
                new FieldMetadata { Name = "roleNotes" },
                new FieldMetadata { Name = "dubGroup" },
                new FieldMetadata { Name = "characterName" },
                new FieldMetadata { Name = "isMain" },
                new FieldMetadata { Name = "character", IsComplex = true, QueryBuilderType = typeof(CharacterQueryBuilder) },
                new FieldMetadata { Name = "characterSubmission", IsComplex = true, QueryBuilderType = typeof(CharacterQueryBuilder) },
                new FieldMetadata { Name = "voiceActor", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) },
                new FieldMetadata { Name = "voiceActorSubmission", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) },
                new FieldMetadata { Name = "staff", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) },
                new FieldMetadata { Name = "staffSubmission", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) },
                new FieldMetadata { Name = "studio", IsComplex = true, QueryBuilderType = typeof(StudioQueryBuilder) },
                new FieldMetadata { Name = "media", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) }
            };

        protected override string TypeName { get { return "MediaSubmissionEdge"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaSubmissionEdgeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionEdgeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MediaSubmissionEdgeQueryBuilder WithCharacterRole(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("characterRole", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionEdgeQueryBuilder ExceptCharacterRole()
        {
            return ExceptField("characterRole");
        }

        public MediaSubmissionEdgeQueryBuilder WithStaffRole(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("staffRole", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionEdgeQueryBuilder ExceptStaffRole()
        {
            return ExceptField("staffRole");
        }

        public MediaSubmissionEdgeQueryBuilder WithRoleNotes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roleNotes", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionEdgeQueryBuilder ExceptRoleNotes()
        {
            return ExceptField("roleNotes");
        }

        public MediaSubmissionEdgeQueryBuilder WithDubGroup(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dubGroup", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionEdgeQueryBuilder ExceptDubGroup()
        {
            return ExceptField("dubGroup");
        }

        public MediaSubmissionEdgeQueryBuilder WithCharacterName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("characterName", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionEdgeQueryBuilder ExceptCharacterName()
        {
            return ExceptField("characterName");
        }

        public MediaSubmissionEdgeQueryBuilder WithIsMain(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isMain", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionEdgeQueryBuilder ExceptIsMain()
        {
            return ExceptField("isMain");
        }

        public MediaSubmissionEdgeQueryBuilder WithCharacter(CharacterQueryBuilder characterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("character", alias, characterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionEdgeQueryBuilder ExceptCharacter()
        {
            return ExceptField("character");
        }

        public MediaSubmissionEdgeQueryBuilder WithCharacterSubmission(CharacterQueryBuilder characterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("characterSubmission", alias, characterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionEdgeQueryBuilder ExceptCharacterSubmission()
        {
            return ExceptField("characterSubmission");
        }

        public MediaSubmissionEdgeQueryBuilder WithVoiceActor(StaffQueryBuilder staffQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("voiceActor", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionEdgeQueryBuilder ExceptVoiceActor()
        {
            return ExceptField("voiceActor");
        }

        public MediaSubmissionEdgeQueryBuilder WithVoiceActorSubmission(StaffQueryBuilder staffQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("voiceActorSubmission", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionEdgeQueryBuilder ExceptVoiceActorSubmission()
        {
            return ExceptField("voiceActorSubmission");
        }

        public MediaSubmissionEdgeQueryBuilder WithStaff(StaffQueryBuilder staffQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("staff", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionEdgeQueryBuilder ExceptStaff()
        {
            return ExceptField("staff");
        }

        public MediaSubmissionEdgeQueryBuilder WithStaffSubmission(StaffQueryBuilder staffQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("staffSubmission", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionEdgeQueryBuilder ExceptStaffSubmission()
        {
            return ExceptField("staffSubmission");
        }

        public MediaSubmissionEdgeQueryBuilder WithStudio(StudioQueryBuilder studioQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("studio", alias, studioQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionEdgeQueryBuilder ExceptStudio()
        {
            return ExceptField("studio");
        }

        public MediaSubmissionEdgeQueryBuilder WithMedia(MediaQueryBuilder mediaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("media", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaSubmissionEdgeQueryBuilder ExceptMedia()
        {
            return ExceptField("media");
        }
    }

    public class MediaCharacterQueryBuilder : GraphQlQueryBuilder<MediaCharacterQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "role" },
                new FieldMetadata { Name = "roleNotes" },
                new FieldMetadata { Name = "dubGroup" },
                new FieldMetadata { Name = "characterName" },
                new FieldMetadata { Name = "character", IsComplex = true, QueryBuilderType = typeof(CharacterQueryBuilder) },
                new FieldMetadata { Name = "voiceActor", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) }
            };

        protected override string TypeName { get { return "MediaCharacter"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaCharacterQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaCharacterQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MediaCharacterQueryBuilder WithRole(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("role", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaCharacterQueryBuilder ExceptRole()
        {
            return ExceptField("role");
        }

        public MediaCharacterQueryBuilder WithRoleNotes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roleNotes", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaCharacterQueryBuilder ExceptRoleNotes()
        {
            return ExceptField("roleNotes");
        }

        public MediaCharacterQueryBuilder WithDubGroup(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dubGroup", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaCharacterQueryBuilder ExceptDubGroup()
        {
            return ExceptField("dubGroup");
        }

        public MediaCharacterQueryBuilder WithCharacterName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("characterName", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaCharacterQueryBuilder ExceptCharacterName()
        {
            return ExceptField("characterName");
        }

        public MediaCharacterQueryBuilder WithCharacter(CharacterQueryBuilder characterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("character", alias, characterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaCharacterQueryBuilder ExceptCharacter()
        {
            return ExceptField("character");
        }

        public MediaCharacterQueryBuilder WithVoiceActor(StaffQueryBuilder staffQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("voiceActor", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaCharacterQueryBuilder ExceptVoiceActor()
        {
            return ExceptField("voiceActor");
        }
    }

    public class CharacterSubmissionQueryBuilder : GraphQlQueryBuilder<CharacterSubmissionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "character", IsComplex = true, QueryBuilderType = typeof(CharacterQueryBuilder) },
                new FieldMetadata { Name = "submission", IsComplex = true, QueryBuilderType = typeof(CharacterQueryBuilder) },
                new FieldMetadata { Name = "submitter", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "status" },
                new FieldMetadata { Name = "notes" },
                new FieldMetadata { Name = "source" },
                new FieldMetadata { Name = "createdAt" }
            };

        protected override string TypeName { get { return "CharacterSubmission"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CharacterSubmissionQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterSubmissionQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public CharacterSubmissionQueryBuilder WithCharacter(CharacterQueryBuilder characterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("character", alias, characterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CharacterSubmissionQueryBuilder ExceptCharacter()
        {
            return ExceptField("character");
        }

        public CharacterSubmissionQueryBuilder WithSubmission(CharacterQueryBuilder characterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("submission", alias, characterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CharacterSubmissionQueryBuilder ExceptSubmission()
        {
            return ExceptField("submission");
        }

        public CharacterSubmissionQueryBuilder WithSubmitter(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("submitter", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CharacterSubmissionQueryBuilder ExceptSubmitter()
        {
            return ExceptField("submitter");
        }

        public CharacterSubmissionQueryBuilder WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterSubmissionQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }

        public CharacterSubmissionQueryBuilder WithNotes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("notes", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterSubmissionQueryBuilder ExceptNotes()
        {
            return ExceptField("notes");
        }

        public CharacterSubmissionQueryBuilder WithSource(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("source", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterSubmissionQueryBuilder ExceptSource()
        {
            return ExceptField("source");
        }

        public CharacterSubmissionQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterSubmissionQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }
    }

    public class StaffSubmissionQueryBuilder : GraphQlQueryBuilder<StaffSubmissionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "staff", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) },
                new FieldMetadata { Name = "submission", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) },
                new FieldMetadata { Name = "submitter", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "status" },
                new FieldMetadata { Name = "notes" },
                new FieldMetadata { Name = "source" },
                new FieldMetadata { Name = "createdAt" }
            };

        protected override string TypeName { get { return "StaffSubmission"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StaffSubmissionQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffSubmissionQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public StaffSubmissionQueryBuilder WithStaff(StaffQueryBuilder staffQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("staff", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StaffSubmissionQueryBuilder ExceptStaff()
        {
            return ExceptField("staff");
        }

        public StaffSubmissionQueryBuilder WithSubmission(StaffQueryBuilder staffQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("submission", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StaffSubmissionQueryBuilder ExceptSubmission()
        {
            return ExceptField("submission");
        }

        public StaffSubmissionQueryBuilder WithSubmitter(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("submitter", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StaffSubmissionQueryBuilder ExceptSubmitter()
        {
            return ExceptField("submitter");
        }

        public StaffSubmissionQueryBuilder WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffSubmissionQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }

        public StaffSubmissionQueryBuilder WithNotes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("notes", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffSubmissionQueryBuilder ExceptNotes()
        {
            return ExceptField("notes");
        }

        public StaffSubmissionQueryBuilder WithSource(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("source", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffSubmissionQueryBuilder ExceptSource()
        {
            return ExceptField("source");
        }

        public StaffSubmissionQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public StaffSubmissionQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }
    }

    public class RevisionHistoryQueryBuilder : GraphQlQueryBuilder<RevisionHistoryQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "action" },
                new FieldMetadata { Name = "changes", IsComplex = true },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "media", IsComplex = true, QueryBuilderType = typeof(MediaQueryBuilder) },
                new FieldMetadata { Name = "character", IsComplex = true, QueryBuilderType = typeof(CharacterQueryBuilder) },
                new FieldMetadata { Name = "staff", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) },
                new FieldMetadata { Name = "studio", IsComplex = true, QueryBuilderType = typeof(StudioQueryBuilder) },
                new FieldMetadata { Name = "createdAt" }
            };

        protected override string TypeName { get { return "RevisionHistory"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public RevisionHistoryQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public RevisionHistoryQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public RevisionHistoryQueryBuilder WithAction(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("action", alias, new GraphQlDirective[] { include, skip });
        }

        public RevisionHistoryQueryBuilder ExceptAction()
        {
            return ExceptField("action");
        }

        public RevisionHistoryQueryBuilder WithChanges(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("changes", alias, new GraphQlDirective[] { include, skip });
        }

        public RevisionHistoryQueryBuilder ExceptChanges()
        {
            return ExceptField("changes");
        }

        public RevisionHistoryQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RevisionHistoryQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }

        public RevisionHistoryQueryBuilder WithMedia(MediaQueryBuilder mediaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("media", alias, mediaQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RevisionHistoryQueryBuilder ExceptMedia()
        {
            return ExceptField("media");
        }

        public RevisionHistoryQueryBuilder WithCharacter(CharacterQueryBuilder characterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("character", alias, characterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RevisionHistoryQueryBuilder ExceptCharacter()
        {
            return ExceptField("character");
        }

        public RevisionHistoryQueryBuilder WithStaff(StaffQueryBuilder staffQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("staff", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RevisionHistoryQueryBuilder ExceptStaff()
        {
            return ExceptField("staff");
        }

        public RevisionHistoryQueryBuilder WithStudio(StudioQueryBuilder studioQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("studio", alias, studioQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RevisionHistoryQueryBuilder ExceptStudio()
        {
            return ExceptField("studio");
        }

        public RevisionHistoryQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public RevisionHistoryQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }
    }

    public class ReportQueryBuilder : GraphQlQueryBuilder<ReportQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "reporter", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "reported", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "reason" },
                new FieldMetadata { Name = "createdAt" },
                new FieldMetadata { Name = "cleared" }
            };

        protected override string TypeName { get { return "Report"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ReportQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ReportQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ReportQueryBuilder WithReporter(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("reporter", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ReportQueryBuilder ExceptReporter()
        {
            return ExceptField("reporter");
        }

        public ReportQueryBuilder WithReported(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("reported", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ReportQueryBuilder ExceptReported()
        {
            return ExceptField("reported");
        }

        public ReportQueryBuilder WithReason(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("reason", alias, new GraphQlDirective[] { include, skip });
        }

        public ReportQueryBuilder ExceptReason()
        {
            return ExceptField("reason");
        }

        public ReportQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ReportQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ReportQueryBuilder WithCleared(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cleared", alias, new GraphQlDirective[] { include, skip });
        }

        public ReportQueryBuilder ExceptCleared()
        {
            return ExceptField("cleared");
        }
    }

    public class ModActionQueryBuilder : GraphQlQueryBuilder<ModActionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "mod", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "objectId" },
                new FieldMetadata { Name = "objectType" },
                new FieldMetadata { Name = "data" },
                new FieldMetadata { Name = "createdAt" }
            };

        protected override string TypeName { get { return "ModAction"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ModActionQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ModActionQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ModActionQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ModActionQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }

        public ModActionQueryBuilder WithMod(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mod", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ModActionQueryBuilder ExceptMod()
        {
            return ExceptField("mod");
        }

        public ModActionQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ModActionQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public ModActionQueryBuilder WithObjectId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("objectId", alias, new GraphQlDirective[] { include, skip });
        }

        public ModActionQueryBuilder ExceptObjectId()
        {
            return ExceptField("objectId");
        }

        public ModActionQueryBuilder WithObjectType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("objectType", alias, new GraphQlDirective[] { include, skip });
        }

        public ModActionQueryBuilder ExceptObjectType()
        {
            return ExceptField("objectType");
        }

        public ModActionQueryBuilder WithData(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("data", alias, new GraphQlDirective[] { include, skip });
        }

        public ModActionQueryBuilder ExceptData()
        {
            return ExceptField("data");
        }

        public ModActionQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ModActionQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }
    }

    public class CharacterSubmissionConnectionQueryBuilder : GraphQlQueryBuilder<CharacterSubmissionConnectionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(CharacterSubmissionEdgeQueryBuilder) },
                new FieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(CharacterSubmissionQueryBuilder) },
                new FieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "CharacterSubmissionConnection"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CharacterSubmissionConnectionQueryBuilder WithEdges(CharacterSubmissionEdgeQueryBuilder characterSubmissionEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, characterSubmissionEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CharacterSubmissionConnectionQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public CharacterSubmissionConnectionQueryBuilder WithNodes(CharacterSubmissionQueryBuilder characterSubmissionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, characterSubmissionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CharacterSubmissionConnectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public CharacterSubmissionConnectionQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CharacterSubmissionConnectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public class CharacterSubmissionEdgeQueryBuilder : GraphQlQueryBuilder<CharacterSubmissionEdgeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(CharacterSubmissionQueryBuilder) },
                new FieldMetadata { Name = "role" },
                new FieldMetadata { Name = "voiceActors", IsComplex = true, QueryBuilderType = typeof(StaffQueryBuilder) },
                new FieldMetadata { Name = "submittedVoiceActors", IsComplex = true, QueryBuilderType = typeof(StaffSubmissionQueryBuilder) }
            };

        protected override string TypeName { get { return "CharacterSubmissionEdge"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CharacterSubmissionEdgeQueryBuilder WithNode(CharacterSubmissionQueryBuilder characterSubmissionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, characterSubmissionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CharacterSubmissionEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }

        public CharacterSubmissionEdgeQueryBuilder WithRole(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("role", alias, new GraphQlDirective[] { include, skip });
        }

        public CharacterSubmissionEdgeQueryBuilder ExceptRole()
        {
            return ExceptField("role");
        }

        public CharacterSubmissionEdgeQueryBuilder WithVoiceActors(StaffQueryBuilder staffQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("voiceActors", alias, staffQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CharacterSubmissionEdgeQueryBuilder ExceptVoiceActors()
        {
            return ExceptField("voiceActors");
        }

        public CharacterSubmissionEdgeQueryBuilder WithSubmittedVoiceActors(StaffSubmissionQueryBuilder staffSubmissionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("submittedVoiceActors", alias, staffSubmissionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CharacterSubmissionEdgeQueryBuilder ExceptSubmittedVoiceActors()
        {
            return ExceptField("submittedVoiceActors");
        }
    }

    public class UserModDataQueryBuilder : GraphQlQueryBuilder<UserModDataQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "alts", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "bans", IsComplex = true },
                new FieldMetadata { Name = "ip", IsComplex = true },
                new FieldMetadata { Name = "counts", IsComplex = true },
                new FieldMetadata { Name = "privacy" },
                new FieldMetadata { Name = "email" }
            };

        protected override string TypeName { get { return "UserModData"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserModDataQueryBuilder WithAlts(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("alts", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserModDataQueryBuilder ExceptAlts()
        {
            return ExceptField("alts");
        }

        public UserModDataQueryBuilder WithBans(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bans", alias, new GraphQlDirective[] { include, skip });
        }

        public UserModDataQueryBuilder ExceptBans()
        {
            return ExceptField("bans");
        }

        public UserModDataQueryBuilder WithIp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ip", alias, new GraphQlDirective[] { include, skip });
        }

        public UserModDataQueryBuilder ExceptIp()
        {
            return ExceptField("ip");
        }

        public UserModDataQueryBuilder WithCounts(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("counts", alias, new GraphQlDirective[] { include, skip });
        }

        public UserModDataQueryBuilder ExceptCounts()
        {
            return ExceptField("counts");
        }

        public UserModDataQueryBuilder WithPrivacy(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("privacy", alias, new GraphQlDirective[] { include, skip });
        }

        public UserModDataQueryBuilder ExceptPrivacy()
        {
            return ExceptField("privacy");
        }

        public UserModDataQueryBuilder WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("email", alias, new GraphQlDirective[] { include, skip });
        }

        public UserModDataQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }
    }
    #endregion

    #region input classes
    public class NotificationOptionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _type;
        private InputPropertyInfo _enabled;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<NotificationType?>))]
        #endif
        public QueryBuilderParameter<NotificationType?> Type
        {
            get { return (QueryBuilderParameter<NotificationType?>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Enabled
        {
            get { return (QueryBuilderParameter<bool?>)_enabled.Value; }
            set { _enabled = new InputPropertyInfo { Name = "enabled", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_type.Name != null) yield return _type;
            if (_enabled.Name != null) yield return _enabled;
        }
    }

    public class MediaListOptionsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _sectionOrder;
        private InputPropertyInfo _splitCompletedSectionByFormat;
        private InputPropertyInfo _customLists;
        private InputPropertyInfo _advancedScoring;
        private InputPropertyInfo _advancedScoringEnabled;
        private InputPropertyInfo _theme;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> SectionOrder
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_sectionOrder.Value; }
            set { _sectionOrder = new InputPropertyInfo { Name = "sectionOrder", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> SplitCompletedSectionByFormat
        {
            get { return (QueryBuilderParameter<bool?>)_splitCompletedSectionByFormat.Value; }
            set { _splitCompletedSectionByFormat = new InputPropertyInfo { Name = "splitCompletedSectionByFormat", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> CustomLists
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_customLists.Value; }
            set { _customLists = new InputPropertyInfo { Name = "customLists", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> AdvancedScoring
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_advancedScoring.Value; }
            set { _advancedScoring = new InputPropertyInfo { Name = "advancedScoring", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> AdvancedScoringEnabled
        {
            get { return (QueryBuilderParameter<bool?>)_advancedScoringEnabled.Value; }
            set { _advancedScoringEnabled = new InputPropertyInfo { Name = "advancedScoringEnabled", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Theme
        {
            get { return (QueryBuilderParameter<string>)_theme.Value; }
            set { _theme = new InputPropertyInfo { Name = "theme", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_sectionOrder.Name != null) yield return _sectionOrder;
            if (_splitCompletedSectionByFormat.Name != null) yield return _splitCompletedSectionByFormat;
            if (_customLists.Name != null) yield return _customLists;
            if (_advancedScoring.Name != null) yield return _advancedScoring;
            if (_advancedScoringEnabled.Name != null) yield return _advancedScoringEnabled;
            if (_theme.Name != null) yield return _theme;
        }
    }

    public class FuzzyDateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _year;
        private InputPropertyInfo _month;
        private InputPropertyInfo _day;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Year
        {
            get { return (QueryBuilderParameter<int?>)_year.Value; }
            set { _year = new InputPropertyInfo { Name = "year", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Month
        {
            get { return (QueryBuilderParameter<int?>)_month.Value; }
            set { _month = new InputPropertyInfo { Name = "month", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Day
        {
            get { return (QueryBuilderParameter<int?>)_day.Value; }
            set { _day = new InputPropertyInfo { Name = "day", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_year.Name != null) yield return _year;
            if (_month.Name != null) yield return _month;
            if (_day.Name != null) yield return _day;
        }
    }

    public class AniChartHighlightInput : IGraphQlInputObject
    {
        private InputPropertyInfo _mediaId;
        private InputPropertyInfo _highlight;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MediaId
        {
            get { return (QueryBuilderParameter<int?>)_mediaId.Value; }
            set { _mediaId = new InputPropertyInfo { Name = "mediaId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Highlight
        {
            get { return (QueryBuilderParameter<string>)_highlight.Value; }
            set { _highlight = new InputPropertyInfo { Name = "highlight", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_mediaId.Name != null) yield return _mediaId;
            if (_highlight.Name != null) yield return _highlight;
        }
    }

    public class MediaTitleInput : IGraphQlInputObject
    {
        private InputPropertyInfo _romaji;
        private InputPropertyInfo _english;
        private InputPropertyInfo _native;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Romaji
        {
            get { return (QueryBuilderParameter<string>)_romaji.Value; }
            set { _romaji = new InputPropertyInfo { Name = "romaji", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> English
        {
            get { return (QueryBuilderParameter<string>)_english.Value; }
            set { _english = new InputPropertyInfo { Name = "english", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Native
        {
            get { return (QueryBuilderParameter<string>)_native.Value; }
            set { _native = new InputPropertyInfo { Name = "native", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_romaji.Name != null) yield return _romaji;
            if (_english.Name != null) yield return _english;
            if (_native.Name != null) yield return _native;
        }
    }

    public class MediaExternalLinkInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _url;
        private InputPropertyInfo _site;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Id
        {
            get { return (QueryBuilderParameter<int?>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Url
        {
            get { return (QueryBuilderParameter<string>)_url.Value; }
            set { _url = new InputPropertyInfo { Name = "url", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Site
        {
            get { return (QueryBuilderParameter<string>)_site.Value; }
            set { _site = new InputPropertyInfo { Name = "site", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_url.Name != null) yield return _url;
            if (_site.Name != null) yield return _site;
        }
    }

    public class AiringScheduleInput : IGraphQlInputObject
    {
        private InputPropertyInfo _airingAt;
        private InputPropertyInfo _episode;
        private InputPropertyInfo _timeUntilAiring;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> AiringAt
        {
            get { return (QueryBuilderParameter<int?>)_airingAt.Value; }
            set { _airingAt = new InputPropertyInfo { Name = "airingAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Episode
        {
            get { return (QueryBuilderParameter<int?>)_episode.Value; }
            set { _episode = new InputPropertyInfo { Name = "episode", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> TimeUntilAiring
        {
            get { return (QueryBuilderParameter<int?>)_timeUntilAiring.Value; }
            set { _timeUntilAiring = new InputPropertyInfo { Name = "timeUntilAiring", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_airingAt.Name != null) yield return _airingAt;
            if (_episode.Name != null) yield return _episode;
            if (_timeUntilAiring.Name != null) yield return _timeUntilAiring;
        }
    }

    public class CharacterNameInput : IGraphQlInputObject
    {
        private InputPropertyInfo _first;
        private InputPropertyInfo _middle;
        private InputPropertyInfo _last;
        private InputPropertyInfo _native;
        private InputPropertyInfo _alternative;
        private InputPropertyInfo _alternativeSpoiler;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> First
        {
            get { return (QueryBuilderParameter<string>)_first.Value; }
            set { _first = new InputPropertyInfo { Name = "first", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Middle
        {
            get { return (QueryBuilderParameter<string>)_middle.Value; }
            set { _middle = new InputPropertyInfo { Name = "middle", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Last
        {
            get { return (QueryBuilderParameter<string>)_last.Value; }
            set { _last = new InputPropertyInfo { Name = "last", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Native
        {
            get { return (QueryBuilderParameter<string>)_native.Value; }
            set { _native = new InputPropertyInfo { Name = "native", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> Alternative
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_alternative.Value; }
            set { _alternative = new InputPropertyInfo { Name = "alternative", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> AlternativeSpoiler
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_alternativeSpoiler.Value; }
            set { _alternativeSpoiler = new InputPropertyInfo { Name = "alternativeSpoiler", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_first.Name != null) yield return _first;
            if (_middle.Name != null) yield return _middle;
            if (_last.Name != null) yield return _last;
            if (_native.Name != null) yield return _native;
            if (_alternative.Name != null) yield return _alternative;
            if (_alternativeSpoiler.Name != null) yield return _alternativeSpoiler;
        }
    }

    public class StaffNameInput : IGraphQlInputObject
    {
        private InputPropertyInfo _first;
        private InputPropertyInfo _middle;
        private InputPropertyInfo _last;
        private InputPropertyInfo _native;
        private InputPropertyInfo _alternative;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> First
        {
            get { return (QueryBuilderParameter<string>)_first.Value; }
            set { _first = new InputPropertyInfo { Name = "first", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Middle
        {
            get { return (QueryBuilderParameter<string>)_middle.Value; }
            set { _middle = new InputPropertyInfo { Name = "middle", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Last
        {
            get { return (QueryBuilderParameter<string>)_last.Value; }
            set { _last = new InputPropertyInfo { Name = "last", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Native
        {
            get { return (QueryBuilderParameter<string>)_native.Value; }
            set { _native = new InputPropertyInfo { Name = "native", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> Alternative
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_alternative.Value; }
            set { _alternative = new InputPropertyInfo { Name = "alternative", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_first.Name != null) yield return _first;
            if (_middle.Name != null) yield return _middle;
            if (_last.Name != null) yield return _last;
            if (_native.Name != null) yield return _native;
            if (_alternative.Name != null) yield return _alternative;
        }
    }
    #endregion

    #region data classes
    public class Query
    {
        public Page Page { get; set; }
        public Media Media { get; set; }
        public MediaTrend MediaTrend { get; set; }
        public AiringSchedule AiringSchedule { get; set; }
        public Character Character { get; set; }
        public StaffType Staff { get; set; }
        public MediaList MediaList { get; set; }
        public MediaListCollection MediaListCollection { get; set; }
        public ICollection<string> GenreCollection { get; set; }
        public ICollection<MediaTag> MediaTagCollection { get; set; }
        public User User { get; set; }
        public User Viewer { get; set; }
        public NotificationUnion Notification { get; set; }
        public Studio Studio { get; set; }
        public Review Review { get; set; }
        public ActivityUnion Activity { get; set; }
        public ActivityReply ActivityReply { get; set; }
        public User Following { get; set; }
        public User Follower { get; set; }
        public Thread Thread { get; set; }
        public ICollection<ThreadComment> ThreadComment { get; set; }
        public Recommendation Recommendation { get; set; }
        public User Like { get; set; }
        public ParsedMarkdown Markdown { get; set; }
        public AniChartUser AniChartUser { get; set; }
        public SiteStatistics SiteStatistics { get; set; }
        public User MediaTagUser { get; set; }
    }

    public class Page
    {
        public PageInfo PageInfo { get; set; }
        public ICollection<User> Users { get; set; }
        public ICollection<Media> Media { get; set; }
        public ICollection<Character> Characters { get; set; }
        public ICollection<StaffType> Staff { get; set; }
        public ICollection<Studio> Studios { get; set; }
        public ICollection<MediaList> MediaList { get; set; }
        public ICollection<AiringSchedule> AiringSchedules { get; set; }
        public ICollection<MediaTrend> MediaTrends { get; set; }
        public ICollection<NotificationUnion> Notifications { get; set; }
        public ICollection<User> Followers { get; set; }
        public ICollection<User> Following { get; set; }
        public ICollection<ActivityUnion> Activities { get; set; }
        public ICollection<ActivityReply> ActivityReplies { get; set; }
        public ICollection<Thread> Threads { get; set; }
        public ICollection<ThreadComment> ThreadComments { get; set; }
        public ICollection<Review> Reviews { get; set; }
        public ICollection<Recommendation> Recommendations { get; set; }
        public ICollection<User> Likes { get; set; }
    }

    public class PageInfo
    {
        public int? Total { get; set; }
        public int? PerPage { get; set; }
        public int? CurrentPage { get; set; }
        public int? LastPage { get; set; }
        public bool? HasNextPage { get; set; }
    }

    public class User
    {
        public int? Id { get; set; }
        public string Name { get; set; }
        public string About { get; set; }
        public UserAvatar Avatar { get; set; }
        public string BannerImage { get; set; }
        public bool? IsFollowing { get; set; }
        public bool? IsFollower { get; set; }
        public bool? IsBlocked { get; set; }
        public object Bans { get; set; }
        public UserOptions Options { get; set; }
        public MediaListOptions MediaListOptions { get; set; }
        public Favourites Favourites { get; set; }
        public UserStatisticTypes Statistics { get; set; }
        public int? UnreadNotificationCount { get; set; }
        public string SiteUrl { get; set; }
        public int? DonatorTier { get; set; }
        public string DonatorBadge { get; set; }
        public ICollection<ModRole> ModeratorRoles { get; set; }
        public int? CreatedAt { get; set; }
        public int? UpdatedAt { get; set; }
        public ICollection<UserPreviousName> PreviousNames { get; set; }
    }

    public class UserAvatar
    {
        public string Large { get; set; }
        public string Medium { get; set; }
    }

    public class UserOptions
    {
        public UserTitleLanguage? TitleLanguage { get; set; }
        public bool? DisplayAdultContent { get; set; }
        public bool? AiringNotifications { get; set; }
        public string ProfileColor { get; set; }
        public ICollection<NotificationOption> NotificationOptions { get; set; }
        public string Timezone { get; set; }
        public int? ActivityMergeTime { get; set; }
        public UserStaffNameLanguage? StaffNameLanguage { get; set; }
    }

    public class NotificationOption
    {
        public NotificationType? Type { get; set; }
        public bool? Enabled { get; set; }
    }

    public class MediaListOptions
    {
        public ScoreFormat? ScoreFormat { get; set; }
        public string RowOrder { get; set; }
        public MediaListTypeOptions AnimeList { get; set; }
        public MediaListTypeOptions MangaList { get; set; }
    }

    public class MediaListTypeOptions
    {
        public ICollection<string> SectionOrder { get; set; }
        public bool? SplitCompletedSectionByFormat { get; set; }
        public ICollection<string> CustomLists { get; set; }
        public ICollection<string> AdvancedScoring { get; set; }
        public bool? AdvancedScoringEnabled { get; set; }
    }

    public class Favourites
    {
        public MediaConnection Anime { get; set; }
        public MediaConnection Manga { get; set; }
        public CharacterConnection Characters { get; set; }
        public StaffConnection Staff { get; set; }
        public StudioConnection Studios { get; set; }
    }

    public class MediaConnection
    {
        public ICollection<MediaEdge> Edges { get; set; }
        public ICollection<Media> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class MediaEdge
    {
        public Media Node { get; set; }
        public int? Id { get; set; }
        public MediaRelation? RelationType { get; set; }
        public bool? IsMainStudio { get; set; }
        public ICollection<Character> Characters { get; set; }
        public CharacterRole? CharacterRole { get; set; }
        public string CharacterName { get; set; }
        public string RoleNotes { get; set; }
        public string DubGroup { get; set; }
        public string StaffRole { get; set; }
        public ICollection<StaffType> VoiceActors { get; set; }
        public ICollection<StaffRoleType> VoiceActorRoles { get; set; }
        public int? FavouriteOrder { get; set; }
    }

    public class Media
    {
        public int? Id { get; set; }
        public int? IdMal { get; set; }
        public MediaTitle Title { get; set; }
        public MediaType? Type { get; set; }
        public MediaFormat? Format { get; set; }
        public MediaStatus? Status { get; set; }
        public string Description { get; set; }
        public FuzzyDate StartDate { get; set; }
        public FuzzyDate EndDate { get; set; }
        public MediaSeason? Season { get; set; }
        public int? SeasonYear { get; set; }
        public int? SeasonInt { get; set; }
        public int? Episodes { get; set; }
        public int? Duration { get; set; }
        public int? Chapters { get; set; }
        public int? Volumes { get; set; }
        public object CountryOfOrigin { get; set; }
        public bool? IsLicensed { get; set; }
        public MediaSource? Source { get; set; }
        public string Hashtag { get; set; }
        public MediaTrailer Trailer { get; set; }
        public int? UpdatedAt { get; set; }
        public MediaCoverImage CoverImage { get; set; }
        public string BannerImage { get; set; }
        public ICollection<string> Genres { get; set; }
        public ICollection<string> Synonyms { get; set; }
        public int? AverageScore { get; set; }
        public int? MeanScore { get; set; }
        public int? Popularity { get; set; }
        public bool? IsLocked { get; set; }
        public int? Trending { get; set; }
        public int? Favourites { get; set; }
        public ICollection<MediaTag> Tags { get; set; }
        public MediaConnection Relations { get; set; }
        public CharacterConnection Characters { get; set; }
        public StaffConnection Staff { get; set; }
        public StudioConnection Studios { get; set; }
        public bool? IsFavourite { get; set; }
        public bool? IsAdult { get; set; }
        public AiringSchedule NextAiringEpisode { get; set; }
        public AiringScheduleConnection AiringSchedule { get; set; }
        public MediaTrendConnection Trends { get; set; }
        public ICollection<MediaExternalLink> ExternalLinks { get; set; }
        public ICollection<MediaStreamingEpisode> StreamingEpisodes { get; set; }
        public ICollection<MediaRank> Rankings { get; set; }
        public MediaList MediaListEntry { get; set; }
        public ReviewConnection Reviews { get; set; }
        public RecommendationConnection Recommendations { get; set; }
        public MediaStats Stats { get; set; }
        public string SiteUrl { get; set; }
        public bool? AutoCreateForumThread { get; set; }
        public bool? IsRecommendationBlocked { get; set; }
        public string ModNotes { get; set; }
    }

    public class MediaTitle
    {
        public string Romaji { get; set; }
        public string English { get; set; }
        public string Native { get; set; }
        public string UserPreferred { get; set; }
    }

    public class FuzzyDate
    {
        public int? Year { get; set; }
        public int? Month { get; set; }
        public int? Day { get; set; }
    }

    public class MediaTrailer
    {
        public string Id { get; set; }
        public string Site { get; set; }
        public string Thumbnail { get; set; }
    }

    public class MediaCoverImage
    {
        public string ExtraLarge { get; set; }
        public string Large { get; set; }
        public string Medium { get; set; }
        public string Color { get; set; }
    }

    public class MediaTag
    {
        public int? Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Category { get; set; }
        public int? Rank { get; set; }
        public bool? IsGeneralSpoiler { get; set; }
        public bool? IsMediaSpoiler { get; set; }
        public bool? IsAdult { get; set; }
    }

    public class CharacterConnection
    {
        public ICollection<CharacterEdge> Edges { get; set; }
        public ICollection<Character> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class CharacterEdge
    {
        public Character Node { get; set; }
        public int? Id { get; set; }
        public CharacterRole? Role { get; set; }
        public string Name { get; set; }
        public ICollection<StaffType> VoiceActors { get; set; }
        public ICollection<StaffRoleType> VoiceActorRoles { get; set; }
        public ICollection<Media> Media { get; set; }
        public int? FavouriteOrder { get; set; }
    }

    public class Character
    {
        public int? Id { get; set; }
        public CharacterName Name { get; set; }
        public CharacterImage Image { get; set; }
        public string Description { get; set; }
        public string Gender { get; set; }
        public FuzzyDate DateOfBirth { get; set; }
        public string Age { get; set; }
        public string BloodType { get; set; }
        public bool? IsFavourite { get; set; }
        public bool? IsFavouriteBlocked { get; set; }
        public string SiteUrl { get; set; }
        public MediaConnection Media { get; set; }
        public int? Favourites { get; set; }
        public string ModNotes { get; set; }
    }

    public class CharacterName
    {
        public string First { get; set; }
        public string Middle { get; set; }
        public string Last { get; set; }
        public string Full { get; set; }
        public string Native { get; set; }
        public ICollection<string> Alternative { get; set; }
        public ICollection<string> AlternativeSpoiler { get; set; }
        public string UserPreferred { get; set; }
    }

    public class CharacterImage
    {
        public string Large { get; set; }
        public string Medium { get; set; }
    }

    public class StaffType
    {
        public int? Id { get; set; }
        public StaffName Name { get; set; }
        public string LanguageV2 { get; set; }
        public StaffImage Image { get; set; }
        public string Description { get; set; }
        public ICollection<string> PrimaryOccupations { get; set; }
        public string Gender { get; set; }
        public FuzzyDate DateOfBirth { get; set; }
        public FuzzyDate DateOfDeath { get; set; }
        public int? Age { get; set; }
        public ICollection<int> YearsActive { get; set; }
        public string HomeTown { get; set; }
        public string BloodType { get; set; }
        public bool? IsFavourite { get; set; }
        public bool? IsFavouriteBlocked { get; set; }
        public string SiteUrl { get; set; }
        public MediaConnection StaffMedia { get; set; }
        public CharacterConnection Characters { get; set; }
        public MediaConnection CharacterMedia { get; set; }
        public StaffType Staff { get; set; }
        public User Submitter { get; set; }
        public int? SubmissionStatus { get; set; }
        public string SubmissionNotes { get; set; }
        public int? Favourites { get; set; }
        public string ModNotes { get; set; }
    }

    public class StaffName
    {
        public string First { get; set; }
        public string Middle { get; set; }
        public string Last { get; set; }
        public string Full { get; set; }
        public string Native { get; set; }
        public ICollection<string> Alternative { get; set; }
        public string UserPreferred { get; set; }
    }

    public class StaffImage
    {
        public string Large { get; set; }
        public string Medium { get; set; }
    }

    public class StaffRoleType
    {
        public StaffType VoiceActor { get; set; }
        public string RoleNotes { get; set; }
        public string DubGroup { get; set; }
    }

    public class StaffConnection
    {
        public ICollection<StaffEdge> Edges { get; set; }
        public ICollection<StaffType> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class StaffEdge
    {
        public StaffType Node { get; set; }
        public int? Id { get; set; }
        public string Role { get; set; }
        public int? FavouriteOrder { get; set; }
    }

    public class StudioConnection
    {
        public ICollection<StudioEdge> Edges { get; set; }
        public ICollection<Studio> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class StudioEdge
    {
        public Studio Node { get; set; }
        public int? Id { get; set; }
        public bool? IsMain { get; set; }
        public int? FavouriteOrder { get; set; }
    }

    public class Studio
    {
        public int? Id { get; set; }
        public string Name { get; set; }
        public bool? IsAnimationStudio { get; set; }
        public MediaConnection Media { get; set; }
        public string SiteUrl { get; set; }
        public bool? IsFavourite { get; set; }
        public int? Favourites { get; set; }
    }

    public class AiringSchedule
    {
        public int? Id { get; set; }
        public int? AiringAt { get; set; }
        public int? TimeUntilAiring { get; set; }
        public int? Episode { get; set; }
        public int? MediaId { get; set; }
        public Media Media { get; set; }
    }

    public class AiringScheduleConnection
    {
        public ICollection<AiringScheduleEdge> Edges { get; set; }
        public ICollection<AiringSchedule> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class AiringScheduleEdge
    {
        public AiringSchedule Node { get; set; }
        public int? Id { get; set; }
    }

    public class MediaTrendConnection
    {
        public ICollection<MediaTrendEdge> Edges { get; set; }
        public ICollection<MediaTrend> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class MediaTrendEdge
    {
        public MediaTrend Node { get; set; }
    }

    public class MediaTrend
    {
        public int? MediaId { get; set; }
        public int? Date { get; set; }
        public int? Trending { get; set; }
        public int? AverageScore { get; set; }
        public int? Popularity { get; set; }
        public int? InProgress { get; set; }
        public bool? Releasing { get; set; }
        public int? Episode { get; set; }
        public Media Media { get; set; }
    }

    public class MediaExternalLink
    {
        public int? Id { get; set; }
        public string Url { get; set; }
        public string Site { get; set; }
    }

    public class MediaStreamingEpisode
    {
        public string Title { get; set; }
        public string Thumbnail { get; set; }
        public string Url { get; set; }
        public string Site { get; set; }
    }

    public class MediaRank
    {
        public int? Id { get; set; }
        public int? Rank { get; set; }
        public MediaRankType? Type { get; set; }
        public MediaFormat? Format { get; set; }
        public int? Year { get; set; }
        public MediaSeason? Season { get; set; }
        public bool? AllTime { get; set; }
        public string Context { get; set; }
    }

    public class MediaList
    {
        public int? Id { get; set; }
        public int? UserId { get; set; }
        public int? MediaId { get; set; }
        public MediaListStatus? Status { get; set; }
        public decimal? Score { get; set; }
        public int? Progress { get; set; }
        public int? ProgressVolumes { get; set; }
        public int? Repeat { get; set; }
        public int? Priority { get; set; }
        public bool? Private { get; set; }
        public string Notes { get; set; }
        public bool? HiddenFromStatusLists { get; set; }
        public object CustomLists { get; set; }
        public object AdvancedScores { get; set; }
        public FuzzyDate StartedAt { get; set; }
        public FuzzyDate CompletedAt { get; set; }
        public int? UpdatedAt { get; set; }
        public int? CreatedAt { get; set; }
        public Media Media { get; set; }
        public User User { get; set; }
    }

    public class ReviewConnection
    {
        public ICollection<ReviewEdge> Edges { get; set; }
        public ICollection<Review> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class ReviewEdge
    {
        public Review Node { get; set; }
    }

    public class Review
    {
        public int? Id { get; set; }
        public int? UserId { get; set; }
        public int? MediaId { get; set; }
        public MediaType? MediaType { get; set; }
        public string Summary { get; set; }
        public string Body { get; set; }
        public int? Rating { get; set; }
        public int? RatingAmount { get; set; }
        public ReviewRating? UserRating { get; set; }
        public int? Score { get; set; }
        public bool? Private { get; set; }
        public string SiteUrl { get; set; }
        public int? CreatedAt { get; set; }
        public int? UpdatedAt { get; set; }
        public User User { get; set; }
        public Media Media { get; set; }
    }

    public class RecommendationConnection
    {
        public ICollection<RecommendationEdge> Edges { get; set; }
        public ICollection<Recommendation> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class RecommendationEdge
    {
        public Recommendation Node { get; set; }
    }

    public class Recommendation
    {
        public int? Id { get; set; }
        public int? Rating { get; set; }
        public RecommendationRating? UserRating { get; set; }
        public Media Media { get; set; }
        public Media MediaRecommendation { get; set; }
        public User User { get; set; }
    }

    public class MediaStats
    {
        public ICollection<ScoreDistribution> ScoreDistribution { get; set; }
        public ICollection<StatusDistribution> StatusDistribution { get; set; }
    }

    public class ScoreDistribution
    {
        public int? Score { get; set; }
        public int? Amount { get; set; }
    }

    public class StatusDistribution
    {
        public MediaListStatus? Status { get; set; }
        public int? Amount { get; set; }
    }

    public class AiringProgression
    {
        public decimal? Episode { get; set; }
        public decimal? Score { get; set; }
        public int? Watching { get; set; }
    }

    public class UserStatisticTypes
    {
        public UserStatistics Anime { get; set; }
        public UserStatistics Manga { get; set; }
    }

    public class UserStatistics
    {
        public int? Count { get; set; }
        public decimal? MeanScore { get; set; }
        public decimal? StandardDeviation { get; set; }
        public int? MinutesWatched { get; set; }
        public int? EpisodesWatched { get; set; }
        public int? ChaptersRead { get; set; }
        public int? VolumesRead { get; set; }
        public ICollection<UserFormatStatistic> Formats { get; set; }
        public ICollection<UserStatusStatistic> Statuses { get; set; }
        public ICollection<UserScoreStatistic> Scores { get; set; }
        public ICollection<UserLengthStatistic> Lengths { get; set; }
        public ICollection<UserReleaseYearStatistic> ReleaseYears { get; set; }
        public ICollection<UserStartYearStatistic> StartYears { get; set; }
        public ICollection<UserGenreStatistic> Genres { get; set; }
        public ICollection<UserTagStatistic> Tags { get; set; }
        public ICollection<UserCountryStatistic> Countries { get; set; }
        public ICollection<UserVoiceActorStatistic> VoiceActors { get; set; }
        public ICollection<UserStaffStatistic> Staff { get; set; }
        public ICollection<UserStudioStatistic> Studios { get; set; }
    }

    public class UserFormatStatistic
    {
        public int? Count { get; set; }
        public decimal? MeanScore { get; set; }
        public int? MinutesWatched { get; set; }
        public int? ChaptersRead { get; set; }
        public ICollection<int> MediaIds { get; set; }
        public MediaFormat? Format { get; set; }
    }

    public class UserStatusStatistic
    {
        public int? Count { get; set; }
        public decimal? MeanScore { get; set; }
        public int? MinutesWatched { get; set; }
        public int? ChaptersRead { get; set; }
        public ICollection<int> MediaIds { get; set; }
        public MediaListStatus? Status { get; set; }
    }

    public class UserScoreStatistic
    {
        public int? Count { get; set; }
        public decimal? MeanScore { get; set; }
        public int? MinutesWatched { get; set; }
        public int? ChaptersRead { get; set; }
        public ICollection<int> MediaIds { get; set; }
        public int? Score { get; set; }
    }

    public class UserLengthStatistic
    {
        public int? Count { get; set; }
        public decimal? MeanScore { get; set; }
        public int? MinutesWatched { get; set; }
        public int? ChaptersRead { get; set; }
        public ICollection<int> MediaIds { get; set; }
        public string Length { get; set; }
    }

    public class UserReleaseYearStatistic
    {
        public int? Count { get; set; }
        public decimal? MeanScore { get; set; }
        public int? MinutesWatched { get; set; }
        public int? ChaptersRead { get; set; }
        public ICollection<int> MediaIds { get; set; }
        public int? ReleaseYear { get; set; }
    }

    public class UserStartYearStatistic
    {
        public int? Count { get; set; }
        public decimal? MeanScore { get; set; }
        public int? MinutesWatched { get; set; }
        public int? ChaptersRead { get; set; }
        public ICollection<int> MediaIds { get; set; }
        public int? StartYear { get; set; }
    }

    public class UserGenreStatistic
    {
        public int? Count { get; set; }
        public decimal? MeanScore { get; set; }
        public int? MinutesWatched { get; set; }
        public int? ChaptersRead { get; set; }
        public ICollection<int> MediaIds { get; set; }
        public string Genre { get; set; }
    }

    public class UserTagStatistic
    {
        public int? Count { get; set; }
        public decimal? MeanScore { get; set; }
        public int? MinutesWatched { get; set; }
        public int? ChaptersRead { get; set; }
        public ICollection<int> MediaIds { get; set; }
        public MediaTag Tag { get; set; }
    }

    public class UserCountryStatistic
    {
        public int? Count { get; set; }
        public decimal? MeanScore { get; set; }
        public int? MinutesWatched { get; set; }
        public int? ChaptersRead { get; set; }
        public ICollection<int> MediaIds { get; set; }
        public object Country { get; set; }
    }

    public class UserVoiceActorStatistic
    {
        public int? Count { get; set; }
        public decimal? MeanScore { get; set; }
        public int? MinutesWatched { get; set; }
        public int? ChaptersRead { get; set; }
        public ICollection<int> MediaIds { get; set; }
        public StaffType VoiceActor { get; set; }
        public ICollection<int> CharacterIds { get; set; }
    }

    public class UserStaffStatistic
    {
        public int? Count { get; set; }
        public decimal? MeanScore { get; set; }
        public int? MinutesWatched { get; set; }
        public int? ChaptersRead { get; set; }
        public ICollection<int> MediaIds { get; set; }
        public StaffType Staff { get; set; }
    }

    public class UserStudioStatistic
    {
        public int? Count { get; set; }
        public decimal? MeanScore { get; set; }
        public int? MinutesWatched { get; set; }
        public int? ChaptersRead { get; set; }
        public ICollection<int> MediaIds { get; set; }
        public Studio Studio { get; set; }
    }

    public class UserStats
    {
        public int? WatchedTime { get; set; }
        public int? ChaptersRead { get; set; }
        public ICollection<UserActivityHistory> ActivityHistory { get; set; }
        public ICollection<StatusDistribution> AnimeStatusDistribution { get; set; }
        public ICollection<StatusDistribution> MangaStatusDistribution { get; set; }
        public ICollection<ScoreDistribution> AnimeScoreDistribution { get; set; }
        public ICollection<ScoreDistribution> MangaScoreDistribution { get; set; }
        public ListScoreStats AnimeListScores { get; set; }
        public ListScoreStats MangaListScores { get; set; }
        public ICollection<GenreStats> FavouredGenresOverview { get; set; }
        public ICollection<GenreStats> FavouredGenres { get; set; }
        public ICollection<TagStats> FavouredTags { get; set; }
        public ICollection<StaffStats> FavouredActors { get; set; }
        public ICollection<StaffStats> FavouredStaff { get; set; }
        public ICollection<StudioStats> FavouredStudios { get; set; }
        public ICollection<YearStats> FavouredYears { get; set; }
        public ICollection<FormatStats> FavouredFormats { get; set; }
    }

    public class UserActivityHistory
    {
        public int? Date { get; set; }
        public int? Amount { get; set; }
        public int? Level { get; set; }
    }

    public class ListScoreStats
    {
        public int? MeanScore { get; set; }
        public int? StandardDeviation { get; set; }
    }

    public class GenreStats
    {
        public string Genre { get; set; }
        public int? Amount { get; set; }
        public int? MeanScore { get; set; }
        public int? TimeWatched { get; set; }
    }

    public class TagStats
    {
        public MediaTag Tag { get; set; }
        public int? Amount { get; set; }
        public int? MeanScore { get; set; }
        public int? TimeWatched { get; set; }
    }

    public class StaffStats
    {
        public StaffType Staff { get; set; }
        public int? Amount { get; set; }
        public int? MeanScore { get; set; }
        public int? TimeWatched { get; set; }
    }

    public class StudioStats
    {
        public Studio Studio { get; set; }
        public int? Amount { get; set; }
        public int? MeanScore { get; set; }
        public int? TimeWatched { get; set; }
    }

    public class YearStats
    {
        public int? Year { get; set; }
        public int? Amount { get; set; }
        public int? MeanScore { get; set; }
    }

    public class FormatStats
    {
        public MediaFormat? Format { get; set; }
        public int? Amount { get; set; }
    }

    public class UserPreviousName
    {
        public string Name { get; set; }
        public int? CreatedAt { get; set; }
        public int? UpdatedAt { get; set; }
    }

    public class NotificationUnion
    {
        public int? Id { get; set; }
        public NotificationType? Type { get; set; }
        public int? AnimeId { get; set; }
        public int? Episode { get; set; }
        public ICollection<string> Contexts { get; set; }
        public int? CreatedAt { get; set; }
        public Media Media { get; set; }
        public int? UserId { get; set; }
        public string Context { get; set; }
        public User User { get; set; }
        public int? ActivityId { get; set; }
        public MessageActivity Message { get; set; }
        public ActivityUnion Activity { get; set; }
        public int? CommentId { get; set; }
        public Thread Thread { get; set; }
        public ThreadComment Comment { get; set; }
        public int? ThreadId { get; set; }
        public int? MediaId { get; set; }
    }

    public class AiringNotification
    {
        public int? Id { get; set; }
        public NotificationType? Type { get; set; }
        public int? AnimeId { get; set; }
        public int? Episode { get; set; }
        public ICollection<string> Contexts { get; set; }
        public int? CreatedAt { get; set; }
        public Media Media { get; set; }
    }

    public class FollowingNotification
    {
        public int? Id { get; set; }
        public int? UserId { get; set; }
        public NotificationType? Type { get; set; }
        public string Context { get; set; }
        public int? CreatedAt { get; set; }
        public User User { get; set; }
    }

    public class ActivityMessageNotification
    {
        public int? Id { get; set; }
        public int? UserId { get; set; }
        public NotificationType? Type { get; set; }
        public int? ActivityId { get; set; }
        public string Context { get; set; }
        public int? CreatedAt { get; set; }
        public MessageActivity Message { get; set; }
        public User User { get; set; }
    }

    public class MessageActivity
    {
        public int? Id { get; set; }
        public int? RecipientId { get; set; }
        public int? MessengerId { get; set; }
        public ActivityType? Type { get; set; }
        public int? ReplyCount { get; set; }
        public string Message { get; set; }
        public bool? IsLocked { get; set; }
        public bool? IsSubscribed { get; set; }
        public int? LikeCount { get; set; }
        public bool? IsLiked { get; set; }
        public bool? IsPrivate { get; set; }
        public string SiteUrl { get; set; }
        public int? CreatedAt { get; set; }
        public User Recipient { get; set; }
        public User Messenger { get; set; }
        public ICollection<ActivityReply> Replies { get; set; }
        public ICollection<User> Likes { get; set; }
    }

    public class ActivityReply
    {
        public int? Id { get; set; }
        public int? UserId { get; set; }
        public int? ActivityId { get; set; }
        public string Text { get; set; }
        public int? LikeCount { get; set; }
        public bool? IsLiked { get; set; }
        public int? CreatedAt { get; set; }
        public User User { get; set; }
        public ICollection<User> Likes { get; set; }
    }

    public class ActivityMentionNotification
    {
        public int? Id { get; set; }
        public int? UserId { get; set; }
        public NotificationType? Type { get; set; }
        public int? ActivityId { get; set; }
        public string Context { get; set; }
        public int? CreatedAt { get; set; }
        public ActivityUnion Activity { get; set; }
        public User User { get; set; }
    }

    public class ActivityUnion
    {
        public int? Id { get; set; }
        public int? UserId { get; set; }
        public ActivityType? Type { get; set; }
        public int? ReplyCount { get; set; }
        public string Text { get; set; }
        public string SiteUrl { get; set; }
        public bool? IsLocked { get; set; }
        public bool? IsSubscribed { get; set; }
        public int? LikeCount { get; set; }
        public bool? IsLiked { get; set; }
        public int? CreatedAt { get; set; }
        public User User { get; set; }
        public ICollection<ActivityReply> Replies { get; set; }
        public ICollection<User> Likes { get; set; }
        public string Status { get; set; }
        public string Progress { get; set; }
        public Media Media { get; set; }
        public int? RecipientId { get; set; }
        public int? MessengerId { get; set; }
        public string Message { get; set; }
        public bool? IsPrivate { get; set; }
        public User Recipient { get; set; }
        public User Messenger { get; set; }
    }

    public class TextActivity
    {
        public int? Id { get; set; }
        public int? UserId { get; set; }
        public ActivityType? Type { get; set; }
        public int? ReplyCount { get; set; }
        public string Text { get; set; }
        public string SiteUrl { get; set; }
        public bool? IsLocked { get; set; }
        public bool? IsSubscribed { get; set; }
        public int? LikeCount { get; set; }
        public bool? IsLiked { get; set; }
        public int? CreatedAt { get; set; }
        public User User { get; set; }
        public ICollection<ActivityReply> Replies { get; set; }
        public ICollection<User> Likes { get; set; }
    }

    public class ListActivity
    {
        public int? Id { get; set; }
        public int? UserId { get; set; }
        public ActivityType? Type { get; set; }
        public int? ReplyCount { get; set; }
        public string Status { get; set; }
        public string Progress { get; set; }
        public bool? IsLocked { get; set; }
        public bool? IsSubscribed { get; set; }
        public int? LikeCount { get; set; }
        public bool? IsLiked { get; set; }
        public string SiteUrl { get; set; }
        public int? CreatedAt { get; set; }
        public User User { get; set; }
        public Media Media { get; set; }
        public ICollection<ActivityReply> Replies { get; set; }
        public ICollection<User> Likes { get; set; }
    }

    public class ActivityReplyNotification
    {
        public int? Id { get; set; }
        public int? UserId { get; set; }
        public NotificationType? Type { get; set; }
        public int? ActivityId { get; set; }
        public string Context { get; set; }
        public int? CreatedAt { get; set; }
        public ActivityUnion Activity { get; set; }
        public User User { get; set; }
    }

    public class ActivityReplySubscribedNotification
    {
        public int? Id { get; set; }
        public int? UserId { get; set; }
        public NotificationType? Type { get; set; }
        public int? ActivityId { get; set; }
        public string Context { get; set; }
        public int? CreatedAt { get; set; }
        public ActivityUnion Activity { get; set; }
        public User User { get; set; }
    }

    public class ActivityLikeNotification
    {
        public int? Id { get; set; }
        public int? UserId { get; set; }
        public NotificationType? Type { get; set; }
        public int? ActivityId { get; set; }
        public string Context { get; set; }
        public int? CreatedAt { get; set; }
        public ActivityUnion Activity { get; set; }
        public User User { get; set; }
    }

    public class ActivityReplyLikeNotification
    {
        public int? Id { get; set; }
        public int? UserId { get; set; }
        public NotificationType? Type { get; set; }
        public int? ActivityId { get; set; }
        public string Context { get; set; }
        public int? CreatedAt { get; set; }
        public ActivityUnion Activity { get; set; }
        public User User { get; set; }
    }

    public class ThreadCommentMentionNotification
    {
        public int? Id { get; set; }
        public int? UserId { get; set; }
        public NotificationType? Type { get; set; }
        public int? CommentId { get; set; }
        public string Context { get; set; }
        public int? CreatedAt { get; set; }
        public Thread Thread { get; set; }
        public ThreadComment Comment { get; set; }
        public User User { get; set; }
    }

    public class Thread
    {
        public int? Id { get; set; }
        public string Title { get; set; }
        public string Body { get; set; }
        public int? UserId { get; set; }
        public int? ReplyUserId { get; set; }
        public int? ReplyCommentId { get; set; }
        public int? ReplyCount { get; set; }
        public int? ViewCount { get; set; }
        public bool? IsLocked { get; set; }
        public bool? IsSticky { get; set; }
        public bool? IsSubscribed { get; set; }
        public int? LikeCount { get; set; }
        public bool? IsLiked { get; set; }
        public int? RepliedAt { get; set; }
        public int? CreatedAt { get; set; }
        public int? UpdatedAt { get; set; }
        public User User { get; set; }
        public User ReplyUser { get; set; }
        public ICollection<User> Likes { get; set; }
        public string SiteUrl { get; set; }
        public ICollection<ThreadCategory> Categories { get; set; }
        public ICollection<Media> MediaCategories { get; set; }
    }

    public class ThreadCategory
    {
        public int? Id { get; set; }
        public string Name { get; set; }
    }

    public class ThreadComment
    {
        public int? Id { get; set; }
        public int? UserId { get; set; }
        public int? ThreadId { get; set; }
        public string Comment { get; set; }
        public int? LikeCount { get; set; }
        public bool? IsLiked { get; set; }
        public string SiteUrl { get; set; }
        public int? CreatedAt { get; set; }
        public int? UpdatedAt { get; set; }
        public Thread Thread { get; set; }
        public User User { get; set; }
        public ICollection<User> Likes { get; set; }
        public object ChildComments { get; set; }
    }

    public class ThreadCommentReplyNotification
    {
        public int? Id { get; set; }
        public int? UserId { get; set; }
        public NotificationType? Type { get; set; }
        public int? CommentId { get; set; }
        public string Context { get; set; }
        public int? CreatedAt { get; set; }
        public Thread Thread { get; set; }
        public ThreadComment Comment { get; set; }
        public User User { get; set; }
    }

    public class ThreadCommentSubscribedNotification
    {
        public int? Id { get; set; }
        public int? UserId { get; set; }
        public NotificationType? Type { get; set; }
        public int? CommentId { get; set; }
        public string Context { get; set; }
        public int? CreatedAt { get; set; }
        public Thread Thread { get; set; }
        public ThreadComment Comment { get; set; }
        public User User { get; set; }
    }

    public class ThreadCommentLikeNotification
    {
        public int? Id { get; set; }
        public int? UserId { get; set; }
        public NotificationType? Type { get; set; }
        public int? CommentId { get; set; }
        public string Context { get; set; }
        public int? CreatedAt { get; set; }
        public Thread Thread { get; set; }
        public ThreadComment Comment { get; set; }
        public User User { get; set; }
    }

    public class ThreadLikeNotification
    {
        public int? Id { get; set; }
        public int? UserId { get; set; }
        public NotificationType? Type { get; set; }
        public int? ThreadId { get; set; }
        public string Context { get; set; }
        public int? CreatedAt { get; set; }
        public Thread Thread { get; set; }
        public ThreadComment Comment { get; set; }
        public User User { get; set; }
    }

    public class RelatedMediaAdditionNotification
    {
        public int? Id { get; set; }
        public NotificationType? Type { get; set; }
        public int? MediaId { get; set; }
        public string Context { get; set; }
        public int? CreatedAt { get; set; }
        public Media Media { get; set; }
    }

    public class MediaListCollection
    {
        public ICollection<MediaListGroup> Lists { get; set; }
        public User User { get; set; }
        public bool? HasNextChunk { get; set; }
    }

    public class MediaListGroup
    {
        public ICollection<MediaList> Entries { get; set; }
        public string Name { get; set; }
        public bool? IsCustomList { get; set; }
        public bool? IsSplitCompletedList { get; set; }
        public MediaListStatus? Status { get; set; }
    }

    public class ParsedMarkdown
    {
        public string Html { get; set; }
    }

    public class AniChartUser
    {
        public User User { get; set; }
        public object Settings { get; set; }
        public object Highlights { get; set; }
    }

    public class SiteStatistics
    {
        public SiteTrendConnection Users { get; set; }
        public SiteTrendConnection Anime { get; set; }
        public SiteTrendConnection Manga { get; set; }
        public SiteTrendConnection Characters { get; set; }
        public SiteTrendConnection Staff { get; set; }
        public SiteTrendConnection Studios { get; set; }
        public SiteTrendConnection Reviews { get; set; }
    }

    public class SiteTrendConnection
    {
        public ICollection<SiteTrendEdge> Edges { get; set; }
        public ICollection<SiteTrend> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class SiteTrendEdge
    {
        public SiteTrend Node { get; set; }
    }

    public class SiteTrend
    {
        public int? Date { get; set; }
        public int? Count { get; set; }
        public int? Change { get; set; }
    }

    public class Mutation
    {
        public User UpdateUser { get; set; }
        public MediaList SaveMediaListEntry { get; set; }
        public ICollection<MediaList> UpdateMediaListEntries { get; set; }
        public DeletedType DeleteMediaListEntry { get; set; }
        public DeletedType DeleteCustomList { get; set; }
        public TextActivity SaveTextActivity { get; set; }
        public MessageActivity SaveMessageActivity { get; set; }
        public ListActivity SaveListActivity { get; set; }
        public DeletedType DeleteActivity { get; set; }
        public ActivityUnion ToggleActivitySubscription { get; set; }
        public ActivityReply SaveActivityReply { get; set; }
        public DeletedType DeleteActivityReply { get; set; }
        public ICollection<User> ToggleLike { get; set; }
        public LikeableUnion ToggleLikeV2 { get; set; }
        public User ToggleFollow { get; set; }
        public Favourites ToggleFavourite { get; set; }
        public Favourites UpdateFavouriteOrder { get; set; }
        public Review SaveReview { get; set; }
        public DeletedType DeleteReview { get; set; }
        public Review RateReview { get; set; }
        public Recommendation SaveRecommendation { get; set; }
        public Thread SaveThread { get; set; }
        public DeletedType DeleteThread { get; set; }
        public Thread ToggleThreadSubscription { get; set; }
        public ThreadComment SaveThreadComment { get; set; }
        public DeletedType DeleteThreadComment { get; set; }
        public object UpdateAniChartSettings { get; set; }
        public object UpdateAniChartHighlights { get; set; }
    }

    public class DeletedType
    {
        public bool? Deleted { get; set; }
    }

    public class LikeableUnion
    {
        public int? Id { get; set; }
        public int? UserId { get; set; }
        public ActivityType? Type { get; set; }
        public int? ReplyCount { get; set; }
        public string Status { get; set; }
        public string Progress { get; set; }
        public bool? IsLocked { get; set; }
        public bool? IsSubscribed { get; set; }
        public int? LikeCount { get; set; }
        public bool? IsLiked { get; set; }
        public string SiteUrl { get; set; }
        public int? CreatedAt { get; set; }
        public User User { get; set; }
        public Media Media { get; set; }
        public ICollection<ActivityReply> Replies { get; set; }
        public ICollection<User> Likes { get; set; }
        public string Text { get; set; }
        public int? RecipientId { get; set; }
        public int? MessengerId { get; set; }
        public string Message { get; set; }
        public bool? IsPrivate { get; set; }
        public User Recipient { get; set; }
        public User Messenger { get; set; }
        public int? ActivityId { get; set; }
        public string Title { get; set; }
        public string Body { get; set; }
        public int? ReplyUserId { get; set; }
        public int? ReplyCommentId { get; set; }
        public int? ViewCount { get; set; }
        public bool? IsSticky { get; set; }
        public int? RepliedAt { get; set; }
        public int? UpdatedAt { get; set; }
        public User ReplyUser { get; set; }
        public ICollection<ThreadCategory> Categories { get; set; }
        public ICollection<Media> MediaCategories { get; set; }
        public int? ThreadId { get; set; }
        public string Comment { get; set; }
        public Thread Thread { get; set; }
        public object ChildComments { get; set; }
    }

    public class InternalPage
    {
        public ICollection<MediaSubmission> MediaSubmissions { get; set; }
        public ICollection<CharacterSubmission> CharacterSubmissions { get; set; }
        public ICollection<StaffSubmission> StaffSubmissions { get; set; }
        public ICollection<RevisionHistory> RevisionHistory { get; set; }
        public ICollection<Report> Reports { get; set; }
        public ICollection<ModAction> ModActions { get; set; }
        public PageInfo PageInfo { get; set; }
        public ICollection<User> Users { get; set; }
        public ICollection<Media> Media { get; set; }
        public ICollection<Character> Characters { get; set; }
        public ICollection<StaffType> Staff { get; set; }
        public ICollection<Studio> Studios { get; set; }
        public ICollection<MediaList> MediaList { get; set; }
        public ICollection<AiringSchedule> AiringSchedules { get; set; }
        public ICollection<MediaTrend> MediaTrends { get; set; }
        public ICollection<NotificationUnion> Notifications { get; set; }
        public ICollection<User> Followers { get; set; }
        public ICollection<User> Following { get; set; }
        public ICollection<ActivityUnion> Activities { get; set; }
        public ICollection<ActivityReply> ActivityReplies { get; set; }
        public ICollection<Thread> Threads { get; set; }
        public ICollection<ThreadComment> ThreadComments { get; set; }
        public ICollection<Review> Reviews { get; set; }
        public ICollection<Recommendation> Recommendations { get; set; }
        public ICollection<User> Likes { get; set; }
    }

    public class MediaSubmission
    {
        public int? Id { get; set; }
        public User Submitter { get; set; }
        public SubmissionStatus? Status { get; set; }
        public object SubmitterStats { get; set; }
        public string Notes { get; set; }
        public string Source { get; set; }
        public ICollection<string> Changes { get; set; }
        public Media Media { get; set; }
        public Media Submission { get; set; }
        public ICollection<MediaSubmissionComparison> Characters { get; set; }
        public ICollection<MediaSubmissionComparison> Staff { get; set; }
        public ICollection<MediaSubmissionComparison> Studios { get; set; }
        public ICollection<MediaEdge> Relations { get; set; }
        public ICollection<MediaExternalLink> ExternalLinks { get; set; }
        public int? CreatedAt { get; set; }
    }

    public class MediaSubmissionComparison
    {
        public MediaSubmissionEdge Submission { get; set; }
        public MediaCharacter Character { get; set; }
        public StaffEdge Staff { get; set; }
        public StudioEdge Studio { get; set; }
    }

    public class MediaSubmissionEdge
    {
        public int? Id { get; set; }
        public CharacterRole? CharacterRole { get; set; }
        public string StaffRole { get; set; }
        public string RoleNotes { get; set; }
        public string DubGroup { get; set; }
        public string CharacterName { get; set; }
        public bool? IsMain { get; set; }
        public Character Character { get; set; }
        public Character CharacterSubmission { get; set; }
        public StaffType VoiceActor { get; set; }
        public StaffType VoiceActorSubmission { get; set; }
        public StaffType Staff { get; set; }
        public StaffType StaffSubmission { get; set; }
        public Studio Studio { get; set; }
        public Media Media { get; set; }
    }

    public class MediaCharacter
    {
        public int? Id { get; set; }
        public CharacterRole? Role { get; set; }
        public string RoleNotes { get; set; }
        public string DubGroup { get; set; }
        public string CharacterName { get; set; }
        public Character Character { get; set; }
        public StaffType VoiceActor { get; set; }
    }

    public class CharacterSubmission
    {
        public int? Id { get; set; }
        public Character Character { get; set; }
        public Character Submission { get; set; }
        public User Submitter { get; set; }
        public SubmissionStatus? Status { get; set; }
        public string Notes { get; set; }
        public string Source { get; set; }
        public int? CreatedAt { get; set; }
    }

    public class StaffSubmission
    {
        public int? Id { get; set; }
        public StaffType Staff { get; set; }
        public StaffType Submission { get; set; }
        public User Submitter { get; set; }
        public SubmissionStatus? Status { get; set; }
        public string Notes { get; set; }
        public string Source { get; set; }
        public int? CreatedAt { get; set; }
    }

    public class RevisionHistory
    {
        public int? Id { get; set; }
        public RevisionHistoryAction? Action { get; set; }
        public object Changes { get; set; }
        public User User { get; set; }
        public Media Media { get; set; }
        public Character Character { get; set; }
        public StaffType Staff { get; set; }
        public Studio Studio { get; set; }
        public int? CreatedAt { get; set; }
    }

    public class Report
    {
        public int? Id { get; set; }
        public User Reporter { get; set; }
        public User Reported { get; set; }
        public string Reason { get; set; }
        public int? CreatedAt { get; set; }
        public bool? Cleared { get; set; }
    }

    public class ModAction
    {
        public int? Id { get; set; }
        public User User { get; set; }
        public User Mod { get; set; }
        public ModActionType? Type { get; set; }
        public int? ObjectId { get; set; }
        public string ObjectType { get; set; }
        public string Data { get; set; }
        public int? CreatedAt { get; set; }
    }

    public class CharacterSubmissionConnection
    {
        public ICollection<CharacterSubmissionEdge> Edges { get; set; }
        public ICollection<CharacterSubmission> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
    }

    public class CharacterSubmissionEdge
    {
        public CharacterSubmission Node { get; set; }
        public CharacterRole? Role { get; set; }
        public ICollection<StaffType> VoiceActors { get; set; }
        public ICollection<StaffSubmission> SubmittedVoiceActors { get; set; }
    }

    public class UserModData
    {
        public ICollection<User> Alts { get; set; }
        public object Bans { get; set; }
        public object Ip { get; set; }
        public object Counts { get; set; }
        public int? Privacy { get; set; }
        public string Email { get; set; }
    }
    #endregion
}
