// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    var aniListResponse = AniListResponse.FromJson(jsonString);

using MangaAdaptationsAnilist.GraphQl;

namespace MangaAdaptationsAnilist.Data
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    
    public partial class AniListResponse
    {
        [property: JsonProperty("Page")] public Page Page { set; get; }
    }

    public record CoverImage(
        [property: JsonProperty("large")] string Large
    );

    public record Media(
        [property: JsonProperty("id")] int Id,
        [property: JsonProperty("type")] MediaType Type,
        [property: JsonProperty("title")] Title Title,
        [property: JsonProperty("genres")] IReadOnlyList<string> Genres,
        [property: JsonProperty("tags")] IReadOnlyList<Tag> Tags,
        [property: JsonProperty("averageScore")] int? AverageScore,
        [property: JsonProperty("coverImage")] CoverImage CoverImage,
        [property: JsonProperty("relations")] Relations Relations
    );

    public record MediaList(
        [property: JsonProperty("status")] MediaListStatus Status,
        [property: JsonProperty("media")] Media Media
    );

    public record Page(
        [property: JsonProperty("pageInfo")] PageInfo PageInfo,
        [property: JsonProperty("mediaList")] IReadOnlyList<MediaList> MediaList
    );

    public record PageInfo(
        [property: JsonProperty("total")] int Total,
        [property: JsonProperty("perPage")] int PerPage,
        [property: JsonProperty("currentPage")] int CurrentPage,
        [property: JsonProperty("lastPage")] int LastPage,
        [property: JsonProperty("hasNextPage")] bool HasNextPage
    );

    public record Relations(
        [property: JsonProperty("nodes")] IReadOnlyList<Media> Nodes
    );

    public record Tag(
        [property: JsonProperty("name")] string Name
    );

    public record Title(
        [property: JsonProperty("romaji")] string Romaji,
        [property: JsonProperty("english")] string English
    );
    

    public partial class AniListResponse
    {
        public static AniListResponse FromJson(string json) => JsonConvert.DeserializeObject<AniListResponse>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AniListResponse self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
